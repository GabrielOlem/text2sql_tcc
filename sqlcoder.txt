SELECT count(*) AS num_singers
FROM singer;<separator>SELECT count(*) AS total_number_of_singers
       FROM   singer;<separator>SELECT singer.name,
              singer.country,
              singer.age
       FROM   singer
       ORDER BY singer.age ASC;<separator>SELECT singer.name,
              singer.country,
              singer.age
       FROM   singer
       ORDER  BY singer.age DESC;<separator>SELECT AVG(singer.age), MIN(singer.age), MAX(singer.age)
FROM   singer
WHERE  singer.country = 'France';<separator>SELECT AVG(singer.age) AS average_age,
       MIN(singer.age) AS minimum_age,
       MAX(singer.age) AS maximum_age
FROM   singer
WHERE  singer.country = 'France'
AND    singer.is_male = false;<separator>SELECT singer.name,
       singer.song_release_year
FROM   singer
WHERE  singer.age = (SELECT min(singer.age)
                     FROM   singer)
ORDER BY singer.name;<separator>SELECT singer.name,
       singer.song_release_year
FROM   singer
WHERE  singer.age = (SELECT min(singer.age)
                     FROM   singer)
ORDER BY singer.name;<separator>SELECT DISTINCT singer.country
FROM   singer
WHERE  singer.age > 20;<separator>SELECT DISTINCT singer.country
FROM   singer
WHERE  singer.age > 20;<separator>SELECT singer.country,
          count(*) AS num_of_singers
       FROM   singer
       GROUP BY singer.country
       ORDER BY num_of_singers desc;<separator>SELECT singer.country,
       count(*) AS num_singers
FROM   singer
GROUP BY singer.country
ORDER BY num_singers desc;<separator>SELECT singer.Song_Name
FROM   singer
WHERE  singer.Age > (SELECT AVG(singer.Age)
                     FROM   singer)
ORDER BY singer.Song_Name asc;<separator>SELECT DISTINCT singer.Song_Name
FROM   singer
WHERE  singer.Age > (SELECT AVG(singer.Age)
                     FROM   singer)
ORDER BY singer.Song_Name;<separator>SELECT stadium.location,
              stadium.name
       FROM   stadium
       WHERE  stadium.capacity between 5000 and 10000;<separator>SELECT stadium.location,
       stadium.name
FROM   stadium
WHERE  stadium.capacity between 5000 and 10000;<separator>SELECT max(stadium.capacity) AS max_capacity,
       avg(stadium.capacity) AS avg_capacity
       FROM   stadium;<separator>SELECT stadium.name,
              stadium.capacity,
              stadium.highest,
              stadium.lowest,
              stadium.average
       FROM   stadium
       ORDER BY stadium.name;<separator>SELECT stadium.name,
              stadium.capacity
       FROM   stadium
       WHERE  stadium.stadium_id = (SELECT stadium_id
                                   FROM   stadium
                                   ORDER BY stadium.average desc
                                   LIMIT 1);<separator>SELECT stadium.name,
              stadium.capacity
       FROM   stadium
       WHERE  stadium.stadium_id = (SELECT stadium_id
                                   FROM   stadium
                                   ORDER BY stadium.average desc
                                   LIMIT 1);<separator>SELECT count(*)
FROM   concert
WHERE  concert.year in ('2014', '2015');<separator>SELECT count(*)
FROM   concert
WHERE  concert.year in ('2014', '2015');<separator>SELECT stadium.name,
       count(concert.concert_id) AS num_concerts
FROM   stadium join concert on stadium.stadium_id = concert.stadium_id
GROUP BY stadium.name
ORDER BY num_concerts desc;<separator>SELECT stadium.name,
       count(concert.concert_id) AS concert_count
FROM   stadium join concert on stadium.stadium_id = concert.stadium_id
GROUP BY stadium.name
ORDER BY concert_count desc;<separator>SELECT stadium.name,
       stadium.capacity
FROM   stadium
JOIN   (SELECT concert.stadium_id,
                count(*) as concert_count
         FROM   concert
         WHERE  concert.year >= '2014'
         GROUP BY concert.stadium_id;<separator>SELECT stadium.name,
       stadium.capacity
FROM   stadium
WHERE  stadium.stadium_id in (SELECT concert.stadium_id
                              FROM   concert
                              WHERE  concert.year > '2013'
                              GROUP BY concert.stadium_id
                              ORDER;<separator>SELECT concert.year,
       count(*) as num_of_concerts
FROM   concert
GROUP BY concert.year
ORDER BY num_of_concerts desc
LIMIT 1;<separator>SELECT concert.year,
       count(*) as num_concerts
FROM   concert
GROUP BY concert.year
ORDER BY num_concerts desc
LIMIT 1;<separator>SELECT DISTINCT stadium.name
FROM   stadium
WHERE  stadium.stadium_id not in (SELECT concert.stadium_id
                                  FROM   concert);<separator>SELECT stadium.name
       FROM   stadium
       WHERE  stadium.stadium_id not in (SELECT concert.stadium_id
                                        FROM   concert);<separator>SELECT DISTINCT singer.country
FROM   singer
WHERE  singer.age > 40
   OR singer.age < 30;<separator>SELECT stadium.name
       FROM   stadium
       WHERE  stadium.stadium_id NOT IN (SELECT concert.stadium_id
                                        FROM   concert
                                        WHERE  concert.year = '2014');<separator>SELECT stadium.name
       FROM   stadium
       WHERE  stadium.stadium_id not in (SELECT concert.stadium_id
                                        FROM   concert
                                        WHERE  concert.year = '2014');<separator>SELECT concert.concert_ID,
       concert.concert_name,
       concert.theme,
       count(singer_in_concert.singer_id) as num_of_singers
FROM   concert
         left join singer_in_concert on concert.con;<separator>SELECT concert.concert_ID,
       concert.concert_name,
       concert.theme,
       count(singer_in_concert.singer_id) as number_of_singers
FROM   concert join singer_in_concert on concert.concert_;<separator>SELECT singer.name,
       count(singer_in_concert.concert_id) as number_of_concerts
FROM   singer
       left join singer_in_concert
           on singer.singer_id = singer_in_concert.singer_id;<separator>SELECT singer.name,
       count(singer_in_concert.concert_id) as number_of_concerts
FROM   singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id
GROUP BY s;<separator>SELECT DISTINCT singer.name
       FROM   singer, singer_in_concert, concert
       WHERE  singer.singer_id = singer_in_concert.singer_id
          AND singer_in_concert.concert_id = concert.concert_id;<separator>SELECT DISTINCT singer.name
       FROM   singer_in_concert join singer on singer_in_concert.singer_id = singer.singer_id
       WHERE  singer_in_concert.concert_id in (SELECT concert_id
                                              FROM   concert;<separator>SELECT singer.name, singer.country
      FROM   singer
      WHERE  singer.song_name ilike '%Hey%';<separator>SELECT singer.name, singer.country
      FROM   singer
      WHERE  singer.song_name ilike '%Hey%'
      ORDER BY singer.name;<separator>SELECT DISTINCT stadium.name, stadium.location
FROM   stadium
WHERE  stadium.stadium_id in (SELECT concert.stadium_id
                              FROM   concert
                              WHERE  concert.year = '2014'
                                 or concert.year = '2015;<separator>SELECT DISTINCT stadium.name, stadium.location
FROM   stadium
WHERE  stadium.stadium_id in (SELECT concert.stadium_id
                              FROM   concert
                              WHERE  concert.year = '2014'
                                 or concert.year = '2015;<separator>SELECT count(*) AS num_of_concerts
FROM concert
WHERE concert.stadium_id = (SELECT stadium_id
                            FROM stadium
                            WHERE stadium.capacity = (SELECT max(capacity)
                                                    FROM stadium));<separator>SELECT count(*) AS num_concerts
FROM concert
WHERE concert.stadium_id = (SELECT stadium_id
                            FROM stadium
                            WHERE capacity = (SELECT max(capacity)
                                             FROM stadium));<separator>SELECT count(*)
FROM   pets
WHERE  weight > 10;<separator>SELECT count(*)
FROM   pets
WHERE  weight > 10;<separator>SELECT min(pets.weight) AS youngest_dog_weight
  FROM   pets
  WHERE  pets.pet_age = (SELECT min(pets.pet_age)
                         FROM   pets);<separator>SELECT min(pets.weight) AS youngest_dog_weight
  FROM   pets
  WHERE  pets.pet_age = (SELECT min(pets.pet_age)
                         FROM   pets);<separator>SELECT pets.pet_type,
              max(pets.weight) AS max_weight
       FROM   pets
       GROUP BY pets.pet_type
       ORDER BY max_weight DESC;<separator>SELECT pets.pet_type,
              max(pets.weight) AS max_weight
       FROM   pets
       GROUP BY pets.pet_type
       ORDER BY max_weight DESC;<separator>SELECT count(*)
FROM   has_pet
WHERE  has_pet.stuid in (select student.stuid
                           from   student
                           where  student.age > 20);<separator>SELECT count(*) as num_pets
FROM   has_pet hp join student s on hp.stuid = s.stuid
WHERE  s.age > 20;<separator>SELECT count(*)
FROM   (SELECT DISTINCT has_pet.petid
        FROM   has_pet join student on has_pet.stuid = student.stuid
        WHERE  student.sex = 'F' and pets.pettype = 'dog') as subquery;<separator>SELECT count(*) AS dog_pets_raised_by_female_students
FROM   has_pet join student on has_pet.stuid = student.stuid join pets on has_pet.petid = pets.petid
WHERE  student.sex = 'F' and pets.pet;<separator>SELECT COUNT(DISTINCT pets.pet_type) AS num_distinct_pets
  FROM   pets;<separator>SELECT COUNT(DISTINCT pets.pet_type) AS num_different_types_of_pet
FROM   pets;<separator>SELECT student.fname
       FROM   student
       WHERE  student.stuid in (SELECT has_pet.stuid
                               FROM   has_pet
                               WHERE  has_pet.petid in (SELECT pets.petid
                                                       FROM   pets
                                                       WHERE  pets.pettype = 'cat'
                                                          or pets;<separator>SELECT student.first_name
       FROM   student
       WHERE  student.stuid in (SELECT has_pet.stuid
                               FROM   has_pet
                               WHERE  has_pet.petid in (SELECT pets.petid
                                                       FROM   pets
                                                       WHERE  pets.pettype = 'cat'
                                                          or;<separator>SELECT student.fname
       FROM   student
       WHERE  student.stuid in (SELECT has_pet.stuid
                              FROM   has_pet
                              WHERE  has_pet.petid in (SELECT pets.petid
                                                     FROM   pets
                                                     WHERE  pets.pettype = 'cat' or pets.;<separator>SELECT DISTINCT student.fname
FROM   student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid
WHERE  pets.pettype = 'cat' or pets.pettype = 'dog';<separator>SELECT student.major,
              student.age
       FROM   student
       WHERE  student.stuid not in (select has_pet.stuid
                                    from   has_pet
                                    where  has_pet.petid = 1);<separator>SELECT student.major,
       student.age
FROM   student
WHERE  student.stuid not in (select has_pet.stuid
                             from   has_pet
                             where  has_pet.petid = 1)
ORDER BY student.major asc, student.age asc;<separator>SELECT student.stuid
       FROM   student
       WHERE  student.stuid not in (SELECT has_pet.stuid
                                   FROM   has_pet
                                   WHERE  has_pet.petid = (SELECT pets.petid
                                                            FROM   pets
                                                            WHERE  pets.pettype = 'cat'));<separator>SELECT student.stuid
       FROM   student
       WHERE  student.stuid not in (SELECT has_pet.stuid
                                   FROM   has_pet
                                   WHERE  has_pet.petid in (SELECT pet.petid
                                                            FROM   pet
                                                            WHERE  pet.pettype = 'cat'));<separator>SELECT student.first_name,
              student.age
       FROM   student
       WHERE  student.stuid NOT IN (SELECT has_pet.stuid
                                    FROM   has_pet
                                    WHERE  has_pet.petid = 1) and student.stuid NOT IN (SELECT has_pet.stuid;<separator>SELECT student.first_name
FROM   student
WHERE  student.stuid not in (select has_pet.stuid
                             from   has_pet
                             where  has_pet.petid in (select pets.petid
                                                      from   pets
                                                      where  pets.pettype = 'dog'));<separator>SELECT pets.pet_type,
       pets.weight
      FROM   pets
      WHERE  pets.pet_age = (SELECT MIN(pets.pet_age)
                            FROM   pets)
      ORDER BY pets.pet_type asc, pets.weight asc;<separator>SELECT pets.pet_type,
       pets.weight
      FROM   pets
      WHERE  pets.pet_age = (SELECT MIN(pets.pet_age)
                            FROM   pets)
      ORDER BY pets.pet_type asc;<separator>SELECT pets.petid,
          pets.weight
     FROM pets
     WHERE pets.pet_age < 1;<separator>SELECT pets.petid,
          pets.weight
     FROM pets
     WHERE pets.pet_age > 1;<separator>SELECT pets.pet_type,
       avg(pets.pet_age) as avg_age,
       max(pets.pet_age) as max_age
FROM   pets
GROUP BY pets.pet_type
ORDER BY avg_age desc, max_age desc;<separator>SELECT pets.pet_type,
       avg(pets.pet_age) as avg_age,
       max(pets.pet_age) as max_age
FROM   pets
GROUP BY pets.pet_type
ORDER BY avg_age desc;<separator>SELECT pets.pet_type,
       avg(pets.weight) as avg_weight
FROM   pets
GROUP BY pets.pet_type
ORDER BY avg_weight desc;<separator>SELECT pets.pet_type,
       avg(pets.weight) as avg_weight
FROM   pets
GROUP BY pets.pet_type
ORDER BY avg_weight desc;<separator>SELECT student.first_name,
              student.age
       FROM   student
       WHERE  student.stuid in (SELECT has_pet.stuid
                               FROM   has_pet);<separator>SELECT DISTINCT student.first_name,
                       student.age
          FROM student
          WHERE student.stuid in (SELECT has_pet.stuid
                                 FROM   has_pet);<separator>SELECT has_pet.petid FROM has_pet JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'Smith';<separator>SELECT has_pet.petid
FROM   has_pet join student on has_pet.stuid = student.stuid
WHERE  student.lname = 'Smith';<separator>SELECT student.stuid,
       count(has_pet.petid) as num_pets
FROM   student left join has_pet on student.stuid = has_pet.stuid
GROUP BY student.stuid
HAVING count(has_pet.petid) > 0;<separator>SELECT student.stuid,
       count(has_pet.petid) as num_pets
FROM   student left join has_pet on student.stuid = has_pet.stuid
GROUP BY student.stuid
HAVING count(has_pet.petid) > 0
ORDER BY;<separator>WITH student_with_multiple_pets AS (
  SELECT student.stuid,
         student.fname,
         student.gender
  FROM   student
  JOIN   has_pet on student.stuid = has_pet.stuid
  GROUP BY student.stuid, student.fname, student.gender
  HAV;<separator>SELECT DISTINCT student.first_name, student.gender
FROM   student
WHERE  student.stuid in (SELECT has_pet.stuid
                         FROM   has_pet
                         GROUP BY has_pet.stuid having count(*) > 1)
ORDER BY student.first_name;<separator>SELECT student.lname
      FROM   student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid
      WHERE  pets.pet_age = 3;<separator>SELECT student.lname
      FROM   student join has_pet on student.stuid = has_pet.stuid join pets on has_pet.petid = pets.petid
      WHERE  pets.pet_age = 3
         and pets.pettype = 'cat'
      ORDER  BY student;<separator>SELECT avg(student.age) AS average_age
FROM   student
WHERE  student.stuid not in (select has_pet.stuid
                             from   has_pet);<separator>SELECT avg(student.age) AS average_age
FROM   student
WHERE  student.stuid not in (select has_pet.stuid
                             from   has_pet);<separator>SELECT COUNT(DISTINCT continents.continent) AS num_continents
  FROM continents;<separator>SELECT COUNT(*) AS num_continents FROM continents;<separator>SELECT continents.cont_id,
       continents.continent_name,
       count(distinct countries.country_id) as country_count
FROM   countries
         join continents on countries.continent = continents.cont_id
GROUP BY continents.cont_id, continents.continent_;<separator>SELECT continents.cont_id,
              continents.continent_name,
              count(distinct countries.country_id) AS country_count
       FROM   continents
       LEFT JOIN countries
           ON continents.cont_id = countries.continent
       GROUP BY continents.cont_id, continents.continent;<separator>SELECT count(*) AS country_count
FROM countries;<separator>SELECT COUNT(*) AS country_count
FROM countries;<separator>SELECT car_makers.maker,
       car_makers.id,
       count(*) AS model_count
FROM   car_makers
LEFT JOIN model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.maker, car_makers.id
ORDER;<separator>SELECT car_makers.maker,
       car_makers.id,
       count(model_list.model) AS model_count
FROM   car_makers
         left join model_list on car_makers.id = model_list.maker
GROUP BY car_makers.maker, car_;<separator>SELECT car_names.model
FROM   car_names
JOIN   cars_data on car_names.makeid = cars_data.id
WHERE  cars_data.horsepower = (SELECT min(cars_data.horsepower)
                               FROM   cars_data)
ORDER BY car_names;<separator>SELECT car_names.model
      FROM   car_names
      JOIN   cars_data
      ON     car_names.makeid = cars_data.id
      ORDER BY cars_data.horsepower::float asc
      LIMIT  1;<separator>WITH avg_weight AS (
  SELECT avg(cars_data.weight) AS avg_weight
  FROM   cars_data
)
SELECT car_names.model
FROM   car_names, cars_data, avg_weight
WHERE  cars_data.weight < avg_weight.avg_weight
ORDER;<separator>WITH avg_weight AS (
  SELECT avg(cars_data.weight) AS avg_weight
  FROM   cars_data
)
SELECT car_names.model
FROM   car_names, cars_data
WHERE  cars_data.weight < (SELECT avg_weight
                            FROM   avg_weight);<separator>SELECT DISTINCT car_makers.maker
FROM   car_makers, car_names, cars_data
WHERE  car_makers.id = car_names.makeid
   AND car_names.makeid = cars_data.id
   AND cars_data.year = 1970;<separator>SELECT DISTINCT car_makers.maker
FROM   car_makers, car_names, cars_data
WHERE  car_makers.id = car_names.makeid
   AND car_names.makeid = cars_data.id
   AND cars_data.year = 1970;<separator>SELECT car_makers.maker,
       cars_data.year
FROM   car_makers join car_names on car_makers.id = car_names.makeid join cars_data on car_names.makeid = cars_data.id
WHERE  cars_data.year = (SELECT;<separator>SELECT car_makers.maker,
       cars_data.year
FROM   car_makers join cars_data on car_makers.id = cars_data.id
WHERE  cars_data.year = (SELECT min(year)
                         FROM   cars_data)
ORDER BY cars_data.;<separator>SELECT DISTINCT car_names.model
FROM   car_names
WHERE  car_names.makeid IN (SELECT model_list.modelid
                             FROM   model_list
                             WHERE  model_list.maker IN (SELECT car_makers.id
                                                         FROM   car_makers
                                                         WHERE  car_mak;<separator>SELECT DISTINCT car_names.model
FROM   car_names
WHERE  car_names.makeid in (SELECT model_list.modelid
                             FROM   model_list
                             WHERE  model_list.maker in (SELECT car_makers.id
                                                         FROM   car_makers
                                                         WHERE  car_mak;<separator>SELECT continents.continent,
       count(car_makers.id) AS car_maker_count
FROM   car_makers join countries on car_makers.country = countries.countryid join continents on countries.continent = continents.contid
GROUP BY continents.continent;<separator>SELECT continents.continent,
       count(car_makers.id) as car_maker_count
FROM   continents
         left join countries on continents.contid = countries.continent
         left join car_makers on countries.countryid = car_makers.country
GROUP BY continents;<separator>SELECT countries.country_name
FROM   countries
         left join car_makers on countries.country_id = car_makers.country_id
GROUP BY countries.country_name
ORDER BY count(*) desc nulls last;<separator>SELECT countries.countryname
FROM   countries
         left join car_makers on countries.countryid = car_makers.country
GROUP BY countries.countryname
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT car_makers.maker,
       car_makers.fullname,
       count(car_names.model) as model_count
FROM   car_makers join car_names on car_makers.id = car_names.makeid
GROUP BY car_makers.maker, car_mak;<separator>SELECT car_makers.maker,
       car_makers.id,
       car_makers.fullname,
       count(car_names.model) as model_count
FROM   car_makers join car_names on car_makers.id = car_names.makeid
GROUP BY car_;<separator>SELECT cars_data.accelerate
FROM   cars_data join car_names on cars_data.id = car_names.makeid join car_makers on car_names.makeid = car_makers.id
WHERE  car_makers.maker = 'amc' and car_mak;<separator>SELECT cars_data.accelerate
FROM   cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.makeid = model_list.modelid join car_makers on model_list.maker = car_makers.id;<separator>SELECT count(*) AS num_car_makers
FROM   car_makers
WHERE  car_makers.country = 'France';<separator>SELECT count(*) AS num_makers
FROM   car_makers
WHERE  car_makers.country = 'France';<separator>SELECT count(*) AS num_models
FROM   car_names cn
JOIN   model_list ml
  ON cn.makeid = ml.modelid
JOIN   car_makers cm
  ON ml.maker = cm.id
JOIN   countries c
  ON cm.country = c.countryid
WHERE;<separator>SELECT COUNT(*) AS model_count
FROM   car_names cn
JOIN   model_list ml
  ON cn.makeid = ml.modelid
JOIN   car_makers cm
  ON ml.maker = cm.id
JOIN   countries c
  ON cm.country = c.countryid
WHERE;<separator>SELECT avg(cars_data.mpg)::float AS average_mpg
       FROM   cars_data
       WHERE  cars_data.cylinders = 4;<separator>SELECT AVG(cars_data.mpg)::numeric FROM cars_data WHERE cars_data.cylinders = 4;<separator>SELECT cars_data.weight
      FROM   cars_data
      WHERE  cars_data.cylinders = 8
         AND cars_data.year = 1974
      ORDER BY cars_data.weight ASC
      LIMIT 1;<separator>SELECT cars_data.weight
      FROM   cars_data
      WHERE  cars_data.cylinders = 8
         AND cars_data.year = 1974
      ORDER BY cars_data.weight ASC
      LIMIT 1;<separator>SELECT DISTINCT car_makers.maker, car_names.model
FROM   car_makers, car_names
WHERE  car_makers.id = car_names.makeid;<separator>SELECT car_makers.maker,
       car_names.model
FROM   car_makers join car_names on car_makers.id = car_names.makeid
ORDER BY car_makers.maker, car_names.model;<separator>SELECT countries.countryname,
       countries.countryid
FROM   countries
WHERE  countries.countryid in (SELECT car_makers.country
                               FROM   car_makers)
ORDER BY countries.countryname;<separator>SELECT countries.countryname,
       countries.countryid
FROM   countries
WHERE  countries.countryid in (SELECT car_makers.country
                                FROM   car_makers)
ORDER BY countries.countryname;<separator>SELECT count(*)
FROM   cars_data
WHERE  cars_data.horsepower::float > 150;<separator>SELECT count(*)
FROM   cars_data
WHERE  cars_data.horsepower::float > 150;<separator>SELECT cars_data.year,
       avg(cars_data.weight) AS average_weight
FROM   cars_data
GROUP BY cars_data.year
ORDER BY cars_data.year;<separator>SELECT cars_data.year,
       avg(cars_data.weight) AS average_weight
FROM   cars_data
GROUP BY cars_data.year
ORDER BY cars_data.year;<separator>WITH country_count AS (
  SELECT countries.countryname,
         countries.countryid,
         count(*) AS count
  FROM   countries
  WHERE  countries.continent = 1
  GROUP BY countries.countryname, countries.countryid
  ORDER BY count desc
)
SELECT country_count.countryname
FROM;<separator>SELECT countries.countryname
FROM   countries
WHERE  countries.continent = 2
   AND EXISTS (SELECT 1
             FROM   car_makers
             WHERE  car_makers.country = countries.countryid
                and car_makers.maker = countries.countryid)
GROUP BY countries.country;<separator>SELECT cars_data.horsepower,
       car_makers.maker
FROM   cars_data join car_names on cars_data.id = car_names.makeid join car_makers on car_names.makeid = car_makers.id
WHERE  cars_data.cyl;<separator>SELECT car_names.model,
       cars_data.horsepower
FROM   car_names join cars_data on car_names.makeid = cars_data.id
WHERE  cars_data.cylinders = 3
ORDER BY cars_data.horsepower desc
LIMIT 1;<separator>SELECT car_names.model
FROM   car_names
JOIN   cars_data
ON     car_names.makeid = cars_data.id
WHERE  cars_data.mpg = (SELECT MAX(cars_data.mpg)
                        FROM   cars_data)
ORDER BY car_names;<separator>SELECT car_names.model
FROM   car_names
JOIN   cars_data on car_names.makeid = cars_data.id
ORDER BY cars_data.mpg desc
LIMIT 1;<separator>SELECT AVG(cars_data.horsepower::float) AS average_horsepower
FROM   cars_data
WHERE  cars_data.year < 1980;<separator>SELECT AVG(cars_data.horsepower::float) AS average_horsepower
FROM   cars_data
WHERE  cars_data.year < 1980;<separator>SELECT AVG(cars_data.edispl) AS average_edispl
FROM   cars_data join car_names on cars_data.id = car_names.makeid
WHERE  car_names.model = 'volvo';<separator>SELECT avg(cars_data.edispl) AS average_edispl
FROM   cars_data
WHERE  cars_data.model = 'volvo';<separator>SELECT cars_data.cylinders,
       max(cars_data.accelerate) AS max_accelerate
FROM   cars_data
GROUP BY cars_data.cylinders
ORDER BY max_accelerate desc;<separator>SELECT cars_data.cylinders,
              max(cars_data.accelerate) AS max_accelerate
       FROM   cars_data
       GROUP BY cars_data.cylinders
       ORDER BY max_accelerate desc;<separator>SELECT car_names.model,
       count(*) AS version_count
FROM   car_names
GROUP BY car_names.model
ORDER BY version_count DESC
LIMIT 1;<separator>SELECT car_names.model,
       count(*) AS num_versions
FROM   car_names
GROUP BY car_names.model
ORDER BY num_versions DESC;<separator>SELECT count(*) AS "Number of Cars with More than 4 Cylinders"
FROM   cars_data
WHERE  cars_data.cylinders > 4;<separator>SELECT count(*)
FROM   cars_data
WHERE  cars_data.cylinders > 4;<separator>SELECT count(*) AS cars_produced_in_1980
FROM   cars_data
WHERE  cars_data.year = 1980;<separator>SELECT count(*) AS cars_made_in_1980
FROM   cars_data
WHERE  cars_data.year = 1980;<separator>SELECT count(*) AS model_count
FROM   car_names
WHERE  car_names.make = (SELECT car_makers.id
                         FROM   car_makers
                         WHERE  car_makers.fullname = 'American Motor Company');<separator>SELECT count(*) AS num_models
FROM   car_names
WHERE  car_names.make = (SELECT car_makers.maker
                         FROM   car_makers
                         WHERE  car_makers.maker = 'American Motor Company');<separator>SELECT car_makers.maker,
       car_makers.id
FROM   car_makers
JOIN   model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.maker, car_makers.id
HAVING count(*) > 3
ORDER;<separator>SELECT car_makers.id,
       car_makers.maker,
       car_makers.fullname
FROM   car_makers
JOIN   model_list ON car_makers.id = model_list.maker
GROUP BY car_makers.id, car_makers.maker, car;<separator>SELECT DISTINCT car_names.model
FROM   car_makers join car_names on car_makers.id = car_names.makeid
WHERE  (car_makers.maker = 'General Motors' or car_makers.maker = 'GM')
   or car_names.model in;<separator>SELECT DISTINCT car_names.model
FROM   car_names
WHERE  (car_names.make = 'General Motors' or car_names.model in (select model_list.model from model_list where model_list.maker in (select car_makers.id from car_makers where;<separator>SELECT DISTINCT cars_data.year
       FROM   cars_data
       WHERE  cars_data.weight >= 3000
          and cars_data.weight <= 4000;<separator>SELECT DISTINCT cars_data.year
FROM   cars_data
WHERE  cars_data.weight < 4000
   OR cars_data.weight > 3000;<separator>SELECT cars_data.horsepower
       FROM   cars_data
       WHERE  cars_data.accelerate = (SELECT max(cars_data.accelerate)
                                     FROM   cars_data)
       ORDER BY cars_data.horsepower desc;<separator>SELECT cars_data.horsepower
       FROM   cars_data
       ORDER BY cars_data.accelerate DESC
       LIMIT 1;<separator>SELECT cars_data.cylinders
FROM   cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.makeid = model_list.modelid
WHERE  model_list.model = 'volvo'
ORDER BY cars_;<separator>SELECT cars_data.cylinders
FROM   cars_data join car_names on cars_data.id = car_names.makeid join model_list on car_names.makeid = model_list.modelid join car_makers on model_list.maker = car_makers.id;<separator>SELECT count(*)
FROM   cars_data
WHERE  cars_data.Accelerate > (SELECT max(cars_data.Accelerate)
                              FROM   cars_data);<separator>SELECT count(*) AS num_cars
FROM   cars_data
WHERE  accelerate > (SELECT max(accelerate)
                     FROM   cars_data);<separator>SELECT countries.countryname,
       count(*) AS num_car_makers
FROM   countries
         left join car_makers on countries.countryid = car_makers.countryid
GROUP BY countries.countryname
HAVING count(*) > 2
ORDER BY num_car_makers desc;<separator>SELECT count(distinct countries.country_name) as country_count
FROM   countries
WHERE  countries.country_id in (
    SELECT car_makers.country
    FROM   car_makers
    GROUP BY car_makers.country
    HAVING count(car_makers.id) >;<separator>SELECT count(*) AS over_six_cylinders_count
FROM   cars_data
WHERE  cars_data.cylinders > 6;<separator>SELECT count(*)
FROM   cars_data
WHERE  cars_data.cylinders > 6;<separator>SELECT car_names.model,
       cars_data.horsepower
FROM   cars_data join car_names on cars_data.id = car_names.makeid
WHERE  cars_data.cylinders = 4
ORDER BY cars_data.horsepower desc nulls last;<separator>SELECT car_names.model
FROM   cars_data join car_names on cars_data.id = car_names.makeid
WHERE  cars_data.cylinders = 4
ORDER BY cars_data.horsepower desc nulls last limit 1;<separator>SELECT car_names.makeid,
       car_makers.maker
FROM   cars_data join car_names on cars_data.id = car_names.makeid join car_makers on car_names.makeid = car_makers.id
WHERE  cars_data.horsepower;<separator>SELECT car_makers.id,
       car_makers.maker
FROM   car_makers
LEFT JOIN cars_data
  ON car_makers.id = cars_data.id
WHERE  cars_data.horsepower is null
   or cars_data.cylinders < 4;<separator>SELECT cars_data.mpg
FROM   cars_data
WHERE  cars_data.cylinders = 8
   or cars_data.year < 1980
ORDER BY cars_data.mpg desc
LIMIT 1;<separator>SELECT cars_data.mpg
FROM   cars_data
WHERE  (cars_data.cylinders = 8 or cars_data.year < 1980)
ORDER BY cars_data.mpg desc
LIMIT 1;<separator>SELECT car_names.model
FROM   car_names
WHERE  car_names.model not like 'Ford%'
   AND car_names.model not like 'Fiat%'
   AND car_names.model not like 'Honda%'
   AND car_names.model not like 'Toyota%'
   AND;<separator>SELECT DISTINCT car_names.model
FROM   car_names
WHERE  car_names.model!= 'Ford'
   AND car_names.model!= 'Mustang'
   AND car_names.model!= 'Ranger'
   AND car_names.model!= 'Taurus'
   AND car_names;<separator>SELECT countries.countryname
FROM   countries
WHERE  countries.countryid not in (SELECT car_makers.country
                                   FROM   car_makers)
ORDER BY countries.countryname;<separator>SELECT countries.countryname
FROM   countries
WHERE  countries.countryid not in (select car_makers.country from car_makers);<separator>SELECT car_makers.id,
       car_makers.maker
FROM   car_makers
WHERE  car_makers.id IN (SELECT maker
                         FROM   model_list
                         GROUP BY maker
                         HAVING count(*) >= 2)
GROUP BY car_makers.id,;<separator>SELECT car_makers.id,
       car_makers.maker
FROM   car_makers
         left join (SELECT car_makers.id,
                          count(*) as model_count
                   FROM   car_makers
                           join car_names
                           on car_makers.id = car_names.make;<separator>SELECT countries.countryid,
       countries.countryname
FROM   countries
WHERE  countries.countryid in (SELECT car_makers.country
                                FROM   car_makers
                                WHERE  car_makers.maker = 'fiat'
                                GROUP BY car_makers.country
                                having count(*) >;<separator>SELECT countries.countryid,
       countries.countryname
FROM   countries
WHERE  (SELECT count(*)
       FROM   car_makers
       WHERE  car_makers.country = countries.countryid) > 3 or (SELECT count(*)
                                                    FROM   car_names
                                                    WHERE  car_names.model =;<separator>SELECT airlines.country
       FROM   airlines
       WHERE  airlines.airline = 'JetBlue Airways';<separator>SELECT airlines.country
       FROM   airlines
       WHERE  airlines.airline = 'Jetblue Airways';<separator>SELECT airlines.abbreviation
       FROM   airlines
       WHERE  airlines.airline = 'JetBlue Airways';<separator>SELECT airlines.abbreviation
       FROM   airlines
       WHERE  airlines.airline = 'Jetblue Airways';<separator>SELECT airlines.airline,
              airlines.abbreviation
       FROM   airlines
       WHERE  airlines.country = 'USA'
       ORDER BY airlines.airline asc;<separator>SELECT airlines.airline,
              airlines.abbreviation
       FROM   airlines
       WHERE  airlines.country = 'USA'
       ORDER BY airlines.airline;<separator>SELECT airports.airportcode,
              airports.airportname
       FROM   airports
       WHERE  airports.city = 'Anthony';<separator>SELECT airports.airportcode,
              airports.airportname
       FROM   airports
       WHERE  airports.city = 'Anthony';<separator>SELECT count(distinct airlines.airline) AS num_airlines
       FROM airlines;<separator>SELECT count(*) AS total_airlines FROM airlines;<separator>SELECT count(*) AS num_airports FROM airports;<separator>SELECT count(*) AS num_airports FROM airports;<separator>SELECT count(*) AS total_flights FROM flights;<separator>SELECT count(*) AS num_flights FROM flights;<separator>SELECT airlines.airline
       FROM   airlines
       WHERE  airlines.abbreviation = 'UAL';<separator>SELECT airlines.airline
       FROM   airlines
       WHERE  airlines.abbreviation = 'UAL';<separator>SELECT count(*) AS num_airlines_usa FROM airlines WHERE country = 'USA';<separator>SELECT count(*) AS num_airlines_in_usa
FROM   airlines
WHERE  airlines.country = 'USA';<separator>SELECT airports.city,
              airports.country
       FROM   airports
       WHERE  airports.airportcode = 'ALTM';<separator>SELECT airports.city,
              airports.country
       FROM   airports
       WHERE  airports.airportcode = 'ALTM';<separator>SELECT airports.airportname
       FROM   airports
       WHERE  airports.airportcode = 'AKO';<separator>SELECT airports.airportname
       FROM   airports
       WHERE  airports.airportcode = 'AKO';<separator>SELECT airports.airportname
       FROM   airports
       WHERE  airports.city = 'Aberdeen';<separator>SELECT airports.airportname
       FROM   airports
       WHERE  airports.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights_from_apg FROM flights WHERE flights.sourceairport = 'APG';<separator>SELECT count(*) AS num_flights
FROM   flights f
JOIN  airports a ON f.sourceairport = a.airportcode
WHERE  a.airportname = 'APG';<separator>SELECT count(*) AS num_flights_dest_ato FROM flights JOIN airports ON flights.DestAirport = airports.AirportCode WHERE airports.AirportCode = 'ATO';<separator>SELECT count(*) AS num_flights_into_ato FROM flights WHERE flights.destairport = 'ATO';<separator>SELECT count(*) AS num_flights
FROM   flights f join airports a on f.sourceairport = a.airportcode
WHERE  a.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights
FROM   flights f join airports a on f.sourceairport = a.airportcode
WHERE  a.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights
FROM   flights f join airports a on f.dest_airport = a.airportcode
WHERE  a.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights
FROM   flights f join airports a on f.dest_airport = a.airportcode
WHERE  a.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights
FROM   flights f1, airports a1, airports a2
WHERE  f1.sourceairport = a1.airportcode
   AND a1.city = 'Aberdeen'
   AND f1.destairport = a2.airportcode
   AND;<separator>SELECT count(*) AS num_flights
FROM   flights f1, airports a1, airports a2
WHERE  f1.sourceairport = a1.airportcode
   AND a1.city = 'Aberdeen'
   AND f1.destairport = a2.airportcode
   AND;<separator>SELECT count(*) AS num_flights
  FROM   flights
  WHERE  flights.airline = (SELECT airlines.uid
                           FROM   airlines
                           WHERE  airlines.airline = 'JetBlue Airways');<separator>SELECT count(*) AS jetblue_flights_count
  FROM   flights f join airlines a on f.airline = a.uid
  WHERE  a.airline = 'Jetblue Airways';<separator>SELECT count(*) AS num_flights
  FROM   flights f join airlines a on f.airline = a.uid
  WHERE  a.airline = 'United Airlines'
     AND f.destairport = 'ASY';<separator>SELECT count(*) AS num_flights
  FROM   flights f join airlines a on f.airline = a.uid
  WHERE  a.airline = 'United Airlines'
     and f.destairport = 'ASY';<separator>SELECT count(*) AS num_flights
  FROM   flights f join airlines a on f.airline = a.uid
  WHERE  a.airline = 'United Airlines'
     AND f.sourceairport = 'AHD';<separator>SELECT count(*) AS num_flights
  FROM   flights f join airlines a on f.airline = a.uid
  WHERE  a.airline = 'United Airlines'
     AND f.sourceairport = 'AHD';<separator>SELECT count(*) AS num_flights
  FROM   flights f join airlines a on f.airline = a.uid join airports ap on f.destairport = ap.airportcode
  WHERE  a.airline = 'United Airlines'
     and ap.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights
  FROM   flights f join airlines a on f.airline = a.uid
  WHERE  a.airline = 'United Airlines'
     and f.destairport = 'ABERDEEN';<separator>SELECT airports.city,
       count(*) as num_flights
FROM   flights join airports on flights.destairport = airports.airportcode
GROUP BY airports.city
ORDER BY num_flights desc
LIMIT 1;<separator>SELECT airports.city,
       count(*) AS frequency
FROM   flights join airports on flights.destairport = airports.airportcode
GROUP BY airports.city
ORDER BY frequency DESC
LIMIT 1;<separator>SELECT airports.city,
       count(*) AS num_flights
FROM   flights join airports on flights.destairport = airports.airportcode
GROUP BY airports.city
ORDER BY num_flights DESC
LIMIT 1;<separator>SELECT airports.city,
              count(*) AS frequency
       FROM   flights
              JOIN airports ON flights.sourceairport = airports.airportcode
       GROUP BY airports.city
       ORDER BY frequency DESC
       LIMIT 1;<separator>SELECT airports.AirportCode
      FROM   airports
      LEFT JOIN (SELECT flights.SourceAirport,
                         count(*) AS flight_count
                  FROM   flights
                  GROUP BY flights.SourceAirport) AS flight_counts
              ON airports.AirportCode = flight_counts.SourceAirport
      ORDER;<separator>SELECT airports.airportcode
      FROM   airports
      LEFT JOIN (SELECT flights.sourceairport,
                         count(*) as flight_count
                  FROM   flights
                  GROUP BY flights.sourceairport) AS flight_counts
              ON airports.airportcode = flight_counts.sourceairport
      ORDER BY flight_counts.;<separator>WITH airport_counts AS (
  SELECT airports.airportcode,
         count(*) AS flight_count
  FROM   flights join airports
          on flights.sourceairport = airports.airportcode
  GROUP BY airports.airportcode
  ORDER BY flight_count asc
)
SELECT airport_;<separator>SELECT airports.airportcode
      FROM   airports
      LEFT JOIN (SELECT flights.sourceairport,
                         count(*) AS flight_count
                  FROM   flights
                  GROUP BY flights.sourceairport) AS flight_counts ON airports.airportcode = flight_counts.sourceairport
      WHERE  flight_counts.flight;<separator>SELECT airlines.airline,
       count(*) AS num_flights
FROM   flights join airlines on flights.airline = airlines.uid
GROUP BY airlines.airline
ORDER BY num_flights DESC
LIMIT 1;<separator>SELECT airlines.airline,
       count(*) AS flight_count
FROM   flights join airlines on flights.airline = airlines.uid
GROUP BY airlines.airline
ORDER BY flight_count DESC
LIMIT 1;<separator>SELECT airlines.abbreviation,
              airlines.country
       FROM   airlines
       LEFT JOIN (SELECT flights.airline,
                          count(*) as flight_count
                   FROM   flights
                   GROUP BY flights.airline) as flight_counts
               ON airlines.uid = flight_counts.airline
       ORDER;<separator>WITH airline_counts AS (
  SELECT airlines.abbreviation,
         airlines.country,
         count(*) AS flight_count
  FROM   airlines join flights on airlines.uid = flights.airline
  GROUP BY airlines.abbreviation, airlines.country
  ORDER BY flight_count asc;<separator>SELECT DISTINCT airlines.airline
       FROM   airlines, flights, airports
       WHERE  airlines.uid = flights.airline
          AND airports.airportcode = flights.sourceairport
          AND airports.airportcode = 'AHD';<separator>SELECT DISTINCT airlines.airline
       FROM   airlines, flights, airports
       WHERE  airlines.uid = flights.airline
          AND airports.airportcode = flights.sourceairport
          AND airports.airportcode = 'AHD';<separator>SELECT DISTINCT airlines.airline
       FROM   airlines join flights on airlines.uid = flights.airline
       WHERE  flights.destairport = 'AHD';<separator>SELECT DISTINCT airlines.airline
       FROM   airlines, flights, airports
       WHERE  airlines.uid = flights.airline
          AND airports.airportcode = flights.destairport
          AND airports.airportcode = 'AHD';<separator>SELECT DISTINCT airlines.airline
FROM   airlines, flights
WHERE  airlines.uid = flights.airline
AND (flights.sourceairport = 'APG'
     or flights.sourceairport = 'CVO')
ORDER BY airlines.airline asc;<separator>SELECT DISTINCT flights.airline
FROM   flights
WHERE  flights.sourceairport in (SELECT airports.airportcode
                                 FROM   airports
                                 WHERE  airports.airportname = 'APG'
                                    or airports.airportname = 'CVO')
ORDER BY flights.airline;<separator>SELECT DISTINCT airlines.airline
       FROM   airlines, flights
       WHERE  airlines.uid = flights.airline
          AND flights.sourceairport = 'CVO'
          AND flights.destairport!= 'APG';<separator>SELECT DISTINCT airlines.airline
FROM   airlines, flights, airports
WHERE  airlines.uid = flights.airline
   AND flights.sourceairport = 'CVO'
   AND flights.destairport!= 'APG'
   AND airports.airportcode = flights.dest;<separator>SELECT DISTINCT airlines.airline
FROM   airlines, flights
WHERE  airlines.uid = flights.airline
GROUP BY airlines.airline
HAVING count(*) >= 10;<separator>SELECT airlines.airline
FROM   airlines join flights on airlines.uid = flights.airline
GROUP BY airlines.airline
HAVING count(*) >= 10;<separator>SELECT airlines.airline
FROM   airlines
LEFT JOIN (SELECT flights.airline,
                    count(*) as flight_count
             FROM   flights
             GROUP BY flights.airline) as flight_counts ON airlines.uid = flight_counts.airline
WHERE  flight_counts.flight;<separator>SELECT airlines.airline
FROM   airlines join flights on airlines.uid = flights.airline
GROUP BY airlines.airline
HAVING count(*) < 200;<separator>SELECT flights.flightno
       FROM   flights join airlines
               ON flights.airline = airlines.uid
       WHERE  airlines.airline = 'United Airlines';<separator>SELECT flights.flightno
       FROM   flights join airlines
               ON flights.airline = airlines.uid
       WHERE  airlines.airline = 'United Airlines';<separator>SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG';<separator>SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportname = 'APG';<separator>SELECT flights.flightno
       FROM   flights join airports
               ON flights.destairport = airports.airportcode
       WHERE  airports.airportname = 'APG';<separator>SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'APG';<separator>SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';<separator>SELECT flights.flightno FROM flights JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.city = 'Aberdeen';<separator>SELECT flights.flightno
       FROM   flights join airports
               ON flights.destairport = airports.airportcode
       WHERE  airports.city = 'Aberdeen';<separator>SELECT flights.flightno FROM flights JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'Aberdeen';<separator>SELECT count(*) AS num_flights
FROM   flights f join airports a on f.dest_airport = a.airportcode
WHERE  a.city in ('Aberdeen', 'Abilene');<separator>SELECT count(*) AS num_flights
FROM   flights f join airports a1 on f.sourceairport = a1.airportcode join airports a2 on f.destairport = a2.airportcode
WHERE  (a1.city = 'Aberdeen' or a1.city =;<separator>SELECT airports.AirportName
       FROM   airports
       LEFT JOIN flights
           ON airports.AirportCode = flights.SourceAirport
       WHERE  flights.SourceAirport is null and flights.DestAirport is null;<separator>SELECT DISTINCT airports.AirportCode
FROM   airports
WHERE  airports.AirportCode NOT IN (SELECT flights.SourceAirport
                                    FROM   flights
                                    UNION
                                    SELECT flights.DestAirport
                                    FROM   flights);<separator>SELECT count(*) as num_employees
FROM   employee;<separator>SELECT count(*) AS num_employees
       FROM   employee;<separator>SELECT employee.name,
              employee.age
       FROM   employee
       ORDER BY employee.age asc;<separator>SELECT employee.name,
          employee.age
       FROM   employee
       ORDER BY employee.age asc;<separator>SELECT employee.city,
       count(*) as number_of_employees
FROM   employee
GROUP BY employee.city
ORDER BY number_of_employees desc;<separator>SELECT employee.city,
       count(*) as count
FROM   employee
GROUP BY employee.city
ORDER BY count desc;<separator>SELECT city
FROM   (SELECT city,
               count(*) as count
        FROM   employee
        WHERE  age < 30
        GROUP BY city) as subquery
WHERE  count > 1;<separator>SELECT DISTINCT employee.city
FROM   employee
WHERE  employee.age < 30
GROUP BY employee.city
HAVING count(*) > 1;<separator>SELECT shop.location,
       count(*) AS number_of_shops
FROM   shop
GROUP BY shop.location
ORDER BY number_of_shops DESC;<separator>SELECT shop.location,
       count(*) AS num_shops
FROM   shop
GROUP BY shop.location
ORDER BY num_shops DESC;<separator>SELECT shop.manager_name,
              shop.district
       FROM   shop
       WHERE  shop.number_products = (SELECT MAX(number_products)
                                    FROM   shop);<separator>SELECT shop.manager_name,
              shop.district
       FROM   shop
       WHERE  shop.number_products = (SELECT MAX(number_products)
                                    FROM   shop);<separator>SELECT min(shop.number_products) AS min_products,
       max(shop.number_products) AS max_products
FROM   shop;<separator>SELECT min(shop.number_products) AS min_products,
       max(shop.number_products) AS max_products
  FROM   shop;<separator>SELECT shop.name,
              shop.location,
              shop.district
         FROM shop
         ORDER BY shop.number_products DESC;<separator>SELECT shop.name,
              shop.location,
              shop.district
         FROM shop
         ORDER BY shop.number_products desc;<separator>WITH avg_num_products AS (
  SELECT avg(shop.number_products) AS avg_num_products
  FROM   shop
)
SELECT shop.name
FROM   shop
WHERE  shop.number_products > (SELECT avg_num_products
                               FROM   avg_num_products);<separator>WITH avg_num_products AS (
  SELECT avg(shop.number_products) AS avg_num_products
  FROM   shop
)
SELECT shop.name
FROM   shop
WHERE  shop.number_products > (SELECT avg_num_products
                               FROM   avg_num_products)
ORDER BY;<separator>SELECT employee.name
FROM   employee join evaluation on employee.employee_id = evaluation.employee_id
GROUP BY employee.name
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT employee.name
FROM   employee join evaluation on employee.employee_id = evaluation.employee_id
GROUP BY employee.name
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT employee.name
FROM   employee join evaluation on employee.employee_id = evaluation.employee_id
WHERE  evaluation.year_awarded = '2018'
ORDER BY evaluation.bonus desc
LIMIT 1;<separator>SELECT employee.name
FROM   employee join evaluation on employee.employee_id = evaluation.employee_id
WHERE  evaluation.bonus = (SELECT max(evaluation.bonus)
                           FROM   evaluation)
ORDER BY employee.name asc;<separator>SELECT DISTINCT employee.name
FROM   employee
WHERE  employee.employee_id not in (SELECT evaluation.employee_id
                                    FROM   evaluation);<separator>SELECT DISTINCT employee.name
FROM   employee
WHERE  employee.employee_id not in (SELECT evaluation.employee_id
                                    FROM   evaluation);<separator>WITH max_employees AS (
  SELECT hiring.shop_id,
         shop.name,
         count(*) as num_employees
  FROM   hiring join shop
          on hiring.shop_id = shop.shop_id
  GROUP BY hiring.shop_id, shop.name
  ORDER BY num_employees;<separator>WITH max_employees AS (
  SELECT shop.name,
         count(*) as num_employees
  FROM   shop
  JOIN   hiring on shop.shop_id = hiring.shop_id
  GROUP BY shop.name
  ORDER BY num_employees desc
  limit 1
)
SELECT max_employees.name;<separator>SELECT shop.name
FROM   shop
WHERE  shop.shop_id not in (SELECT hiring.shop_id
                            FROM   hiring)
ORDER BY shop.name asc;<separator>SELECT shop.name
FROM   shop
WHERE  shop.shop_id not in (SELECT hiring.shop_id
                             FROM   hiring)
ORDER BY shop.name asc;<separator>SELECT hiring.shop_id,
       shop.name,
       count(hiring.employee_id) as number_of_employees
FROM   hiring join shop on hiring.shop_id = shop.shop_id
GROUP BY hiring.shop_id, shop.name
ORDER BY number_;<separator>SELECT shop.shop_id,
       shop.name,
       count(employee.employee_id) as number_of_employees
FROM   shop
         left join hiring on shop.shop_id = hiring.shop_id
         left join employee on hiring.employee_id = employee.employee_id;<separator>SELECT sum(evaluation.bonus) AS total_bonus_given
FROM   evaluation;<separator>SELECT sum(evaluation.bonus) AS total_bonus_amount
FROM   evaluation;<separator>SELECT hiring.employee_id,
       employee.name,
       employee.age,
       employee.city,
       hiring.start_from,
       hiring.is_full_time
FROM   hiring join employee on hiring.employee_id = employee.employee_id
ORDER BY hiring.employee;<separator>SELECT hiring.employee_id,
       employee.name,
       employee.age,
       employee.city,
       hiring.start_from,
       hiring.is_full_time
FROM   hiring join employee on hiring.employee_id = employee.employee_id
ORDER BY hiring.employee;<separator>WITH less_than_3000 AS (SELECT shop.district
                        FROM   shop
                        WHERE  shop.number_products < 3000), more_than_10000 AS (SELECT shop.district
                                                         FROM   shop
                                                         WHERE  shop.number_products > 1000;<separator>SELECT DISTINCT shop.district
FROM   shop
WHERE  shop.number_products < 3000
   OR shop.number_products > 10000;<separator>SELECT COUNT(DISTINCT shop.location) AS num_locations
FROM   shop;<separator>SELECT count(distinct shop.location) AS num_distinct_locations
       FROM   shop;<separator>SELECT count(*) AS num_documents
FROM   documents;<separator>SELECT count(*) AS document_count
       FROM   documents;<separator>SELECT documents.document_id,
              documents.document_name,
              documents.document_description
       FROM   documents;<separator>SELECT documents.document_id,
              documents.document_name,
              documents.document_description
       FROM   documents;<separator>SELECT documents.document_name,
              documents.template_id
       FROM   documents
       WHERE  documents.document_description like '%w%'
       ORDER BY documents.document_name;<separator>SELECT documents.document_name,
              documents.template_id
       FROM   documents
       WHERE  documents.document_description like '%w%'
       ORDER  BY documents.document_name;<separator>SELECT documents.document_id,
              documents.template_id,
              documents.document_description
       FROM   documents
       WHERE  documents.document_name = 'Robbin CV';<separator>SELECT documents.document_id,
              documents.template_id,
              documents.document_description
       FROM   documents
       WHERE  documents.document_name = 'Robbin CV';<separator>SELECT count(distinct documents.template_id) AS num_templates
FROM   documents;<separator>SELECT count(distinct documents.template_id) AS num_templates
FROM   documents;<separator>SELECT count(*) AS num_documents
FROM   documents d
WHERE  d.template_id in (select t.template_id
                         from   templates t
                         where  t.template_type_code = 'PPT');<separator>SELECT count(*) AS count_of_documents
FROM   documents d
WHERE  d.template_id in (select t.template_id
                         from   templates t
                         where  t.template_type_code = 'PPT');<separator>SELECT templates.template_id,
       count(documents.document_id) AS number_of_documents
FROM   templates
         left join documents on templates.template_id = documents.template_id
GROUP BY templates.template_id
ORDER BY number_of_documents desc;<separator>SELECT templates.template_id,
       ref_template_types.template_type_description,
       count(*) as usage_count
FROM   templates join documents on templates.template_id = documents.template_id
       join ref_template_types on templates.template_type_code = ref_template_types.;<separator>SELECT templates.template_id,
       ref_template_types.template_type_code
FROM   templates join documents on templates.template_id = documents.template_id
       join ref_template_types on templates.template_type_code = ref_template_types.template_type_code
GROUP BY;<separator>SELECT templates.template_id,
       ref_template_types.template_type_code
FROM   templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code
GROUP BY templates.template_id, ref_template_types.template_type;<separator>WITH template_usage_count AS (
  SELECT templates.template_id,
     count(*) AS usage_count
  FROM templates
  JOIN documents ON templates.template_id = documents.template_id
  GROUP BY templates.template_id
  HAVING count(*) > 1
)
SELECT template_usage_count;<separator>WITH template_counts AS (
  SELECT templates.template_id, count(*) AS count
  FROM templates
  JOIN documents on templates.template_id = documents.template_id
  GROUP BY templates.template_id
  HAVING count(*) > 1
)
SELECT template_counts.template_id
FROM template;<separator>SELECT DISTINCT templates.template_id
FROM   templates
WHERE  templates.template_id not in (SELECT documents.template_id
                                     FROM   documents);<separator>SELECT DISTINCT templates.template_id
FROM   templates
WHERE  templates.template_id not in (SELECT documents.template_id
                                     FROM   documents);<separator>SELECT count(*) AS num_templates
FROM   templates;<separator>SELECT count(*) AS num_templates
FROM   templates;<separator>SELECT templates.template_id,
              templates.version_number,
              ref_template_types.template_type_code
       FROM templates
       JOIN ref_template_types
           ON templates.template_type_code = ref_template_types.template_type_code;<separator>SELECT templates.template_id,
              templates.version_number,
              ref_template_types.template_type_code
       FROM templates
       JOIN ref_template_types
           ON templates.template_type_code = ref_template_types.template_type_code;<separator>SELECT DISTINCT ref_template_types.template_type_code
      FROM   ref_template_types
      UNION ALL
      SELECT DISTINCT templates.template_type_code
      FROM   templates
      ORDER BY template_type_code;<separator>SELECT DISTINCT ref_template_types.template_type_code
      FROM   ref_template_types
      ORDER BY ref_template_types.template_type_code;<separator>SELECT templates.template_id
       FROM   templates
       WHERE  templates.template_type_code in ('PP', 'PPT');<separator>SELECT templates.template_id
       FROM   templates
       WHERE  templates.template_type_code in ('PP', 'PPT');<separator>SELECT count(*) AS "Number of Templates with Type CV"
FROM   templates
WHERE  templates.template_type_code = 'CV';<separator>SELECT count(*) AS cv_templates_count
  FROM   templates
  WHERE  templates.template_type_code = 'CV';<separator>SELECT templates.version_number,
       ref_template_types.template_type_code
FROM   templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code
WHERE  templates.version_number > 5;<separator>SELECT templates.version_number,
       ref_template_types.template_type_code
FROM   templates join ref_template_types on templates.template_type_code = ref_template_types.template_type_code
WHERE  templates.version_number > 5;<separator>SELECT ref_template_types.template_type_code,
              count(templates.template_id) AS number_of_templates
       FROM   ref_template_types
              LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code
       GROUP BY ref_template_types;<separator>SELECT rt.template_type_code,
       count(*) AS number_of_templates
FROM   ref_template_types rt
         left join templates t on rt.template_type_code = t.template_type_code
GROUP BY rt.template_type_code
ORDER BY number_of_templates desc;<separator>SELECT ref_template_types.template_type_code,
       count(*) AS num_templates
FROM   ref_template_types
LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code
GROUP BY ref_template_types.template_type_code;<separator>WITH template_type_counts AS (
  SELECT rt.template_type_code, count(*) AS count
  FROM templates t
  JOIN ref_template_types rt ON t.template_type_code = rt.template_type_code
  GROUP BY rt.template_type_code
)
SELECT tt.template;<separator>SELECT rt.template_type_code
FROM   ref_template_types rt
LEFT JOIN (SELECT template_type_code,
                   count(*) as count
            FROM   templates
            GROUP BY template_type_code) t ON rt.template_type_code = t.template_type_code
WHERE  t;<separator>SELECT rt.template_type_code
FROM   ref_template_types rt
WHERE  rt.template_type_code not in (select tt.template_type_code
                                    from   templates tt
                                    group by tt.template_type_code
                                    having count(*) < 3);<separator>SELECT min(templates.version_number) AS smallest_version_number,
       ref_template_types.template_type_code AS template_type_code
       FROM templates
       JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
       GROUP BY ref;<separator>SELECT min(templates.version_number) AS lowest_version_number,
       ref_template_types.template_type_code AS template_type_code
       FROM templates
       JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
       GROUP BY ref;<separator>SELECT templates.template_type_code
FROM   documents join templates on documents.template_id = templates.template_id
WHERE  documents.document_name = 'Data base';<separator>SELECT templates.template_type_code
FROM   documents join templates on documents.template_id = templates.template_id
WHERE  documents.document_name = 'Data base';<separator>SELECT documents.document_name
       FROM   documents
       WHERE  documents.template_id in (select templates.template_id
                                        from   templates
                                        where  templates.template_type_code = 'BK');<separator>SELECT documents.document_name
       FROM   documents
       WHERE  documents.template_id in (select templates.template_id
                                        from   templates
                                        where  templates.template_type_code = 'BK');<separator>SELECT ref_template_types.template_type_code,
              ref_template_types.template_type_description,
              count(documents.document_id) AS document_count
       FROM   ref_template_types
       LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_;<separator>SELECT rt.template_type_code,
       count(d.document_id) AS document_count
FROM   ref_template_types rt
         left join templates t on rt.template_type_code = t.template_type_code
         left join documents d on t.template_id = d.template;<separator>SELECT ref_template_types.template_type_code,
       count(documents.document_id) AS document_count
FROM   ref_template_types join templates on ref_template_types.template_type_code = templates.template_type_code join documents on templates.template_id = documents.;<separator>SELECT ref_template_types.template_type_code
FROM   ref_template_types
JOIN   (SELECT templates.template_type_code,
                count(*) AS count
         FROM   templates
         JOIN   documents on templates.template_id = documents.template_id
         GROUP BY templates.template_type_;<separator>SELECT DISTINCT rt.template_type_code
FROM   ref_template_types rt
WHERE  rt.template_type_code not in (SELECT dt.template_type_code
                                    FROM   documents dt);<separator>SELECT rt.template_type_code
FROM   ref_template_types rt
WHERE  rt.template_type_code not in (select distinct t.template_type_code
                                     from   templates t
                                     where  t.template_id in (select d.template_id
                                                              from   documents d));<separator>SELECT ref_template_types.template_type_code,
              ref_template_types.template_type_description
       FROM   ref_template_types
       ORDER BY ref_template_types.template_type_code asc;<separator>SELECT rt.template_type_code,
       rt.template_type_description
      FROM ref_template_types rt
      ORDER BY rt.template_type_code asc;<separator>SELECT ref_template_types.template_type_description
       FROM   ref_template_types
       WHERE  ref_template_types.template_type_code = 'AD';<separator>SELECT ref_template_types.template_type_description
       FROM   ref_template_types
       WHERE  ref_template_types.template_type_code = 'AD';<separator>SELECT ref_template_types.template_type_code
FROM ref_template_types
WHERE ref_template_types.template_type_description = 'Book';<separator>SELECT ref_template_types.template_type_code
      FROM   ref_template_types
      WHERE  ref_template_types.template_type_description = 'Book';<separator>SELECT DISTINCT rt.template_type_description
FROM   ref_template_types rt
WHERE  rt.template_type_code in (SELECT distinct t.template_type_code
                                 FROM   templates t
                                 WHERE  t.template_id in (SELECT distinct d.template_id
                                                         FROM   documents d));<separator>SELECT DISTINCT templates.template_details
FROM   templates
JOIN   documents on templates.template_id = documents.template_id
ORDER BY templates.template_details;<separator>SELECT templates.template_id
       FROM templates
       JOIN ref_template_types
           ON templates.template_type_code = ref_template_types.template_type_code
       WHERE ref_template_types.template_type_description = 'Presentation';<separator>SELECT templates.template_id
       FROM   templates
       WHERE  templates.template_details = 'Presentation';<separator>SELECT count(*) AS total_paragraphs
FROM   paragraphs;<separator>SELECT count(*) AS num_paragraphs
FROM   paragraphs;<separator>SELECT count(*) AS num_paragraphs
FROM   paragraphs
WHERE  paragraphs.document_id = (SELECT documents.document_id
                                 FROM   documents
                                 WHERE  documents.document_name = 'Summer Show');<separator>SELECT count(*) AS num_paragraphs
FROM   paragraphs
WHERE  paragraphs.document_id = (SELECT documents.document_id
                                 FROM   documents
                                 WHERE  documents.document_name = 'Summer Show');<separator>SELECT paragraphs.paragraph_text,
              paragraphs.other_details
       FROM   paragraphs
       WHERE  paragraphs.paragraph_text = 'Korea '
       ORDER BY paragraphs.paragraph_id asc;<separator>SELECT paragraphs.paragraph_text,
       documents.document_description,
       templates.template_details
FROM   paragraphs join documents on paragraphs.document_id = documents.document_id join templates on documents.template_id = templates.template_id
WHERE  paragraphs.paragraph_text ilike '%Korea%';<separator>SELECT paragraphs.paragraph_id,
              paragraphs.paragraph_text
       FROM   documents join templates on documents.template_id = templates.template_id join paragraphs on documents.document_id = paragraphs.document_id
       WHERE  documents.document_name = 'Welcome to NY';<separator>SELECT paragraphs.paragraph_id,
              paragraphs.paragraph_text
       FROM   documents join paragraphs
               on documents.document_id = paragraphs.document_id
       WHERE  documents.document_name = 'Welcome to NY';<separator>SELECT paragraphs.paragraph_text
       FROM   documents
             join templates on documents.template_id = templates.template_id
             join ref_template_types on templates.template_type_code = ref_template_types.template_type_code
             join paragraphs on documents.document_id = paragraphs.document_id;<separator>SELECT paragraphs.paragraph_text
FROM   documents join templates on documents.template_id = templates.template_id join ref_template_types on templates.template_type_code = ref_template_types.template_type_code join paragraphs on documents.document_id = paragraphs.document_id
WHERE;<separator>SELECT documents.document_id,
       count(paragraphs.paragraph_id) AS num_paragraphs
FROM   documents
         left join paragraphs on documents.document_id = paragraphs.document_id
GROUP BY documents.document_id
ORDER BY documents.document_id asc;<separator>SELECT documents.document_id,
       count(paragraphs.paragraph_id) AS num_paragraphs
FROM   documents
         left join paragraphs on documents.document_id = paragraphs.document_id
GROUP BY documents.document_id
ORDER BY documents.document_id asc;<separator>SELECT documents.document_id,
              documents.document_name,
              count(paragraphs.paragraph_id) AS num_paragraphs
       FROM   documents
             left join paragraphs on documents.document_id = paragraphs.document_id
       GROUP BY documents.document_id, documents.document_name
       ORDER BY documents.;<separator>SELECT documents.document_id,
       documents.document_name,
       count(paragraphs.paragraph_id) AS num_paragraphs
  FROM documents
  LEFT JOIN paragraphs ON documents.document_id = paragraphs.document_id
  GROUP BY documents.document_id, documents.document_name
  ORDER BY num_;<separator>SELECT DISTINCT documents.document_id
FROM   documents
JOIN   templates on documents.template_id = templates.template_id
JOIN   ref_template_types on templates.template_type_code = ref_template_types.template_type_code
JOIN   paragraphs on documents.document_id = paragraphs;<separator>SELECT documents.document_id
FROM   documents
JOIN   paragraphs on documents.document_id = paragraphs.document_id
GROUP BY documents.document_id
HAVING count(*) >= 2;<separator>SELECT documents.document_id,
       documents.document_name
FROM   documents
JOIN   (SELECT document_id,
                count(*) as num_paragraphs
         FROM   paragraphs
         GROUP BY document_id) as paragraph_counts on documents.document_id = paragraph_counts.document_id
ORDER BY paragraph;<separator>SELECT documents.document_id,
       documents.document_name
FROM   documents
JOIN   (SELECT document_id,
                count(*) as num_paragraphs
         FROM   paragraphs
         GROUP BY document_id
         ORDER BY num_paragraphs desc
         limit 1) as most_paragraphs_doc on documents.;<separator>SELECT documents.document_id
FROM   documents
LEFT JOIN (SELECT document_id,
                   count(*) as num_paragraphs
            FROM   paragraphs
            GROUP BY document_id) as paragraph_counts ON documents.document_id = paragraph_counts.document_id
ORDER BY paragraph_counts.num_paragraphs;<separator>SELECT documents.document_id
FROM   documents
LEFT JOIN (SELECT document_id,
                   count(*) as num_paragraphs
            FROM   paragraphs
            GROUP BY document_id) as paragraph_counts on documents.document_id = paragraph_counts.document_id
ORDER BY paragraph_counts.num_paragraphs;<separator>SELECT documents.document_id
FROM   documents
JOIN   templates on documents.template_id = templates.template_id
JOIN   ref_template_types on templates.template_type_code = ref_template_types.template_type_code
JOIN   paragraphs on documents.document_id = paragraphs.;<separator>SELECT DISTINCT documents.document_id
FROM   documents,
       paragraphs
WHERE  documents.document_id = paragraphs.document_id
GROUP BY documents.document_id,
         count(paragraphs.paragraph_id)
HAVING count(paragraphs.paragraph_id) between 1 and 2;<separator>SELECT DISTINCT documents.document_id
FROM   documents, paragraphs
WHERE  documents.document_id = paragraphs.document_id
   AND paragraphs.paragraph_text = 'Brazil'
   AND paragraphs.paragraph_text = 'Ireland';<separator>SELECT DISTINCT documents.document_id
FROM   documents, paragraphs
WHERE  documents.document_id = paragraphs.document_id
   AND paragraphs.paragraph_text like '%Brazil%'
   AND paragraphs.paragraph_text like '%Ireland%';<separator>SELECT count(*) AS num_teachers FROM teacher;<separator>SELECT count(*) AS total_count_of_teachers
       FROM   teacher;<separator>SELECT teacher.name
       FROM   teacher
       ORDER BY teacher.age asc;<separator>SELECT teacher.name
       FROM   teacher
       ORDER BY teacher.age asc;<separator>SELECT teacher.age,
              teacher.hometown
       FROM   teacher;<separator>SELECT teacher.age,
              teacher.hometown
       FROM   teacher;<separator>SELECT teacher.name
       FROM   teacher
       WHERE  teacher.hometown!= 'Little Lever Urban District';<separator>SELECT teacher.name
       FROM   teacher
       WHERE  teacher.hometown!= 'Little Lever Urban District';<separator>SELECT teacher.name
       FROM   teacher
       WHERE  teacher.age in ('32', '33');<separator>SELECT teacher.name
       FROM   teacher
       WHERE  teacher.age in ('32', '33');<separator>SELECT teacher.hometown
      FROM   teacher
      WHERE  teacher.age = (SELECT min(age)
                           FROM   teacher)
      ORDER BY teacher.age asc;<separator>SELECT teacher.name,
       teacher.age,
       teacher.hometown
FROM   teacher
WHERE  teacher.age = (SELECT min(age)
                     FROM   teacher)
ORDER BY teacher.age asc;<separator>SELECT teacher.hometown,
       count(*) AS number_of_teachers
FROM   teacher
GROUP BY teacher.hometown
ORDER BY number_of_teachers DESC;<separator>SELECT teacher.hometown,
       count(*) AS num_teachers
FROM   teacher
GROUP BY teacher.hometown
ORDER BY num_teachers DESC;<separator>SELECT teacher.hometown,
              count(*) AS frequency
       FROM   teacher
       GROUP BY teacher.hometown
       ORDER BY frequency DESC
       LIMIT 1;<separator>SELECT teacher.hometown,
       count(*) AS frequency
FROM   teacher
GROUP BY teacher.hometown
ORDER BY frequency DESC
LIMIT 1;<separator>WITH teacher_hometowns AS (
  SELECT teacher.hometown,
         count(*) AS num_teachers
  FROM   teacher
  GROUP  BY teacher.hometown
  HAVING count(*) >= 2
)
SELECT teacher_hometowns.hometown
FROM   teacher_hometowns;<separator>WITH teacher_count AS (
  SELECT teacher.hometown,
         count(*) AS count
  FROM   teacher
  GROUP  BY teacher.hometown
  HAVING count(*) >= 2
)
SELECT teacher_count.hometown
FROM   teacher_count;<separator>SELECT teacher.name,
              course.course
       FROM   teacher join course_arrange
               on teacher.teacher_id = course_arrange.teacher_id join course
               on course_arrange.course_id = course.course_id
       ORDER BY teacher.name;<separator>SELECT teacher.name,
              course.course
       FROM   teacher join course_arrange
               on teacher.teacher_id = course_arrange.teacher_id join course
               on course_arrange.course_id = course.course_id
       ORDER BY teacher.name;<separator>SELECT teacher.name,
          course.course
       FROM   teacher join course_arrange
               on teacher.teacher_id = course_arrange.teacher_id join course
               on course_arrange.course_id = course.course_id
       ORDER BY teacher.name asc;<separator>SELECT teacher.name,
       course.course
FROM   teacher join course_arrange on teacher.teacher_id = course_arrange.teacher_id join course on course_arrange.course_id = course.course_id
ORDER BY teacher.name asc;<separator>SELECT teacher.name
       FROM   course_arrange join course on course_arrange.course_id = course.course_id join teacher on course_arrange.teacher_id = teacher.teacher_id
       WHERE  course.course ='math';<separator>SELECT teacher.name
       FROM   teacher join course_arrange
               ON teacher.teacher_id = course_arrange.teacher_id join course
               ON course_arrange.course_id = course.course_id
       WHERE  course.course = 'Math';<separator>SELECT teacher.name,
       count(course_arrange.course_id) AS number_of_courses
       FROM teacher
       LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
       GROUP BY teacher.name
       ORDER BY number_of_courses DESC;<separator>SELECT teacher.name,
       count(course_arrange.course_id) AS number_of_courses
       FROM teacher
       LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id
       GROUP BY teacher.name
       ORDER BY number_of_courses DESC;<separator>WITH teacher_courses AS (
  SELECT course_arrange.teacher_id,
         count(*) as course_count
  FROM   course_arrange
  GROUP  BY course_arrange.teacher_id
  HAVING count(*) >= 2
)
SELECT teacher.name
FROM   teacher, teacher_courses
WHERE;<separator>WITH teacher_courses AS (
  SELECT course_arrange.teacher_id,
         count(*) as course_count
  FROM   course_arrange
  GROUP  BY course_arrange.teacher_id
  HAVING count(*) >= 2
)
SELECT teacher.name
FROM   teacher_courses join teacher on teacher_;<separator>SELECT teacher.name
       FROM   teacher
       WHERE  teacher.teacher_id not in (SELECT course_arrange.teacher_id
                                        FROM   course_arrange);<separator>SELECT teacher.name
       FROM   teacher
       LEFT JOIN course_arrange
       ON     teacher.teacher_id = course_arrange.teacher_id
       WHERE  course_arrange.course_id IS NULL;<separator>SELECT COUNT(*) AS visitors_below_30
FROM   visitor
WHERE  visitor.age < 30;<separator>SELECT visitor.name,
          visitor.level_of_membership
       FROM   visitor
       WHERE  visitor.level_of_membership > 4
       ORDER BY visitor.level_of_membership DESC;<separator>SELECT AVG(visitor.age) AS average_age
FROM   visitor
WHERE  visitor.level_of_membership <= 4;<separator>SELECT visitor.name,
          visitor.level_of_membership
       FROM   visitor
       WHERE  visitor.level_of_membership > 4
       ORDER BY visitor.age ASC;<separator>SELECT museum.Museum_ID,
              museum.Name
       FROM   museum
       ORDER BY museum.Num_of_Staff DESC
       LIMIT  1;<separator>SELECT AVG(museum.num_of_staff) AS average_num_of_staff
FROM   museum
WHERE  museum.open_year < '2009';<separator>SELECT museum.open_year,
       museum.num_of_staff
      FROM museum
      WHERE museum.name = 'Plaza Museum';<separator>WITH min_staff AS (
  SELECT min(Num_of_Staff) AS min_staff
  FROM   museum
  WHERE  Open_Year > '2010'
)
SELECT museum.Name
FROM   museum
WHERE  museum.Num_of_Staff >;<separator>SELECT visitor.id,
       visitor.name,
       visitor.age
FROM   visitor join visit on visitor.id = visit.visitor_id
GROUP BY visitor.id, visitor.name, visitor.age
HAVING count(visit.museum_id) > 1;<separator>SELECT visitor.id,
       visitor.name,
       visitor.level_of_membership
FROM   visitor join (SELECT visit.visitor_id,
                            sum(visit.total_spent) as total_spent
                     FROM   visit
                     GROUP BY visit.visitor_id) as total_spent_per_visitor on visitor;<separator>SELECT museum.Museum_ID,
       museum.Name
FROM   museum
JOIN   (SELECT museum_id,
                count(*) as count
         FROM   visit
         GROUP BY museum_id
         ORDER BY count(*) DESC
         LIMIT 1) as most_visited_;<separator>SELECT museum.name
FROM   museum
WHERE  museum.museum_id not in (select visit.museum_id
                                 from   visit);<separator>SELECT visitor.name,
       visitor.age
FROM   visitor join (select visitor_id,
                            count(*) as ticket_count
                     from   visit
                     group by visitor_id
                     order by ticket_count desc limit 1) as most_tickets_purchased on visitor.id = most_tickets_purchased.;<separator>SELECT AVG(visit.num_of_ticket) AS average_tickets,
       MAX(visit.num_of_ticket) AS max_tickets
FROM   visit;<separator>SELECT sum(visit.total_spent) AS total_ticket_expense
       FROM   visit join visitor
               ON visit.visitor_id = visitor.id
       WHERE  visitor.level_of_membership = 1;<separator>SELECT visitor.name
FROM   visitor join visit on visitor.id = visit.visitor_id
WHERE  museum.open_year < '2009'
   and museum.open_year > '2011'
GROUP BY visitor.name
HAVING count(*) = 2;<separator>SELECT COUNT(*) AS visitors_who_did_not_visit_any_museum_opened_after_2010
FROM   visitor v
WHERE  v.id NOT IN (SELECT v.id
                     FROM   visit v
                     JOIN museum m on v.museum_id =;<separator>SELECT count(*)
FROM   museum
WHERE  museum.open_year::int > 2013
   or museum.open_year::int < 2008;<separator>SELECT COUNT(*) AS total_players
FROM players;<separator>SELECT count(*) AS num_players
FROM   players;<separator>SELECT count(*) AS total_matches
FROM   matches;<separator>SELECT count(*) AS num_of_matches
FROM   matches;<separator>SELECT players.first_name,
              players.birth_date
       FROM   players
       WHERE  players.country_code = 'USA'
       ORDER  BY players.first_name;<separator>SELECT players.first_name,
       players.birth_date
FROM   players
WHERE  players.country_code = 'USA'
ORDER BY players.first_name;<separator>SELECT AVG(matches.loser_age) AS avg_loser_age,
       AVG(matches.winner_age) AS avg_winner_age
FROM   matches;<separator>SELECT AVG(matches.loser_age) AS avg_loser_age,
       AVG(matches.winner_age) AS avg_winner_age
FROM   matches;<separator>SELECT AVG(rankings.ranking) AS average_rank
FROM   rankings
WHERE  rankings.player_id IN (SELECT matches.winner_id
                               FROM   matches)
GROUP BY rankings.ranking_date;<separator>SELECT AVG(rankings.ranking) AS average_rank
FROM   rankings
WHERE  rankings.player_id IN (SELECT matches.winner_id
                               FROM   matches)
GROUP BY rankings.ranking_date;<separator>SELECT max(matches.loser_rank) AS highest_rank
FROM   matches
WHERE  matches.loser_id IS NOT NULL;<separator>SELECT MIN(rankings.ranking) AS best_rank_of_losers
FROM rankings
WHERE rankings.player_id IN (SELECT matches.loser_id FROM matches)
GROUP BY rankings.ranking_date;<separator>SELECT COUNT(DISTINCT players.country_code) AS num_distinct_country_codes
FROM   players;<separator>SELECT COUNT(DISTINCT players.country_code) AS num_distinct_countries
FROM   players;<separator>SELECT COUNT(DISTINCT players.last_name) AS "Number of distinct name of losers"
FROM   players
WHERE  players.player_id IN (SELECT matches.loser_id
                             FROM   matches
                             WHERE  matches.match_num = 1);<separator>SELECT COUNT(DISTINCT players.last_name) AS num_different_loser_names
FROM   matches join players on matches.loser_id = players.player_id
WHERE  matches.match_num = 1;<separator>SELECT tourney_name
FROM   matches
GROUP BY tourney_name
HAVING count(*) > 10
ORDER BY count(*) DESC;<separator>SELECT DISTINCT tournaments.tourney_name
FROM   tournaments
JOIN   matches ON tournaments.tourney_id = matches.tourney_id
GROUP BY tournaments.tourney_name
HAVING count(*) > 10;<separator>SELECT DISTINCT players.first_name ||'' || players.last_name AS winner_name
       FROM   players
       WHERE  players.player_id IN (SELECT matches.winner_id
                                   FROM   matches
                                   WHERE  matches.year = 2013) AND players.player_id IN (SELECT matches.;<separator>SELECT DISTINCT players.first_name ||'' || players.last_name
FROM   players
WHERE  players.player_id IN (SELECT winner_id
                             FROM   matches
                             WHERE  year = 2013) AND players.player_id IN (SELECT winner_id
                                                               FROM   matches
                                                               WHERE;<separator>SELECT count(*) AS all_matches_count
       FROM   matches
       WHERE  matches.year in (2013, 2016);<separator>SELECT count(*) AS total_matches_played
FROM   matches
WHERE  matches.year in (2013, 2016);<separator>SELECT players.country_code,
       players.first_name
FROM   players
WHERE  players.player_id IN (SELECT matches.winner_id
                             FROM   matches
                             WHERE  matches.tourney_name = 'WTA Championships'
                                AND matches.year = 2018);<separator>SELECT players.first_name,
       players.country_code
FROM   players
WHERE  players.player_id IN (SELECT matches.winner_id
                             FROM   matches
                             WHERE  matches.tourney_name = 'WTA Championships'
                                AND matches.year = 2018);<separator>SELECT players.first_name,
       players.country_code
FROM   players
WHERE  players.player_id = (SELECT player_id
                             FROM   players
                             ORDER BY players.birth_date asc
                             LIMIT 1);<separator>SELECT players.first_name,
       players.country_code
FROM   players
WHERE  players.player_id = (SELECT player_id
                             FROM   players
                             ORDER BY players.birth_date asc
                             LIMIT 1);<separator>SELECT players.first_name, players.last_name
       FROM   players
       ORDER  BY players.birth_date;<separator>SELECT players.first_name ||'' || players.last_name AS full_name,
              players.birth_date
       FROM   players
       ORDER  BY players.birth_date;<separator>SELECT players.first_name, players.last_name
       FROM   players
       WHERE  players.hand = 'L'
       ORDER  BY players.birth_date;<separator>SELECT players.first_name ||'' || players.last_name AS full_name
FROM   players
WHERE  players.hand = 'Left'
ORDER BY players.birth_date;<separator>SELECT players.first_name,
       players.country_code
FROM   players
WHERE  players.player_id = (SELECT rankings.player_id
                            FROM   rankings
                            ORDER BY rankings.tours desc
                            LIMIT 1);<separator>SELECT players.first_name,
       players.country_code
FROM   players
WHERE  players.player_id = (SELECT player_id
                             FROM   rankings
                             WHERE  ranking = 1)
ORDER BY players.first_name, players.country_code;<separator>SELECT matches.year,
       count(*) AS num_matches
FROM   matches
GROUP BY matches.year
ORDER BY num_matches DESC
LIMIT 1;<separator>SELECT matches.year,
       count(*) AS num_matches
FROM   matches
GROUP BY matches.year
ORDER BY num_matches DESC
LIMIT 1;<separator>SELECT players.first_name,
       players.last_name,
       rankings.ranking_points
FROM   players join rankings on players.player_id = rankings.player_id
WHERE  rankings.ranking = (SELECT max(ranking)
                           FROM   rankings)
ORDER BY rankings.;<separator>SELECT players.first_name ||'' || players.last_name AS winner_name,
       players.player_id,
       rankings.ranking_points
FROM   players join matches on players.player_id = matches.winner_id
         join rankings on players.player_id = rankings.player;<separator>SELECT players.first_name ||'' || players.last_name AS winner_name
FROM   players
WHERE  players.player_id = (SELECT matches.winner_id
                            FROM   matches
                            WHERE  matches.tourney_name = 'Australian Open'
                            ORDER BY matches.winner_rank;<separator>SELECT players.first_name ||'' || players.last_name AS winner_name
FROM   players
JOIN   matches ON players.player_id = matches.winner_id
WHERE  matches.tourney_name = 'Australian Open'
ORDER BY players.player_id desc
LIMIT;<separator>SELECT players.first_name ||'' || players.last_name AS loser_name,
       players.first_name ||'' || players.last_name AS winner_name
FROM   matches join players on matches.loser_id = players.player_id
WHERE  matches.minutes = (;<separator>SELECT players.first_name ||'' || players.last_name AS winner_name,
       players.first_name ||'' || players.last_name AS loser_name
FROM   matches join players on matches.winner_id = players.player_id
WHERE  matches.match_num =;<separator>SELECT players.first_name,
       players.last_name,
       AVG(rankings.ranking) AS average_ranking
FROM   players join rankings on players.player_id = rankings.player_id
GROUP BY players.first_name, players.last_name
ORDER BY average_ranking;<separator>SELECT players.first_name,
       avg(rankings.ranking) AS average_ranking
FROM   players
         left join rankings on players.player_id = rankings.player_id
GROUP BY players.first_name
ORDER BY average_ranking desc;<separator>SELECT players.first_name,
       players.last_name,
       sum(rankings.ranking_points) AS total_ranking_points
FROM   players join rankings on players.player_id = rankings.player_id
GROUP BY players.first_name, players.last_name
ORDER BY;<separator>SELECT players.first_name,
       sum(rankings.ranking_points) AS total_ranking_points
FROM   players
         left join rankings on players.player_id = rankings.player_id
GROUP BY players.first_name
ORDER BY total_ranking_points desc;<separator>SELECT players.country_code,
       count(players.player_id) AS num_players
FROM   players
GROUP BY players.country_code
ORDER BY num_players DESC;<separator>SELECT players.country_code,
       count(*) AS player_count
FROM   players
GROUP BY players.country_code
ORDER BY player_count DESC;<separator>SELECT players.country_code,
       count(*) AS player_count
FROM   players
GROUP BY players.country_code
ORDER BY player_count DESC
LIMIT 1;<separator>SELECT players.country_code
FROM   players
GROUP BY players.country_code
ORDER BY count(*) DESC
LIMIT 1;<separator>SELECT players.country_code
FROM   players
GROUP BY players.country_code
HAVING count(*) > 50;<separator>SELECT players.country_code
FROM   players
GROUP BY players.country_code
HAVING count(*) > 50;<separator>SELECT rankings.ranking_date,
       sum(rankings.tours) as total_tours
FROM   rankings
GROUP BY rankings.ranking_date
ORDER BY rankings.ranking_date;<separator>SELECT rankings.ranking_date,
       sum(rankings.tours) as total_tours
FROM   rankings
GROUP BY rankings.ranking_date
ORDER BY rankings.ranking_date;<separator>SELECT matches.year,
       count(*) AS num_matches
FROM   matches
GROUP BY matches.year
ORDER BY matches.year;<separator>SELECT matches.year,
       count(*) AS num_matches
FROM   matches
GROUP BY matches.year
ORDER BY matches.year;<separator>SELECT players.first_name,
       players.last_name,
       rankings.ranking
FROM   players join matches on players.player_id = matches.winner_id join rankings on players.player_id = rankings.player_id
WHERE  matches.tourney_date = '201;<separator>SELECT players.first_name,
       players.last_name,
       rankings.ranking
FROM   players join matches on players.player_id = matches.winner_id join rankings on players.player_id = rankings.player_id
WHERE  matches.tourney_date = (SELECT MIN(;<separator>SELECT COUNT(DISTINCT matches.winner_id) AS num_different_winners
FROM   matches
WHERE  matches.tourney_name = 'WTA Championships'
   AND matches.winner_hand = 'Left';<separator>SELECT count(*) AS num_left_handed_winners
FROM   players
WHERE  players.hand = 'Left'
   AND players.player_id IN (SELECT winner_id
                           FROM   matches
                           WHERE  tourney_name = 'WTA Championships');<separator>SELECT players.first_name,
       players.country_code,
       players.birth_date
FROM   players
WHERE  players.player_id = (SELECT matches.winner_id
                            FROM   matches
                            WHERE  matches.winner_rank_points = (SELECT MAX(rankings.ranking_points);<separator>SELECT players.first_name,
       players.country_code,
       players.birth_date
FROM   players
WHERE  players.player_id = (SELECT max(rankings.player_id)
                            FROM   rankings)
ORDER BY players.first_name, players.country_code, players.;<separator>SELECT players.hand,
       count(*) AS num_players
FROM   players
GROUP BY players.hand
ORDER BY num_players DESC;<separator>SELECT players.hand,
       count(*) AS player_count
FROM   players
GROUP BY players.hand
ORDER BY player_count DESC;<separator>SELECT count(*) AS num_captured_ships
FROM   ship
WHERE  ship.disposition_of_ship = 'Captured';<separator>SELECT ship.name,
          ship.tonnage
     FROM ship
     ORDER BY ship.name DESC;<separator>SELECT battle.name,
              battle.date,
              battle.result
       FROM   battle
       ORDER BY battle.date;<separator>SELECT death.id,
       death.note,
       death.killed,
       death.injured,
       MIN(death.killed) AS min_killed,
       MAX(death.killed) AS max_killed
FROM death
GROUP BY death.id, death.note, death.killed;<separator>SELECT battle.date,
       avg(death.injured) AS average_injuries
FROM   battle join ship on battle.id = ship.lost_in_battle join death on ship.id = death.caused_by_ship_id
GROUP BY battle.date
ORDER BY battle.date;<separator>SELECT death.note,
       death.killed,
       death.injured
FROM death join ship on death.caused_by_ship_id = ship.id
WHERE ship.tonnage = 't'
ORDER BY death.note;<separator>SELECT battle.name,
       battle.result
      FROM   battle
      WHERE  battle.bulgarian_commander!= 'Boril'
      ORDER BY battle.name;<separator>SELECT battle.id,
              battle.name
       FROM   battle join ship
               ON battle.id = ship.lost_in_battle
       WHERE  ship.ship_type = 'Brig'
       ORDER BY battle.id asc;<separator>SELECT battle.id,
       battle.name
FROM   battle join death on battle.id = death.id
GROUP BY battle.id, battle.name
HAVING sum(death.killed) > 10
ORDER BY sum(death.killed) desc;<separator>SELECT ship.id,
       ship.name,
       sum(death.injured) as total_injuries
FROM   ship join death on ship.id = death.caused_by_ship_id
GROUP BY ship.id, ship.name
ORDER BY total_injuries desc
LIMIT;<separator>SELECT DISTINCT battle.name
      FROM   battle
      WHERE  battle.bulgarian_commander BETWEEN 'Kaloyan' AND 'Baldwin I'
         OR battle.latin_commander BETWEEN 'Kaloyan' AND 'Baldwin I'
      ORDER BY battle.name;<separator>SELECT DISTINCT battle.result
      FROM   battle
      ORDER BY battle.result;<separator>SELECT count(*) AS num_battles_without_losses
FROM   battle b
LEFT JOIN ship s
  ON b.id = s.id
WHERE  s.tonnage!= '225'
   OR s.id IS NULL;<separator>SELECT battle.name,
              battle.date
       FROM   battle
       WHERE  battle.id in (SELECT battle.id
                            FROM   battle
                            WHERE  battle.name = 'Lettice'
                               AND battle.id in (SELECT ship.lost_in_battle
                                             FROM   ship
                                             WHERE  ship.name = ';<separator>SELECT battle.name,
              battle.result,
              battle.bulgarian_commander
       FROM   battle
       WHERE  battle.id NOT IN (SELECT ship.id
                                FROM   ship
                                WHERE  ship.lost_in_battle IS NOT NULL) AND battle.name LIKE '%English Channel%'
       ORDER BY battle.;<separator>SELECT death.note
       FROM   death
       WHERE  death.note like '%East%';<separator>SELECT DISTINCT addresses.address_id,
                       addresses.line_1,
                       addresses.line_2,
                       addresses.line_3,
                       addresses.city,
                       addresses.zip_postcode,
                       addresses.state_province_county,
                       addresses.country,
                       addresses.other_address_details
FROM   addresses;<separator>SELECT addresses.address_id,
              addresses.line_1,
              addresses.line_2
       FROM   addresses;<separator>SELECT count(*) AS total_courses FROM Courses;<separator>SELECT count(*) AS course_count
       FROM   Courses;<separator>SELECT courses.course_description
       FROM   courses
       WHERE  courses.course_name = 'Mathematics';<separator>SELECT courses.course_name,
              courses.course_description
       FROM   courses
       WHERE  courses.course_name LIKE '%math%'
       ORDER BY courses.course_name;<separator>SELECT Addresses.zip_postcode
       FROM   Addresses
       WHERE  Addresses.city = 'Port Chelsea';<separator>SELECT Addresses.zip_postcode
       FROM   Addresses
       WHERE  Addresses.city = 'Port Chelsea';<separator>SELECT d.department_name,
       d.department_id
FROM   (SELECT dp.department_id,
                count(*) as degree_count
         FROM   Degree_Programs dp
         GROUP BY dp.department_id) as d
WHERE  d.degree_count = (SELECT max(degree_count);<separator>SELECT departments.department_name,
              departments.department_id
       FROM   departments
       LEFT JOIN degree_programs
               ON departments.department_id = degree_programs.department_id
       GROUP BY departments.department_name, departments.department_id
       ORDER BY count(degree_programs.degree;<separator>SELECT count(distinct dp.department_id) AS num_departments
       FROM   degree_programs dp
       WHERE  dp.department_id in (SELECT dp2.department_id
                                  FROM   degree_programs dp2);<separator>SELECT count(distinct degree_programs.department_id) AS num_departments
       FROM   degree_programs;<separator>SELECT COUNT(DISTINCT degree_programs.degree_summary_name) AS num_different_degrees
      FROM   degree_programs;<separator>SELECT COUNT(DISTINCT degree_programs.degree_program_id) AS num_degrees
FROM   degree_programs;<separator>SELECT count(*) AS degrees_offered FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');<separator>SELECT count(*) AS degrees_count
       FROM   Degree_Programs
       WHERE  Degree_Programs.department_id = (SELECT department_id
                                               FROM   Departments
                                               WHERE  Departments.department_name = 'Engineering');<separator>SELECT sections.section_name,
       sections.section_description
       FROM sections;<separator>SELECT sections.section_name,
              sections.section_description
       FROM   sections;<separator>SELECT courses.course_id,
       courses.course_name
FROM   courses
JOIN   sections on courses.course_id = sections.course_id
GROUP BY courses.course_id, courses.course_name
HAVING count(sections.section_id) <= 2
ORDER BY courses.course;<separator>SELECT courses.course_id,
              courses.course_name
       FROM   courses
       LEFT JOIN sections
           ON courses.course_id = sections.course_id
       WHERE  sections.section_id IS NULL
       GROUP BY courses.course_id, courses.course_name
       HAVING count(sections.section_;<separator>SELECT DISTINCT sections.section_name
       FROM   sections
       ORDER BY sections.section_name DESC;<separator>SELECT sections.section_name
       FROM   sections
       ORDER BY sections.section_name DESC;<separator>SELECT semesters.semester_name,
       semesters.semester_id
FROM   semesters
WHERE  semesters.semester_id in (SELECT semester_id
                                 FROM   student_enrolment
                                 GROUP BY semester_id
                                 ORDER BY count(*) DESC
                                 LIMIT 1);<separator>SELECT semesters.semester_name,
       semesters.semester_id
FROM   semesters
WHERE  semesters.semester_id IN (SELECT semester_id
                                FROM   (SELECT semester_id,
                                             count(*) as student_count
                                          FROM   student_enrolment
                                          GROUP;<separator>SELECT departments.department_description
       FROM   departments
       WHERE  departments.department_name LIKE '%computer%';<separator>SELECT departments.department_description
       FROM   departments
       WHERE  departments.department_name LIKE '%computer%';<separator>SELECT DISTINCT students.first_name,
                  students.middle_name,
                  students.last_name,
                  students.student_id
FROM   students
     INNER JOIN student_enrolment on students.student_id = student_enrolment.student_id
     INNER JOIN semesters on student_enrol;<separator>SELECT students.student_id,
       students.first_name,
       students.middle_name,
       students.last_name
FROM   students
     join student_enrolment on students.student_id = student_enrolment.student_id
     join semesters on student_enrolment.semester;<separator>SELECT DISTINCT students.first_name,
                  students.middle_name,
                  students.last_name
FROM   students
     INNER JOIN student_enrolment on students.student_id = student_enrolment.student_id
     INNER JOIN degree_programs on student_enrolment.degree_program_id;<separator>SELECT students.first_name,
              students.middle_name,
              students.last_name
       FROM   students
       JOIN   student_enrolment on students.student_id = student_enrolment.student_id
       JOIN   degree_programs on student_enrolment.degree_program_id = degree;<separator>SELECT degree_programs.degree_program_id,
       degree_programs.degree_summary_name,
       degree_programs.degree_summary_description,
       degree_programs.other_details,
       count(student_enrolment.student_id) AS num_students
FROM   degree_programs
         left;<separator>SELECT degree_programs.degree_summary_name,
       count(student_enrolment.student_id) as student_count
FROM   student_enrolment join degree_programs
       on student_enrolment.degree_program_id = degree_programs.degree_program_id
GROUP BY degree;<separator>SELECT degree_programs.degree_program_id,
       degree_programs.degree_summary_name
FROM   degree_programs
         left join (select student_enrolment.degree_program_id,
                            count(*) as student_count
                     from   student_enrolment
                     group by student_enrolment;<separator>SELECT degree_programs.degree_program_id,
       degree_programs.degree_summary_name
FROM   degree_programs
         left join (select degree_program_id,
                          count(*) as student_count
                   from   student_enrolment
                   group by degree_program_id) as student_counts on;<separator>SELECT students.student_id,
       students.first_name,
       students.middle_name,
       students.last_name,
       count(*) as num_enrollments
FROM   students
     left join student_enrolment on students.student_id = student_enrolment.student_id
GROUP BY;<separator>SELECT students.student_id,
       students.first_name,
       students.middle_name,
       students.last_name,
       count(student_enrolment.student_enrolment_id) as num_enrollments
FROM   students
     left join student_enrolment on students.student_;<separator>SELECT semesters.semester_name
FROM   semesters
WHERE  semesters.semester_id not in (SELECT student_enrolment.semester_id
                                     FROM   student_enrolment)
ORDER BY semesters.semester_name;<separator>SELECT semesters.semester_name
FROM   semesters
WHERE  semesters.semester_id not in (SELECT student_enrolment.semester_id
                                    FROM   student_enrolment)
ORDER BY semesters.semester_name;<separator>SELECT DISTINCT c.course_name
       FROM   Courses c
       WHERE  c.course_id in (SELECT sc.course_id
                              FROM   Student_Enrolment se join Student_Enrolment_Courses sec on se.student_enrolment_id = sec.student_enrolment_id;<separator>SELECT DISTINCT c.course_name
       FROM   Courses c
       WHERE  c.course_id in (SELECT sc.course_id
                              FROM   Student_Enrolment se join Student_Enrolment_Courses sec on se.student_enrolment_id = sec.student_enrolment_id;<separator>SELECT courses.course_name
FROM   courses
JOIN   student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id
GROUP BY courses.course_name
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT c.course_name
FROM   Courses c join Student_Enrolment_Courses sec on c.course_id = sec.course_id
GROUP BY c.course_name
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT students.last_name
       FROM   students
              left join addresses on students.current_address_id = addresses.address_id
              left join student_enrolment on students.student_id = student_enrolment.student_id
       WHERE  addresses.state_province_county = 'North Carolina;<separator>SELECT students.last_name
       FROM   students
              LEFT JOIN addresses ON students.current_address_id = addresses.address_id
              LEFT JOIN student_enrolment ON students.student_id = student_enrolment.student_id
       WHERE  addresses.state_province_county = 'North Carolina;<separator>SELECT t.transcript_date,
       t.transcript_id
FROM   transcripts t
JOIN   transcript_contents tc on t.transcript_id = tc.transcript_id
JOIN   student_enrolment_courses sec on tc.student_course_id = sec.student_course_id
GROUP;<separator>SELECT t.transcript_date,
       t.transcript_id
FROM   transcripts t
WHERE  t.transcript_id in (SELECT tc.transcript_id
                           FROM   transcript_contents tc
                           GROUP BY tc.transcript_id
                           HAVING count(*) >= 2)
ORDER BY t.transcript_;<separator>SELECT students.cell_mobile_number
       FROM   students
       WHERE  students.first_name = 'Timmothy'
          and students.last_name = 'Ward';<separator>SELECT students.cell_mobile_number
       FROM   students
       WHERE  students.first_name = 'Timmothy'
          and students.last_name = 'Ward';<separator>SELECT students.first_name,
              students.middle_name,
              students.last_name
       FROM   students
       ORDER  BY students.student_id asc
       LIMIT  1;<separator>SELECT students.first_name,
              students.middle_name,
              students.last_name
       FROM   students
       ORDER  BY students.student_id asc
       LIMIT  1;<separator>SELECT students.first_name,
       students.middle_name,
       students.last_name
FROM   students
WHERE  students.student_id IN (SELECT student_enrolment.student_id
                               FROM   student_enrolment
                               WHERE  student_enrolment.semester_id = (SELECT;<separator>SELECT students.first_name,
              students.middle_name,
              students.last_name
       FROM   students
       WHERE  students.student_id IN (SELECT student_enrolment.student_id
                                     FROM   student_enrolment
                                     WHERE  student_enrolment.semester_id = (SELECT MIN;<separator>SELECT students.first_name
FROM   students
WHERE  students.permanent_address_id!= students.current_address_id;<separator>SELECT students.first_name
       FROM   students
       WHERE  students.permanent_address_id!= students.current_address_id;<separator>SELECT addresses.address_id,
       addresses.line_1,
       addresses.line_2,
       addresses.line_3,
       addresses.city,
       addresses.zip_postcode,
       addresses.state_province_county,
       addresses.country,
       addresses.other_address_details
FROM   addresses;<separator>SELECT addresses.address_id,
       addresses.line_1,
       addresses.line_2
FROM   addresses
WHERE  addresses.address_id in (SELECT current_address_id
                                FROM   students
                                group by current_address_id
                                order by count(*) desc limit 1)
ORDER BY addresses.;<separator>SELECT avg(cast(t.transcript_date as date)) as average_date
FROM   transcripts t;<separator>SELECT avg(t.transcript_date) AS average_transcript_date
FROM   transcripts t;<separator>SELECT min(transcripts.transcript_date) AS first_transcript_date,
              transcripts.other_details
       FROM   transcripts
       ORDER BY first_transcript_date asc;<separator>SELECT min(t.transcript_date) AS earliest_date,
       t.other_details
FROM   transcripts t
GROUP BY t.other_details
ORDER BY earliest_date asc;<separator>SELECT count(*) AS num_transcripts_released
FROM   Transcripts
WHERE  transcript_date <= now();<separator>SELECT count(*) AS num_transcripts
FROM   Transcripts;<separator>SELECT max(transcripts.transcript_date) AS last_release_date
       FROM   transcripts;<separator>SELECT max(transcripts.transcript_date) AS last_transcript_release_date
       FROM   transcripts;<separator>SELECT student_enrolment_id,
       count(*) AS max_count
FROM   (SELECT student_enrolment_id,
                course_id
         FROM   student_enrolment_courses
         WHERE  transcript_id in (SELECT transcript_id
                                    FROM   transcript_contents
                                    GROUP BY transcript_id;<separator>SELECT courses.course_id,
       courses.course_name,
       count(*) AS max_count
FROM   courses
         left join student_enrolment_courses on courses.course_id = student_enrolment_courses.course_id
         left join transcript_contents on student_enrolment_courses;<separator>SELECT t.transcript_date, t.transcript_id
FROM   (SELECT transcript_id,
                count(*) AS num_results
         FROM   transcript_contents
         GROUP BY transcript_id) AS tc LEFT JOIN transcripts AS t ON tc.transcript_id = t.transcript_id
ORDER BY tc.num;<separator>SELECT t.transcript_date,
       t.transcript_id
FROM   (SELECT transcript_id,
                count(*) AS num_results
         FROM   transcript_contents
         GROUP BY transcript_id) AS tc
WHERE  tc.num_results = (SELECT min(num_results)
                         FROM   transcript_contents;<separator>SELECT semesters.semester_name
FROM   semesters
WHERE  semesters.semester_id IN (SELECT student_enrolment.semester_id
                                FROM   student_enrolment
                                WHERE  student_enrolment.student_id IN (SELECT student_id
                                                                   FROM   students;<separator>SELECT semesters.semester_id
FROM   semesters
WHERE  semesters.semester_name = 'Fall'
   AND EXISTS (SELECT 1
             FROM   student_enrolment
             WHERE  student_enrolment.semester_id = semesters.semester_id
                AND student_;<separator>SELECT COUNT(DISTINCT Addresses.address_id) AS num_addresses
FROM   Students
         LEFT JOIN Addresses ON Students.current_address_id = Addresses.address_id;<separator>SELECT DISTINCT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3, addresses.city, addresses.zip_postcode, addresses.state_province_county, addresses.country, addresses.other_address_details
FROM   addresses
JOIN   students on addresses.address;<separator>SELECT students.student_id,
              students.first_name,
              students.last_name,
              students.email_address,
              students.cell_mobile_number,
              students.date_first_registered,
              students.date_left,
              students.other_student_details
       FROM   students
       ORDER BY;<separator>SELECT students.student_id,
              students.first_name,
              students.last_name,
              students.email_address,
              students.cell_mobile_number,
              students.date_first_registered,
              students.date_left,
              students.other_student_details
       FROM   students
       ORDER BY;<separator>SELECT sections.section_name,
              sections.section_description,
              departments.department_name,
              departments.department_description,
              courses.course_name,
              courses.course_description
       FROM   sections
              JOIN courses ON sections.course_id = courses.course_id
              JOIN departments ON courses;<separator>SELECT sections.section_description
       FROM   sections
       WHERE  sections.section_name = 'h';<separator>SELECT students.first_name
       FROM   students
       WHERE  (students.permanent_address_id IN (SELECT addresses.address_id
                                                    FROM   addresses
                                                    WHERE  addresses.country = 'Haiti')
          or students.cell_mobile_number = '09700166582');<separator>SELECT students.first_name
       FROM   students
       WHERE  (students.permanent_address_id in (SELECT addresses.address_id
                                                    FROM   addresses
                                                    WHERE  addresses.country = 'Haiti') or students.cell_mobile_number = '09700166582');<separator>SELECT cartoon.title
      FROM   cartoon
      ORDER BY cartoon.title;<separator>SELECT cartoon.title
      FROM   cartoon
      ORDER BY cartoon.title;<separator>SELECT cartoon.title,
              cartoon.original_air_date
       FROM   cartoon
       WHERE  cartoon.directed_by = '<NAME>'
       ORDER BY cartoon.original_air_date asc;<separator>SELECT cartoon.title
       FROM   cartoon
       WHERE  cartoon.directed_by = '<NAME>';<separator>SELECT count(*) AS cartoons_written_by_joseph_kuhr
FROM   cartoon
WHERE  cartoon.written_by = 'Joseph Kuhr';<separator>SELECT count(*) AS cartoon_count
FROM   cartoon
WHERE  cartoon.written_by = '<NAME>';<separator>SELECT cartoon.title,
              cartoon.directed_by
       FROM   cartoon
       ORDER BY cartoon.original_air_date asc;<separator>SELECT cartoon.title,
       cartoon.directed_by
FROM   cartoon
WHERE  cartoon.original_air_date is not null
ORDER BY cartoon.original_air_date;<separator>SELECT cartoon.title
      FROM   cartoon
      WHERE  cartoon.directed_by in ('<NAME>', '<NAME>')
      ORDER BY cartoon.title;<separator>SELECT cartoon.title
FROM   cartoon
WHERE  cartoon.directed_by in ('<NAME>', '<NAME>')
ORDER BY cartoon.title;<separator>SELECT country,
       count(*) AS num_channels
FROM   tv_channel
GROUP BY country
ORDER BY num_channels desc;<separator>SELECT tv_channel.country,
       count(*) AS num_channels
FROM   tv_channel
GROUP BY tv_channel.country
ORDER BY num_channels DESC
LIMIT 1;<separator>SELECT tv_channel.series_name,
       tv_channel.content,
       count(*) AS count
FROM   tv_channel
GROUP BY tv_channel.series_name, tv_channel.content
ORDER BY count DESC;<separator>SELECT DISTINCT tv_channel.series_name,
                   tv_channel.content
FROM   tv_channel
ORDER BY tv_channel.series_name, tv_channel.content;<separator>SELECT tv_channel.content
       FROM   tv_channel
       WHERE  tv_channel.series_name = 'Sky Radio';<separator>SELECT tv_channel.content
FROM   tv_channel
WHERE  tv_channel.series_name = 'Sky Radio';<separator>SELECT tv_channel.package_option
      FROM   tv_channel
      WHERE  tv_channel.series_name = 'Sky Radio';<separator>SELECT tv_channel.package_option
       FROM   tv_channel
       WHERE  tv_channel.series_name = 'Sky Radio';<separator>SELECT count(*) AS count
FROM   tv_channel
WHERE  language = 'English';<separator>SELECT count(*) AS num_channels
FROM   tv_channel
WHERE  language = 'English';<separator>SELECT tvc.language,
       count(*) as number_of_channels
FROM   tv_channel tvc
GROUP BY tvc.language
ORDER BY number_of_channels asc;<separator>WITH channel_count AS (
  SELECT tv_channel.language,
         count(*) AS channel_count
  FROM   tv_channel
  GROUP BY tv_channel.language
  ORDER BY channel_count asc
  limit 1
)
SELECT channel_count.language,
       channel_count.channel_count
FROM;<separator>SELECT tv_channel.language,
       count(tv_channel.id) AS number_of_channels
FROM   tv_channel
GROUP BY tv_channel.language
ORDER BY number_of_channels DESC;<separator>SELECT tv_channel.language,
       count(tv_channel.id) AS number_of_channels
FROM   tv_channel
GROUP BY tv_channel.language
ORDER BY number_of_channels desc;<separator>SELECT tv_channel.series_name
FROM   tv_channel join cartoon
          on tv_channel.id = cartoon.channel
WHERE  cartoon.title = 'The Rise of the Blue Beetle!';<separator>SELECT tv_channel.series_name
FROM   tv_channel join cartoon on tv_channel.id = cartoon.channel
WHERE  cartoon.title = 'The Rise of the Blue Beetle';<separator>SELECT cartoon.title
       FROM   cartoon join tv_channel
               on cartoon.channel = tv_channel.id
       WHERE  tv_channel.series_name = 'Sky Radio';<separator>SELECT cartoon.title
FROM   cartoon join tv_channel on cartoon.channel = tv_channel.id
WHERE  tv_channel.series_name = 'Sky Radio';<separator>SELECT tv_series.episode,
              tv_series.rating
       FROM   tv_series
       ORDER BY tv_series.rating;<separator>SELECT tv_series.episode,
              tv_series.rating
       FROM   tv_series
       ORDER BY tv_series.rating asc;<separator>SELECT tvs.episode,
       tvs.rating,
       tvs.title
FROM   tv_series tvs
WHERE  tvs.rating = 'TV-Y7'
ORDER BY tvs.rating desc, tvs.title asc
limit 3;<separator>SELECT tv_series.episode,
       tv_series.rating
FROM   tv_series
ORDER BY tv_series.rating desc, tv_series.episode asc
LIMIT 3;<separator>SELECT min(tv_series.share) AS min_share,
       max(tv_series.share) AS max_share
  FROM   tv_series;<separator>SELECT max(tv_series.share) AS max_share,
       min(tv_series.share) AS min_share
       FROM   tv_series;<separator>SELECT tv_series.air_date
       FROM   tv_series
       WHERE  tv_series.episode = 'A Love of a Lifetime';<separator>SELECT cartoon.original_air_date
FROM   cartoon
WHERE  cartoon.title = 'A Love of a Lifetime'
ORDER BY cartoon.original_air_date desc;<separator>SELECT tv_series.weekly_rank
       FROM   tv_series
       WHERE  tv_series.episode = 'A Love of a Lifetime';<separator>SELECT tv_series.weekly_rank
      FROM   tv_series
      WHERE  tv_series.episode = 'A Love of a Lifetime';<separator>SELECT tv_channel.series_name
FROM   tv_channel join tv_series on tv_channel.id = tv_series.channel
WHERE  tv_series.episode = 'A Love of a Lifetime';<separator>SELECT tv_channel.series_name
FROM   tv_channel join tv_series on tv_channel.id = tv_series.channel
WHERE  tv_series.episode = 'A Love of a Lifetime';<separator>SELECT tv_series.episode
      FROM   tv_series join tv_channel
              on tv_series.channel = tv_channel.id
      WHERE  tv_channel.series_name = 'Sky Radio'
      ORDER BY tv_series.episode asc;<separator>SELECT tv_series.episode
FROM   tv_series, tv_channel
WHERE  tv_series.channel = tv_channel.id and tv_channel.series_name = 'Sky Radio';<separator>SELECT cartoon.directed_by,
       count(*) AS number_of_cartoons
FROM   cartoon
GROUP BY cartoon.directed_by
ORDER BY number_of_cartoons DESC;<separator>SELECT cartoon.directed_by,
       count(cartoon.id) AS cartoon_count
FROM   cartoon
GROUP BY cartoon.directed_by
ORDER BY cartoon_count DESC;<separator>SELECT cartoon.production_code,
       cartoon.channel
FROM   cartoon
WHERE  cartoon.original_air_date = (SELECT max(original_air_date)
                                    FROM   cartoon)
ORDER BY cartoon.production_code, cartoon.channel;<separator>SELECT cartoon.production_code,
       cartoon.channel
FROM   cartoon
WHERE  cartoon.id = (SELECT max(cartoon.id)
                     FROM   cartoon)
ORDER BY cartoon.production_code, cartoon.channel;<separator>SELECT tv_channel.package_option,
       tv_channel.series_name
FROM   tv_channel
WHERE  tv_channel.hight_definition_tv = 'Yes';<separator>SELECT tv_channel.package_option,
       tv_channel.series_name
FROM   tv_channel
WHERE  tv_channel.hight_definition_tv = 'Yes';<separator>SELECT DISTINCT tv_channel.country
FROM   tv_channel join cartoon on tv_channel.id = cartoon.channel
WHERE  cartoon.written_by = '<NAME>';<separator>SELECT DISTINCT tv_channel.country
FROM   cartoon join tv_channel on cartoon.channel = tv_channel.id
WHERE  cartoon.written_by = '<NAME>'
ORDER BY tv_channel.country;<separator>SELECT DISTINCT tv_channel.country
FROM   tv_channel
WHERE  tv_channel.id not in (select cartoon.channel
                             from   cartoon
                             where  cartoon.written_by = '<NAME>')
ORDER BY tv_channel.country;<separator>SELECT DISTINCT tv_channel.country
FROM   tv_channel
WHERE  tv_channel.id not in (select cartoon.channel
                             from   cartoon
                             where  cartoon.written_by = '<NAME>')
ORDER BY tv_channel.country;<separator>SELECT tv_channel.series_name,
       tv_channel.country
FROM   tv_channel join cartoon
          on tv_channel.id = cartoon.channel
WHERE  cartoon.directed_by in ('Ben Jones', 'Michael Chang')
ORDER BY tv_channel.series;<separator>SELECT DISTINCT tv_channel.series_name,
                 tv_channel.country
FROM   tv_channel join cartoon on tv_channel.id = cartoon.channel
WHERE  cartoon.directed_by in ('Ben Jones', 'Michael Chang');<separator>SELECT tv_channel.pixel_aspect_ratio_par,
       tv_channel.country
FROM   tv_channel
WHERE  tv_channel.language!= 'English'
ORDER BY tv_channel.pixel_aspect_ratio_par asc;<separator>SELECT tv_channel.pixel_aspect_ratio_par,
       tv_channel.country
FROM   tv_channel
WHERE  tv_channel.language!= 'English'
ORDER BY tv_channel.country;<separator>SELECT tvc.id
FROM   tv_channel tvc
GROUP BY tvc.id, tvc.country
HAVING count(*) > 2
ORDER BY tvc.id asc;<separator>SELECT tv_channel.id
FROM   tv_channel
GROUP BY tv_channel.id
HAVING count(*) > 2;<separator>SELECT DISTINCT tv_channel.id
FROM   tv_channel
WHERE  tv_channel.id not in (select cartoon.channel
                             from   cartoon
                             where  cartoon.directed_by = '<NAME>')
ORDER BY tv_channel.id asc;<separator>SELECT DISTINCT tv_channel.id
FROM   tv_channel
WHERE  tv_channel.id not in (select cartoon.channel
                             from   cartoon
                             where  cartoon.directed_by = '<NAME>')
ORDER BY tv_channel.id asc;<separator>SELECT DISTINCT tv_channel.package_option
FROM   tv_channel
WHERE  tv_channel.id not in (select cartoon.channel
                             from   cartoon
                             where  cartoon.directed_by = '<NAME>')
ORDER BY tv_channel.package_option;<separator>SELECT DISTINCT tv_channel.package_option
FROM   tv_channel
WHERE  tv_channel.id not in (select cartoon.channel
                             from   cartoon
                             where  cartoon.directed_by = '<NAME>')
ORDER BY tv_channel.package_option;<separator>SELECT count(*) AS poker_players_count
FROM   poker_player;<separator>SELECT count(*) AS num_of_players
       FROM   poker_player;<separator>SELECT poker_player.earnings
       FROM   poker_player
       ORDER  BY poker_player.earnings DESC;<separator>SELECT poker_player.earnings,
          people.name
     FROM   poker_player join people on poker_player.people_id = people.people_id
     ORDER  BY poker_player.earnings DESC;<separator>SELECT poker_player.final_table_made,
       poker_player.best_finish
      FROM   poker_player
      ORDER BY poker_player.final_table_made, poker_player.best_finish;<separator>SELECT poker_player.final_table_made,
       poker_player.best_finish
FROM   poker_player
JOIN   people on poker_player.people_id = people.people_id
ORDER BY poker_player.final_table_made, poker_player.best;<separator>SELECT AVG(poker_player.earnings) AS average_earnings
FROM   poker_player;<separator>SELECT AVG(poker_player.earnings) AS average_earnings
FROM   poker_player;<separator>SELECT poker_player.money_rank
       FROM   poker_player
       WHERE  poker_player.earnings = (SELECT MAX(poker_player.earnings)
                                     FROM   poker_player);<separator>SELECT poker_player.money_rank
       FROM   poker_player
       WHERE  poker_player.earnings = (SELECT MAX(poker_player.earnings)
                                     FROM   poker_player);<separator>SELECT max(poker_player.final_table_made) AS max_final_tables
FROM   poker_player
WHERE  poker_player.earnings < 200000;<separator>SELECT max(poker_player.final_table_made) AS max_final_tables
FROM   poker_player
WHERE  poker_player.earnings < 200000;<separator>SELECT people.name
       FROM   people join poker_player
               ON people.people_id = poker_player.people_id
       ORDER BY people.name asc;<separator>SELECT people.name
       FROM   people join poker_player
               on people.people_id = poker_player.people_id
       ORDER BY people.name asc;<separator>SELECT people.name
FROM   people join poker_player on people.people_id = poker_player.people_id
WHERE  poker_player.earnings > 300000;<separator>SELECT people.name
       FROM   people join poker_player
               ON people.people_id = poker_player.people_id
       WHERE  poker_player.earnings > 300000;<separator>SELECT people.name
       FROM   people join poker_player
               ON people.people_id = poker_player.people_id
       ORDER BY poker_player.final_table_made asc;<separator>SELECT people.name,
          poker_player.final_table_made
       FROM   people join poker_player on people.people_id = poker_player.people_id
       ORDER BY poker_player.final_table_made asc;<separator>SELECT people.birth_date
FROM   people join poker_player on people.people_id = poker_player.people_id
WHERE  poker_player.earnings = (SELECT min(poker_player.earnings)
                                FROM   poker_player)
ORDER BY people.birth_;<separator>SELECT people.birth_date
FROM   people join poker_player on people.people_id = poker_player.people_id
WHERE  poker_player.earnings = (SELECT min(poker_player.earnings)
                                FROM   poker_player)
ORDER BY people.birth_;<separator>SELECT poker_player.money_rank
       FROM   poker_player join people
               ON poker_player.people_id = people.people_id
       WHERE  people.height = (SELECT max(height)
                              FROM   people)
       ORDER BY poker_player.money_rank desc;<separator>SELECT poker_player.money_rank
       FROM   poker_player join people
               ON poker_player.people_id = people.people_id
       WHERE  people.height = (SELECT MAX(height)
                              FROM   people)
       ORDER BY poker_player.money_rank DESC;<separator>SELECT AVG(poker_player.earnings) AS average_earnings
FROM   poker_player join people on poker_player.people_id = people.people_id
WHERE  people.height > 200;<separator>SELECT AVG(poker_player.earnings) AS average_earnings
FROM   poker_player join people on poker_player.people_id = people.people_id
WHERE  people.height > 200;<separator>SELECT people.name
       FROM   people join poker_player
               on people.people_id = poker_player.people_id
       ORDER BY poker_player.earnings DESC;<separator>SELECT people.name
       FROM   people join poker_player
               on people.people_id = poker_player.people_id
       ORDER BY poker_player.earnings DESC;<separator>SELECT people.nationality,
       count(*) AS number_of_people
FROM   people
GROUP BY people.nationality
ORDER BY number_of_people DESC;<separator>SELECT people.nationality,
       count(*) AS count
FROM   people
GROUP BY people.nationality
ORDER BY count DESC;<separator>SELECT people.nationality,
       count(*) AS frequency
FROM   people
GROUP BY people.nationality
ORDER BY frequency DESC
LIMIT 1;<separator>SELECT people.nationality,
              count(*) AS count
       FROM   people
       GROUP BY people.nationality
       ORDER BY count DESC
       LIMIT 1;<separator>WITH shared_nationalities AS (
  SELECT nationality, count(*) AS shared_count
  FROM people
  GROUP BY nationality
  HAVING count(*) >= 2
)
SELECT nationality
FROM shared_nationalities
ORDER BY nationality;<separator>SELECT people.nationality
FROM   people
GROUP BY people.nationality
HAVING count(*) >= 2;<separator>SELECT people.name,
              people.birth_date
       FROM   people
       ORDER  BY people.name ASC;<separator>SELECT people.name,
              people.birth_date
       FROM   people
       ORDER BY people.name;<separator>SELECT people.name
       FROM   people
       WHERE  people.nationality!= 'Russia';<separator>SELECT people.name
       FROM   people
       WHERE  people.nationality!= 'Russia';<separator>SELECT people.name
       FROM   people
       WHERE  people.people_id not in (SELECT poker_player.people_id
                                       FROM   poker_player);<separator>SELECT people.name
FROM people
WHERE people.people_id NOT IN (SELECT poker_player.people_id
                               FROM poker_player);<separator>SELECT COUNT(DISTINCT people.nationality) AS num_distinct_nationalities
FROM   people;<separator>SELECT COUNT(DISTINCT people.nationality) AS num_different_nationalities
FROM   people;<separator>SELECT COUNT(DISTINCT state) AS num_states
FROM   AREA_CODE_STATE;<separator>SELECT contestants.contestant_number,
      contestants.contestant_name
     FROM contestants
     ORDER BY contestants.contestant_name DESC;<separator>SELECT v.vote_id,
              v.phone_number,
              a.state
       FROM   votes v
              join area_code_state a on v.state = a.state
       ORDER BY v.vote_id asc;<separator>SELECT min(area_code) AS min_area_code,
       max(area_code) AS max_area_code
       FROM area_code_state;<separator>SELECT max(v.created) AS last_date_created
       FROM   votes v
       WHERE  v.state = 'CA';<separator>SELECT contestant_name
       FROM   CONTESTANTS
       WHERE  contestant_name!= 'Jessie Alloway';<separator>SELECT DISTINCT v.state, v.created
      FROM   votes v
      ORDER BY v.state, v.created;<separator>SELECT contestant_number,
       contestant_name
FROM   CONTESTANTS
WHERE  contestant_number in (SELECT contestant_number
                             FROM   VOTES
                             GROUP BY contestant_number
                             HAVING count(*) >= 2)
ORDER BY contestant_number asc;<separator>WITH contestant_votes AS (
  SELECT contestant_number,
         count(*) AS vote_count
  FROM   votes
  GROUP BY contestant_number
)
SELECT contestant_number,
       contestant_name
FROM   contestant_votes cv join contestants c on cv.contestant_number = c;<separator>SELECT count(*) AS votes_from_ny_or_ca
FROM   votes
WHERE  votes.state in ('NY', 'CA');<separator>SELECT COUNT(*) AS num_contestants_did_not_vote
FROM CONTESTANTS c
WHERE c.contestant_number not in (SELECT v.contestant_number
                                  FROM   VOTES v);<separator>SELECT area_code_state.area_code,
       area_code_state.state,
       count(*) AS voter_count
FROM   area_code_state join votes on area_code_state.state = votes.state
GROUP BY area_code_state.area_code, area_code_;<separator>SELECT v.created,
              a.state,
              v.phone_number
       FROM   votes v join contestants c on v.contestant_number = c.contestant_number join area_code_state a on v.state = a.state
       WHERE  c.contestant_name = 'Tabath;<separator>SELECT DISTINCT v1.area_code
FROM   votes v1
JOIN  votes v2
  ON v1.contestant_number = v2.contestant_number
WHERE  v1.contestant_number = (SELECT contestant_number
                               FROM   contestants
                               WHERE  contestant_;<separator>SELECT contestants.contestant_name
       FROM   contestants
       WHERE  contestants.contestant_name like '%Al%';<separator>SELECT country.name
       FROM   country
       WHERE  country.indepyear > 1950;<separator>SELECT country.name
       FROM   country
       WHERE  country.indepyear > 1950;<separator>SELECT count(*) AS num_republic_countries
FROM   country
WHERE  country.governmentform ='republic';<separator>SELECT count(*) AS republic_countries
FROM   country
WHERE  country.GovernmentForm = 'Republic';<separator>SELECT country.region,
              country.name,
              country.surfacearea
       FROM   country
       WHERE  country.region = 'Caribbean'
       ORDER BY country.surfacearea desc;<separator>SELECT SUM(country.surfacearea) AS total_surface_area
FROM   country
WHERE  country.continent = 'Caribbean';<separator>SELECT country.continent
      FROM   country
      WHERE  country.name = 'Anguilla';<separator>SELECT country.continent
       FROM   country
       WHERE  country.name = 'Anguilla';<separator>SELECT country.region
FROM   city join country on city.CountryCode = country.Code
WHERE  city.Name = 'Kabul';<separator>SELECT country.region
       FROM   country
       WHERE  country.name = 'Kabul';<separator>SELECT countrylanguage.language,
       countrylanguage.percentage
FROM   countrylanguage join country on countrylanguage.countrycode = country.code
WHERE  country.name = 'Aruba'
ORDER BY countrylanguage.percentage desc;<separator>SELECT countrylanguage.language,
       countrylanguage.percentage
FROM   countrylanguage join country on countrylanguage.countrycode = country.code
WHERE  country.name = 'Aruba'
ORDER BY countrylanguage.percentage desc;<separator>SELECT country.name,
       country.population,
       country.lifeexpectancy
FROM   country
WHERE  country.name = 'Brazil';<separator>SELECT country.name,
       country.population,
       country.lifeexpectancy
FROM   country
WHERE  country.name = 'Brazil';<separator>SELECT country.region,
          country.population
       FROM   country
       WHERE  country.name = 'Angola';<separator>SELECT country.region,
          country.population
       FROM   country
       WHERE  country.name = 'Angola';<separator>SELECT country.name,
       country.life_expectancy
FROM   country
WHERE  country.region = 'Central Africa'
GROUP BY country.name, country.life_expectancy
HAVING count(*) > 100
ORDER BY country.life_expectancy asc;<separator>SELECT AVG(country.LifeExpectancy) AS average_life_expectancy
FROM   country
WHERE  country.Continent = 'Africa'
   AND country.Region = 'Central Africa';<separator>SELECT country.name
FROM   country
WHERE  country.continent = 'Asia'
ORDER BY country.lifeexpectancy asc
LIMIT 1;<separator>SELECT country.name
       FROM   country
       WHERE  country.continent = 'Asia'
       ORDER BY country.lifeexpectancy ASC
       LIMIT  1;<separator>SELECT country.region,
       country.name,
       country.population,
       country.gnp
FROM   country
WHERE  country.continent = 'Asia'
ORDER BY country.gnp desc, country.population desc;<separator>SELECT country.name,
       country.gnp
FROM   country
WHERE  country.continent = 'Asia'
ORDER BY country.gnp desc
LIMIT 1;<separator>SELECT AVG(country.lifeexpectancy) AS average_life_expectancy
FROM   country
WHERE  country.continent = 'Africa'
   AND country.region = 'Africa'
   AND country.governmentform = 'Republic';<separator>SELECT country.name,
       country.life_expectancy
FROM   country
WHERE  country.continent = 'Africa'
   AND country.government_form = 'Republic'
GROUP BY country.name, country.life_expectancy
HAVING count(*) >= 10
ORDER BY country;<separator>SELECT sum(country.surfacearea) AS total_surface_area
FROM   country
WHERE  country.continent = 'Asia'
   OR country.continent = 'Europe';<separator>SELECT sum(country.surfacearea) AS total_surface_area
FROM   country
WHERE  country.continent in ('Asia', 'Europe');<separator>SELECT city.population
FROM   city
WHERE  city.district = 'Gelderland';<separator>SELECT city.population
       FROM   city
       WHERE  city.district = 'Gelderland';<separator>SELECT country.name,
       country.gnp,
       country.population
FROM   country
WHERE  country.continent = 'North America'
   AND country.region = 'US'
GROUP BY country.name, country.gnp, country.population
ORDER BY country.gnp desc;<separator>SELECT country.gnp,
       country.population
FROM   country
WHERE  country.continent = 'North America'
   AND country.region = 'US'
GROUP BY country.gnp, country.population
HAVING count(*) > 0;<separator>SELECT COUNT(DISTINCT countrylanguage.language) AS unique_languages
FROM   countrylanguage;<separator>SELECT COUNT(DISTINCT countrylanguage.language) AS num_distinct_languages
FROM   countrylanguage;<separator>SELECT country.governmentform,
       count(*) AS count
FROM   country
WHERE  country.continent = 'Africa'
GROUP BY country.governmentform
ORDER BY count DESC;<separator>SELECT COUNT(DISTINCT country.governmentform) AS num_different_forms
FROM   country
WHERE  country.continent = 'Africa';<separator>SELECT sum(countrylanguage.percentage) AS total_languages_used_in_aruba
FROM   countrylanguage
         JOIN country ON countrylanguage.countrycode = country.code
WHERE  country.name = 'Aruba';<separator>SELECT COUNT(*) AS num_languages
FROM countrylanguage
WHERE countrylanguage.countrycode = 'ABW';<separator>SELECT count(*) AS official_languages
FROM countrylanguage
WHERE countrylanguage.countrycode = 'AFG'
  AND countrylanguage.isofficial = 'true';<separator>SELECT count(*) AS num_official_languages
FROM   countrylanguage
WHERE  countrylanguage.isofficial = 'true'
   AND countrylanguage.countrycode = 'AFG';<separator>SELECT country.name
FROM   country
WHERE  country.code = (SELECT countrylanguage.countrycode
                       FROM   countrylanguage
                       GROUP BY countrylanguage.countrycode
                       ORDER BY count(*) desc
                       LIMIT 1);<separator>WITH nation_language_count AS (
  SELECT country.name,
         count(*) AS language_count
  FROM   country
         LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode
  GROUP BY country.name
  ORDER BY language_count desc
  limit 1)
SELECT nation_language_count;<separator>SELECT country.continent,
       count(distinct countrylanguage.language) as language_count
FROM   country
     left join countrylanguage on country.code = countrylanguage.countrycode
GROUP BY country.continent
ORDER BY language_count desc;<separator>SELECT country.continent,
       count(*) AS language_count
FROM   countrylanguage
         join country on countrylanguage.countrycode = country.code
GROUP BY country.continent
ORDER BY language_count DESC;<separator>SELECT count(*) AS countries_with_both_english_and_dutch
FROM   country c
WHERE  c.code IN (SELECT countrycode
                   FROM   countrylanguage
                   WHERE  language = 'English'
                      or language = 'Dutch');<separator>SELECT count(*) AS num_nations
FROM   country c
WHERE  c.Name in (SELECT country.Name
                  FROM   country
                  WHERE  country.Code in (SELECT countrylanguage.CountryCode
                                          FROM   countrylanguage
                                          WHERE  countrylanguage.Language = 'English'
                                             or countrylanguage.Language = 'D;<separator>SELECT country.name
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                         FROM   countrylanguage
                         WHERE  countrylanguage.language = 'English'
                            or countrylanguage.language = 'French')
ORDER BY country.name;<separator>SELECT DISTINCT country.name
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                         FROM   countrylanguage
                         WHERE  countrylanguage.language = 'English'
                            or countrylanguage.language = 'French')
ORDER BY country.name;<separator>SELECT country.name
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                         FROM   countrylanguage
                         WHERE  countrylanguage.language = 'English'
                            and countrylanguage.isofficial = 'true') and country.code in (SELECT countrylanguage.countrycode
                                                                             FROM   countrylanguage;<separator>SELECT country.name
       FROM   country
       WHERE  country.code in (SELECT countrylanguage.countrycode
                               FROM   countrylanguage
                               WHERE  countrylanguage.language in ('English', 'French'));<separator>SELECT COUNT(DISTINCT country.continent) AS num_distinct_continents
FROM country
WHERE country.name = 'China'
AND country.continent IS NOT NULL;<separator>SELECT country.continent,
       count(*) AS num_speakers
FROM   countrylanguage join country on countrylanguage.countrycode = country.code
WHERE  countrylanguage.language = 'Chinese'
GROUP BY country.continent
ORDER BY num_speakers DESC;<separator>SELECT DISTINCT country.region
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                         FROM   countrylanguage
                         WHERE  (countrylanguage.language = 'English' or countrylanguage.language = 'Dutch'));<separator>SELECT DISTINCT country.region
FROM   countrylanguage
JOIN   country on countrylanguage.countrycode = country.code
WHERE  (countrylanguage.language = 'Dutch' or countrylanguage.language = 'English')
ORDER BY country.region;<separator>SELECT country.name
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                         FROM   countrylanguage
                         WHERE  countrylanguage.language = 'English'
                            or countrylanguage.language = 'Dutch')
ORDER BY country.name;<separator>SELECT country.name
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                         FROM   countrylanguage
                         WHERE  countrylanguage.isofficial = 'true'
                            and (countrylanguage.language = 'English'
                                 or countrylanguage.language = 'Dutch'))
ORDER BY country.name;<separator>WITH continent_languages AS (
  SELECT country.continent,
         countrylanguage.language,
         countrylanguage.percentage
  FROM   countrylanguage join country
          ON countrylanguage.countrycode = country.code
  WHERE  country.continent = 'Asia'
), most_popular_language AS (
  SELECT continent;<separator>SELECT countrylanguage.language,
       countrylanguage.isofficial,
       countrylanguage.percentage,
       country.name,
       country.continent,
       country.region,
       country.surfacearea,
       country.indepyear,
       country.population,
       country.lifeexpectancy,
       country.gnp,;<separator>WITH republic_countries AS (
  SELECT country.name,
         country.code
  FROM   country
  WHERE  country.governmentform ='republic'
), single_country_languages AS (
  SELECT countrylanguage.language
  FROM   countrylanguage
  JOIN   country on countrylanguage.countrycode = country.;<separator>WITH country_republics AS (
  SELECT country.name,
         country.code
  FROM   country
  WHERE  country.governmentform ='republic')
SELECT countrylanguage.language
FROM   country_republics cr, countrylanguage
WHERE  cr.code = countrylanguage.countrycode
GROUP;<separator>SELECT city.name,
       city.population
FROM   city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode
WHERE  countrylanguage.language = 'English'
ORDER BY city.population desc
LIMIT 1;<separator>SELECT city.name,
       city.population
FROM   city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode
WHERE  countrylanguage.language = 'English'
ORDER BY city.population desc
LIMIT 1;<separator>SELECT country.name,
       country.population,
       country.life_expectancy
FROM   country
WHERE  country.continent = 'Asia'
ORDER BY country.surface_area desc
LIMIT 1;<separator>SELECT country.name,
       country.population,
       country.life_expectancy
FROM   country
WHERE  country.continent = 'Asia'
ORDER BY country.population desc, country.life_expectancy desc
LIMIT 1;<separator>SELECT country.name,
       country.life_expectancy,
       country.region
FROM   country
WHERE  country.code not in (select countrylanguage.countrycode
                            from   countrylanguage
                            where  countrylanguage.language = 'English')
GROUP BY country.name, country.life_expectancy, country;<separator>SELECT country.name,
       country.life_expectancy
FROM   country
WHERE  country.code not in (select countrylanguage.countrycode
                            from   countrylanguage
                            where  countrylanguage.language = 'English')
GROUP BY country.name, country.life_expectancy
HAVING count(*) = (;<separator>SELECT sum(country.population) AS total_population
FROM   country
WHERE  country.code NOT IN (SELECT countrylanguage.countrycode
                           FROM   countrylanguage
                           WHERE  countrylanguage.language = 'English');<separator>SELECT country.name,
       country.population,
       country.surfacearea,
       country.indepyear,
       country.lifeexpectancy,
       country.gnp,
       country.gnpold,
       country.localname,
       country.governmentform,
       country.headofstate,
       country.capital;<separator>SELECT countrylanguage.language
FROM   countrylanguage join country on countrylanguage.countrycode = country.code
WHERE  country.headofstate = 'Beatrix'
   AND countrylanguage.isofficial = 'true';<separator>SELECT countrylanguage.language
FROM   countrylanguage join country on countrylanguage.countrycode = country.code
WHERE  country.headofstate = 'Beatrix' and country.name = countrylanguage.countryname and countrylanguage.isofficial = 'true';<separator>SELECT count(distinct countrylanguage.language) AS total_unique_official_languages
FROM   countrylanguage
         left join country on countrylanguage.countrycode = country.code
WHERE  country.indepyear < 1930;<separator>SELECT country.name,
       count(distinct countrylanguage.language) as total_distinct_official_languages
FROM   country
     LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode
WHERE  country.indepyear < 1930
GROUP BY country.name
ORDER BY total_distinct;<separator>WITH european_countries AS (
  SELECT country.name,
         country.surfacearea
  FROM   country
  WHERE  country.continent = 'European Union'
)
SELECT country.name
FROM   country
WHERE  country.surfacearea > (SELECT max(surfacearea)
                              FROM   europe;<separator>WITH country_area AS (
  SELECT country.name,
         country.surfacearea
  FROM   country
  WHERE  country.continent = 'Europe'
)
SELECT country.name
FROM   country
WHERE  country.surfacearea > (SELECT surfacearea
                              FROM   country_area)
ORDER BY country.;<separator>SELECT country.name
FROM   country
WHERE  country.continent = 'Africa'
   AND country.population < (SELECT population
                           FROM   country
                           WHERE  country.continent = 'Asia');<separator>SELECT country.name AS country_name,
       country.population AS country_population
FROM   country
WHERE  country.continent = 'Africa'
   AND country.population < (SELECT population
                            FROM   country
                            WHERE  country.continent = 'Asia')
ORDER BY country.population asc;<separator>SELECT country.name AS country_name,
       country.population AS country_population
FROM   country
WHERE  country.continent = 'Asia'
   AND country.population > (SELECT max(population)
                            FROM   country
                            WHERE  continent = 'Africa');<separator>SELECT country.name
FROM   country
WHERE  country.continent = 'Asia'
   AND country.population > (SELECT max(population)
                            FROM   country
                            WHERE  country.continent = 'Africa');<separator>SELECT country.code
FROM   country
WHERE  country.code not in (SELECT countrylanguage.countrycode
                            FROM   countrylanguage
                            WHERE  countrylanguage.language = 'English');<separator>SELECT country.code
FROM   country
WHERE  country.code not in (SELECT countrylanguage.countrycode
                            FROM   countrylanguage
                            WHERE  countrylanguage.language = 'English');<separator>SELECT country.code
FROM   country
WHERE  country.code not in (SELECT countrylanguage.countrycode
                            FROM   countrylanguage
                            WHERE  countrylanguage.language = 'English')
ORDER BY country.code;<separator>SELECT country.code
FROM   country
WHERE  country.code not in (SELECT countrylanguage.countrycode
                            FROM   countrylanguage
                            WHERE  countrylanguage.language!= 'English');<separator>SELECT country.code
FROM   country
WHERE  country.governmentform!= 'Republic'
   AND country.code not in (SELECT countrylanguage.countrycode
                           FROM   countrylanguage
                           WHERE  countrylanguage.language = 'English')
ORDER BY country.code;<separator>SELECT country.code
FROM   country
WHERE  country.governmentform!= 'Republic'
   AND country.code not in (SELECT countrylanguage.countrycode
                           FROM   countrylanguage
                           WHERE  countrylanguage.language = 'English')
ORDER BY country.code;<separator>SELECT DISTINCT city.name
FROM   city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode
WHERE  country.continent = 'Europe'
   AND countrylanguage.language!= 'English'
   AND countrylanguage.isofficial!= 'true';<separator>SELECT city.name
FROM   city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode
WHERE  country.continent = 'Europe'
   AND countrylanguage.language!= 'English'
ORDER BY city.name;<separator>SELECT DISTINCT city.name
FROM   city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode
WHERE  country.continent = 'Asia'
   AND countrylanguage.language = 'Chinese'
   AND countrylanguage.isofficial = 'Y';<separator>SELECT DISTINCT city.name
FROM   city join country on city.countrycode = country.code join countrylanguage on country.code = countrylanguage.countrycode
WHERE  country.continent = 'Asia' and countrylanguage.language = 'Chinese' and countrylanguage.isofficial = 'Y';<separator>SELECT country.name,
              country.indepyear,
              country.surfacearea
       FROM   country
       WHERE  country.population = (SELECT MIN(population)
                                   FROM   country)
       ORDER BY country.population asc;<separator>SELECT country.name,
              country.indepyear,
              country.surfacearea
       FROM   country
       WHERE  country.population = (SELECT MIN(population)
                                   FROM   country)
       ORDER BY country.population ASC;<separator>SELECT country.population,
       country.name,
       country.headofstate
FROM   country
WHERE  country.code = (SELECT country.code
                       FROM   country
                       ORDER BY country.surfacearea desc
                       LIMIT 1);<separator>SELECT country.name,
       country.population,
       country.head_of_state
FROM   country
WHERE  country.surface_area = (SELECT MAX(surface_area)
                               FROM   country)
ORDER BY country.surface_area DESC;<separator>SELECT country.name,
       count(countrylanguage.language) AS num_languages
FROM   country
  LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode
GROUP BY country.name
HAVING count(countrylanguage.language) >= 3
ORDER BY num_languages desc;<separator>SELECT country.name,
       count(countrylanguage.language) AS language_count
FROM   country
     LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode
GROUP BY country.name
HAVING count(countrylanguage.language) > 2
ORDER BY language_count DESC;<separator>SELECT city.district,
       count(*) AS num_cities
FROM   city
GROUP BY city.district
HAVING city.population > (SELECT avg(population)
                           FROM   city);<separator>SELECT city.district,
       count(*) AS num_cities
FROM   city
GROUP BY city.district
HAVING city.population > (SELECT avg(population)
                           FROM   city);<separator>SELECT country.governmentform,
       country.population
FROM   country
WHERE  country.lifeexpectancy > 72
ORDER BY country.governmentform;<separator>SELECT country.governmentform,
       sum(country.population) AS total_population
FROM   country
WHERE  country.lifeexpectancy > 72
GROUP BY country.governmentform
ORDER BY total_population DESC;<separator>SELECT country.continent,
       avg(country.lifeexpectancy) as avg_life_exp,
       sum(country.population) as total_pop
FROM   country
GROUP BY country.continent
HAVING avg(country.lifeexpectancy) < 72
ORDER BY avg_life_exp;<separator>SELECT country.continent,
       country.name,
       country.population,
       country.life_expectancy,
       country.avg_life_expectancy
FROM   country
WHERE  country.avg_life_expectancy < 72
ORDER BY country.continent, country.name;<separator>SELECT country.name,
       country.surfacearea
FROM   country
ORDER BY country.surfacearea desc
LIMIT 5;<separator>SELECT country.name,
       country.surfacearea
       FROM country
       ORDER BY country.surfacearea desc
       LIMIT 5;<separator>SELECT country.name
       FROM   country
       ORDER BY country.population DESC
       LIMIT 3;<separator>SELECT country.name
       FROM   country
       ORDER BY country.population DESC
       LIMIT 3;<separator>SELECT country.name
       FROM   country
       ORDER BY country.population asc
       LIMIT 3;<separator>SELECT country.name
FROM   country
ORDER BY country.population asc
LIMIT 3;<separator>SELECT count(*) AS count_of_countries_in_asia
FROM   country
WHERE  country.continent = 'Asia';<separator>SELECT count(*) AS count_of_countries_in_asia
FROM   country
WHERE  country.continent = 'Asia';<separator>SELECT country.name
       FROM   country
       WHERE  country.continent = 'Europe'
          and country.population = 80000;<separator>SELECT country.name
       FROM   country
       WHERE  country.continent = 'Europe'
          and country.population = 80000;<separator>SELECT country.continent,
       country.name,
       country.population,
       country.surfacearea,
       avg(country.surfacearea) OVER (PARTITION BY country.continent) AS avg_area
FROM   country
WHERE  country.continent = 'North America'
   AND country.surfacearea >;<separator>SELECT country.name,
       country.surfacearea,
       country.population,
       avg(country.surfacearea) OVER (PARTITION BY country.continent) AS avg_surface_area
FROM   country
WHERE  country.continent = 'North America'
   AND country.surfacearea > 3000;<separator>SELECT city.name
       FROM   city
       WHERE  city.population between 160000 and 900000;<separator>SELECT city.name
       FROM   city
       WHERE  city.population between 160000 and 900000;<separator>WITH country_language_count AS (
  SELECT countrylanguage.language,
         count(*) AS count
  FROM   countrylanguage
  GROUP BY countrylanguage.language
  ORDER BY count DESC
)
SELECT country_language_count.language
FROM   country_language_count
WHERE  country_language_count.count =;<separator>WITH country_language_count AS (
  SELECT countrylanguage.language,
         count(*) AS count
  FROM   countrylanguage
  GROUP BY countrylanguage.language
  ORDER BY count DESC)
SELECT country_language_count.language
FROM   country_language_count
WHERE  country_language_count.count = (;<separator>SELECT country.name,
       countrylanguage.language,
       countrylanguage.percentage
FROM   country
  LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode
ORDER BY countrylanguage.percentage desc nulls last, country.name;<separator>SELECT country.code,
       country.name,
       countrylanguage.language,
       countrylanguage.percentage
FROM   country
  LEFT JOIN countrylanguage
    ON country.code = countrylanguage.countrycode
ORDER BY countrylanguage.percentage desc;<separator>WITH country_spanish_speakers AS (
  SELECT country.name,
         country.code,
         countrylanguage.percentage
  FROM   country
         INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode
  WHERE  countrylanguage.language = 'Spanish'
)
SELECT country_spanish_speak;<separator>SELECT count(*)
FROM country
WHERE country.code in (SELECT countrylanguage.countrycode
                      FROM   countrylanguage
                      WHERE  countrylanguage.language = 'Spanish'
                         AND countrylanguage.isofficial = 'Y');<separator>SELECT country.code
FROM   country
JOIN   countrylanguage ON country.code = countrylanguage.countrycode
WHERE  countrylanguage.language = 'Spanish'
ORDER BY countrylanguage.percentage desc
LIMIT 1;<separator>SELECT country.code
FROM   country
WHERE  country.code in (SELECT countrylanguage.countrycode
                        FROM   countrylanguage
                        WHERE  countrylanguage.language = 'Spanish'
                        GROUP BY countrylanguage.countrycode
                        HAVING count(*) >= ALL (SELECT count(*)
                                              FROM   countrylanguage
                                              WHERE;<separator>SELECT count(*) as num_conductors
FROM   conductor;<separator>SELECT count(*) AS num_conductors
FROM   conductor;<separator>SELECT conductor.name
       FROM   conductor
       ORDER BY conductor.age asc;<separator>SELECT conductor.name
       FROM   conductor
       ORDER BY conductor.age asc;<separator>SELECT conductor.name
       FROM   conductor
       WHERE  conductor.nationality!= 'USA';<separator>SELECT conductor.name
       FROM   conductor
       WHERE  conductor.nationality!= 'USA';<separator>SELECT orchestra.record_company, orchestra.year_of_founded
       FROM   orchestra
       ORDER BY orchestra.year_of_founded desc;<separator>SELECT orchestra.record_company, orchestra.year_of_founded
       FROM   orchestra
       ORDER BY orchestra.year_of_founded DESC;<separator>SELECT AVG(show.attendance) AS average_attendance
FROM   show;<separator>SELECT AVG(show.attendance) AS average_attendance
FROM   show;<separator>SELECT MIN(performance.share::float) AS min_share,
       MAX(performance.share::float) AS max_share
FROM   performance
WHERE  performance.type!= 'Live final';<separator>SELECT MIN(performance.share::float), MAX(performance.share::float)
       FROM   performance
       WHERE  performance.type!= 'Live final';<separator>SELECT COUNT(DISTINCT conductor.nationality) AS num_different_nationalities
FROM   conductor;<separator>SELECT COUNT(DISTINCT conductor.nationality) AS num_different_nationalities
FROM   conductor;<separator>SELECT conductor.name
       FROM   conductor
       ORDER BY conductor.year_of_work DESC;<separator>SELECT conductor.name,
       conductor.age,
       conductor.year_of_work
FROM   conductor
ORDER BY conductor.year_of_work desc;<separator>SELECT conductor.name
       FROM   conductor
       ORDER BY conductor.year_of_work desc
       LIMIT 1;<separator>SELECT conductor.name
FROM   conductor
WHERE  conductor.year_of_work = (SELECT MAX(conductor.year_of_work)
                                FROM   conductor)
ORDER BY conductor.name;<separator>SELECT conductor.name,
          orchestra.orchestra
       FROM conductor
       JOIN orchestra
       ON conductor.conductor_id = orchestra.conductor_id;<separator>SELECT conductor.name,
       orchestra.orchestra
FROM   conductor join orchestra on conductor.conductor_id = orchestra.conductor_id
ORDER BY conductor.name;<separator>SELECT conductor.name
FROM   conductor
WHERE  conductor.conductor_id in (
    SELECT orchestra.conductor_id
    FROM   orchestra
    GROUP BY orchestra.conductor_id
    HAVING count(*) > 1)
ORDER BY conductor.name asc;<separator>SELECT conductor.name
FROM   conductor
WHERE  conductor.conductor_id in (
    SELECT orchestra.conductor_id
    FROM   orchestra
    GROUP BY orchestra.conductor_id
    HAVING count(*) > 1)
ORDER BY conductor.name;<separator>SELECT conductor.name
FROM conductor
JOIN orchestra on conductor.conductor_id = orchestra.conductor_id
GROUP BY conductor.name
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT conductor.name
FROM conductor
JOIN orchestra on conductor.conductor_id = orchestra.conductor_id
GROUP BY conductor.name
ORDER BY count(*) desc
LIMIT 1;<separator>SELECT conductor.name
FROM conductor
WHERE conductor.conductor_id in (
    SELECT orchestra.conductor_id
    FROM orchestra
    WHERE orchestra.year_of_founded > 2008)
ORDER BY conductor.name;<separator>SELECT conductor.name
       FROM   conductor join orchestra
               ON conductor.conductor_id = orchestra.conductor_id
       WHERE  conductor.year_of_work >= 2008;<separator>SELECT orchestra.record_company,
       count(orchestra.orchestra_id) as number_of_orchestras
FROM   orchestra
GROUP BY orchestra.record_company
ORDER BY number_of_orchestras desc;<separator>SELECT orchestra.record_company,
       count(orchestra.orchestra_id) as orchestra_count
FROM   orchestra
GROUP BY orchestra.record_company
ORDER BY orchestra_count desc;<separator>SELECT orchestra.Major_Record_Format,
       count(*) AS count
FROM   orchestra
GROUP BY orchestra.Major_Record_Format
ORDER BY count(*) ASC;<separator>SELECT orchestra.Major_Record_Format,
       count(*) AS frequency
FROM   orchestra
GROUP BY orchestra.Major_Record_Format
ORDER BY frequency desc;<separator>SELECT orchestra.record_company,
       count(*) as num_of_orchestras
FROM   orchestra
GROUP BY orchestra.record_company
ORDER BY num_of_orchestras desc
LIMIT 1;<separator>SELECT orchestra.record_company,
       count(*) as num_of_orchestras
FROM   orchestra
GROUP BY orchestra.record_company
ORDER BY num_of_orchestras desc
LIMIT 1;<separator>SELECT orchestra.orchestra
       FROM orchestra
       LEFT JOIN performance
       ON orchestra.Orchestra_ID = performance.Orchestra_ID
       WHERE performance.Performance_ID IS NULL;<separator>SELECT orchestra.orchestra
FROM orchestra
LEFT JOIN performance
ON orchestra.orchestra_id = performance.orchestra_id
WHERE performance.performance_id IS NULL;<separator>SELECT DISTINCT orchestra.record_company
FROM   orchestra
WHERE  orchestra.year_of_founded < 2003
   OR orchestra.year_of_founded > 2003;<separator>SELECT DISTINCT
    orchestra.record_company
FROM   orchestra
WHERE  orchestra.year_of_founded < 2003
INTERSECT
SELECT DISTINCT
    orchestra.record_company
FROM   orchestra
WHERE  orchestra.year_of_founded > 200;<separator>SELECT count(*)
FROM   orchestra
WHERE  orchestra.major_record_format in ('CD', 'DVD');<separator>SELECT count(*)
FROM   orchestra
WHERE  orchestra.major_record_format in ('CD', 'DVD');<separator>SELECT orchestra.year_of_founded
FROM   orchestra
WHERE  orchestra.orchestra_id in (SELECT orchestra_id
                                  FROM   performance
                                  GROUP BY orchestra_id having count(*) > 1)
ORDER BY orchestra.year_of_founded asc;<separator>SELECT orchestra.year_of_founded
FROM   orchestra
WHERE  orchestra.orchestra_id in (SELECT orchestra_id
                                  FROM   performance
                                  GROUP BY orchestra_id having count(*) > 1)
ORDER BY orchestra.year_of_founded asc;<separator>SELECT count(*) AS high_schoolers_count
       FROM   highschooler;<separator>SELECT count(*) AS high_schooler_count
       FROM   highschooler;<separator>SELECT highschooler.name,
       highschooler.grade
       FROM   highschooler
       ORDER BY highschooler.name;<separator>SELECT highschooler.name,
       highschooler.grade
      FROM   highschooler
      ORDER BY highschooler.name;<separator>SELECT highschooler.grade
       FROM   highschooler
       WHERE  highschooler.grade > 9
       ORDER BY highschooler.grade asc;<separator>SELECT highschooler.name,
          highschooler.grade
       FROM   highschooler
       ORDER BY highschooler.grade asc;<separator>SELECT highschooler.grade
       FROM   highschooler
       WHERE  highschooler.name = 'Kyle';<separator>SELECT highschooler.grade
       FROM   highschooler
       WHERE  highschooler.name = 'Kyle';<separator>SELECT highschooler.name
       FROM   highschooler
       WHERE  highschooler.grade = 10;<separator>SELECT highschooler.name
       FROM   highschooler
       WHERE  highschooler.grade = 10;<separator>SELECT highschooler.id
       FROM   highschooler
       WHERE  highschooler.name = 'Kyle';<separator>SELECT highschooler.id
      FROM   highschooler
      WHERE  highschooler.name = 'Kyle';<separator>SELECT count(*) AS num_high_schoolers
FROM   highschooler
WHERE  grade = 9
   OR grade = 10;<separator>SELECT count(*) AS num_high_schoolers
FROM   highschooler
WHERE  highschooler.grade in (9, 10);<separator>SELECT highschooler.grade,
          count(*) AS num_high_schoolers
       FROM   highschooler
       GROUP BY highschooler.grade
       ORDER BY highschooler.grade;<separator>SELECT highschooler.grade,
          count(*) AS count
       FROM   highschooler
       GROUP BY highschooler.grade
       ORDER BY highschooler.grade;<separator>SELECT highschooler.grade,
              count(*) AS num_highschoolers
       FROM   highschooler
       GROUP BY highschooler.grade
       ORDER BY num_highschoolers DESC
       LIMIT 1;<separator>SELECT highschooler.grade
       FROM   highschooler
       GROUP BY highschooler.grade
       ORDER BY count(*) desc
       LIMIT 1;<separator>SELECT DISTINCT hs.grade
FROM   highschooler hs
WHERE  hs.id in (SELECT friend.student_id
                 FROM   friend
                 WHERE  friend.friend_id in (SELECT hs.id
                                            FROM   highschooler hs
                                            GROUP BY hs.id
                                            HAVING count(*) >= 4));<separator>SELECT highschooler.grade
       FROM   highschooler
       WHERE  highschooler.grade >= 4
       GROUP BY highschooler.grade
       ORDER BY highschooler.grade;<separator>SELECT highschooler.id,
       count(friend.friend_id) AS num_friends
       FROM   highschooler
       LEFT JOIN friend ON highschooler.id = friend.student_id
       GROUP BY highschooler.id
       ORDER BY num_friends DESC;<separator>SELECT highschooler.id,
       count(friend.friend_id) AS num_friends
FROM   highschooler
         left join friend on highschooler.id = friend.student_id
GROUP BY highschooler.id;<separator>SELECT highschooler.name,
       count(friend.friend_id) AS number_of_friends
       FROM   highschooler
       LEFT JOIN friend ON highschooler.id = friend.student_id
       WHERE  highschooler.grade = 10
       GROUP BY highschooler.name
       ORDER BY number;<separator>SELECT highschooler.name,
       count(friend.friend_id) AS friend_count
FROM   highschooler
         left join friend on highschooler.id = friend.student_id
GROUP BY highschooler.name
ORDER BY friend_count desc;<separator>SELECT highschooler.name
       FROM   highschooler
       LEFT JOIN friend
           ON highschooler.id = friend.student_id
       GROUP BY highschooler.name
       ORDER BY count(*) desc
       LIMIT 1;<separator>WITH friend_counts AS (
  SELECT highschooler.name,
         count(*) AS friend_count
  FROM   friend join highschooler
          on friend.student_id = highschooler.id
  GROUP BY highschooler.name
  ORDER BY friend_count desc nulls last limit 1
)
SELECT;<separator>SELECT highschooler.name
FROM   highschooler join friend on highschooler.id = friend.student_id
GROUP BY highschooler.name
HAVING count(*) >= 3;<separator>SELECT highschooler.name
FROM   highschooler join friend on highschooler.id = friend.student_id
GROUP BY highschooler.name
HAVING count(*) >= 3;<separator>WITH kyle_friends AS (
  SELECT friend.friend_id
  FROM   friend
  WHERE  friend.student_id = 1000000
)
SELECT highschooler.name
FROM   highschooler, kyle_friends
WHERE  highschooler.id = kyle_;<separator>SELECT friend.friend_id,
              highschooler.name
       FROM   friend join highschooler on friend.friend_id = highschooler.id
       WHERE  friend.student_id = (SELECT id
                                  FROM   highschooler
                                  WHERE  name = 'Kyle');<separator>WITH kyle_friends AS (
  SELECT count(*) AS kyle_friend_count
  FROM   friend
  WHERE  friend.student_id = (SELECT id
                              FROM   highschooler
                              WHERE  name = 'Kyle')
)
SELECT kyle_friends.kyle_friend_count
FROM;<separator>WITH kyle_friends AS (
  SELECT count(*) AS kyle_friend_count
  FROM   friend
  WHERE  friend.student_id = (SELECT id
                              FROM   highschooler
                              WHERE  name = 'Kyle')
)
SELECT kyle_friends.kyle_friend_count;<separator>SELECT highschooler.id
      FROM   highschooler
      WHERE  highschooler.id not in (SELECT friend.student_id
                                     FROM   friend)
      ORDER BY highschooler.id asc;<separator>SELECT highschooler.id
      FROM   highschooler
      WHERE  highschooler.id not in (SELECT friend.student_id
                                     FROM   friend)
      AND highschooler.grade = 13;<separator>SELECT highschooler.name
       FROM   highschooler
       WHERE  highschooler.id not in (SELECT friend.student_id
                                     FROM   friend) and highschooler.grade = 13;<separator>SELECT highschooler.name
       FROM   highschooler
       WHERE  highschooler.id not in (SELECT friend.student_id
                                     FROM   friend);<separator>WITH friend_and_like AS (
  SELECT friend.student_id
  FROM   friend join highschooler on friend.friend_id = highschooler.id
  WHERE  friend.friend_id in (select distinct likes.liked_id from likes)
)
SELECT highschooler.id
FROM;<separator>WITH friend_ids AS (
  SELECT friend_id
  FROM   friend
  GROUP BY friend_id
  HAVING count(*) > 1
), liked_ids AS (
  SELECT student_id
  FROM   likes
  GROUP BY student_id
  HAVING count(*) > 0
)
SELECT friend;<separator>WITH friend_of_someone AS (
  SELECT friend.student_id
  FROM   friend
  GROUP  BY friend.student_id
  HAVING count(*) > 0
), liked_by_someone AS (
  SELECT likes.student_id
  FROM   likes
  GROUP  BY likes.student;<separator>SELECT highschooler.name
FROM   highschooler
WHERE  highschooler.id in (SELECT friend.student_id
                            FROM   friend
                            WHERE  friend.friend_id in (SELECT likes.liked_id
                                                      FROM   likes
                                                      WHERE  likes.student_id in (SELECT friend.student;<separator>SELECT highschooler.id,
       count(likes.student_id) AS number_of_likes
FROM   highschooler
       left join likes on highschooler.id = likes.student_id
GROUP BY highschooler.id
ORDER BY number_of_likes desc;<separator>SELECT highschooler.id,
       count(likes.student_id) AS likes_count
FROM   highschooler
       left join likes on highschooler.id = likes.student_id
GROUP BY highschooler.id
ORDER BY likes_count desc;<separator>SELECT highschooler.name,
       count(likes.student_id) AS num_of_likes
FROM   highschooler
       left join friend on highschooler.id = friend.student_id
       left join likes on highschooler.id = likes.student_id
WHERE  highschooler.;<separator>SELECT highschooler.name,
       count(likes.student_id) AS likes_count
FROM   highschooler
         left join friend on highschooler.id = friend.student_id
         left join likes on highschooler.id = likes.student_id
WHERE  friend.friend_id is;<separator>SELECT highschooler.name
       FROM   highschooler
       JOIN   (SELECT likes.student_id,
                     count(*) as num_likes
              FROM   likes
              GROUP BY likes.student_id
              ORDER BY num_likes desc
              limit 1) as top_liked_student on highschooler.id =;<separator>SELECT highschooler.name
       FROM   highschooler
       JOIN   (SELECT likes.student_id,
                     count(*) as likes_count
              FROM   likes
              GROUP BY likes.student_id
              ORDER BY likes_count desc
              limit 1) as most_liked_student on highschooler.id =;<separator>SELECT highschooler.name
FROM   highschooler,
       likes
WHERE  highschooler.id = likes.student_id
GROUP BY highschooler.name, highschooler.id
HAVING count(*) >= 2;<separator>SELECT highschooler.name
FROM   highschooler,
       likes
WHERE  highschooler.id = likes.student_id
GROUP BY highschooler.name, highschooler.id
HAVING count(*) >= 2;<separator>SELECT highschooler.name
       FROM   highschooler
       WHERE  highschooler.grade > 5
       GROUP BY highschooler.name
       HAVING count(*) >= 2;<separator>SELECT highschooler.name
FROM   highschooler join friend on highschooler.id = friend.student_id
WHERE  highschooler.grade > 5
GROUP BY highschooler.name
HAVING count(*) >= 2;<separator>SELECT count(*) AS kyle_likes
FROM   Likes
WHERE  Likes.student_id = (SELECT ID
                           FROM   Highschooler
                           WHERE  name = 'Kyle');<separator>SELECT count(*) AS kyle_likes
  FROM   Likes
  WHERE  Likes.student_id = (SELECT ID
                             FROM   Highschooler
                             WHERE  name = 'Kyle');<separator>WITH student_friends AS (
  SELECT friend.student_id,
         friend.friend_id
  FROM   friend
  GROUP  BY friend.student_id, friend.friend_id
  HAVING count(*) > 0
)
SELECT avg(highschooler.grade) AS average_grade
FROM;<separator>WITH student_friends AS (
  SELECT friend.student_id,
         friend.friend_id
  FROM   friend
  WHERE  friend.friend_id IS NOT NULL
  GROUP BY friend.student_id, friend.friend_id
)
SELECT avg(highschooler.grade) AS average_grade
FROM;<separator>SELECT min(hs.grade) AS min_grade
       FROM   highschooler hs
       WHERE  hs.id not in (SELECT friend.student_id
                           FROM   friend);<separator>SELECT min(hs.grade) AS lowest_grade
       FROM   highschooler hs
       WHERE  hs.id not in (SELECT friend.student_id
                           FROM   friend);<separator>WITH owner_states AS (
  SELECT DISTINCT state
  FROM   owners
), prof_states AS (
  SELECT DISTINCT state
  FROM   professionals
)
SELECT DISTINCT state
FROM   owner_states
INTERSECT
SELECT DISTINCT state
FROM   prof_states;<separator>WITH owner_states AS (
  SELECT DISTINCT state
  FROM   owners
), prof_states AS (
  SELECT DISTINCT state
  FROM   professionals
)
SELECT DISTINCT state
FROM   owner_states
INTERSECT
SELECT DISTINCT state
FROM   prof_states;<separator>SELECT avg(dogs.age::float) AS average_age
FROM   dogs
WHERE  dogs.dog_id in (SELECT treatments.dog_id
                       FROM   treatments);<separator>SELECT avg(dogs.age::float) AS average_age
FROM   dogs
WHERE  dogs.dog_id in (SELECT treatments.dog_id
                       FROM   treatments);<separator>SELECT p.professional_id,
       p.last_name,
       p.cell_number
FROM   professionals p
WHERE  p.state = 'Indiana'
   or (SELECT count(*)
     FROM   treatments t
     WHERE  t.professional_id = p.professional_;<separator>SELECT p.professional_id,
       p.last_name,
       p.cell_number
FROM   professionals p
WHERE  p.state = 'Indiana'
   or (SELECT count(*)
     FROM   treatments t
     WHERE  t.professional_id = p.professional_;<separator>SELECT DISTINCT d.name
FROM   dog d
WHERE  d.owner_id NOT IN (SELECT o.owner_id
                          FROM   owner o
                          WHERE  o.owner_id in (SELECT d.owner_id
                                              FROM   dog d
                                              WHERE  d.dog_id in (SELECT t.dog;<separator>SELECT DISTINCT dogs.name
FROM   dogs
WHERE  dogs.owner_id NOT IN (SELECT treatments.dog_id
                             FROM   treatments
                             WHERE  treatments.cost_of_treatment > 1000);<separator>SELECT DISTINCT professionals.first_name
FROM   professionals
WHERE  professionals.first_name NOT IN (SELECT dog.name
                                        FROM   dog)
UNION
SELECT DISTINCT owners.first_name
FROM   owners
WHERE  owners.first_name NOT IN (SELECT dog.name;<separator>SELECT DISTINCT professionals.first_name
FROM   professionals
WHERE  professionals.first_name NOT IN (SELECT dog.name
                                        FROM   dog)
UNION
SELECT DISTINCT owners.first_name
FROM   owners
WHERE  owners.first_name NOT IN (SELECT dog.name;<separator>SELECT p.professional_id,
       p.role_code,
       p.email_address
FROM   professionals p
WHERE  p.professional_id not in (SELECT t.professional_id
                                 FROM   treatments t
                                 WHERE  t.dog_id in (SELECT d.dog;<separator>SELECT prof.professional_id,
              prof.role_code,
              prof.email_address
       FROM   professionals prof
       WHERE  prof.professional_id not in (SELECT prof.professional_id
                                          FROM   professionals prof
                                          JOIN  treatments trt on prof.professional_id;<separator>SELECT owners.owner_id,
              owners.first_name,
              owners.last_name
       FROM   owners
       LEFT JOIN (SELECT dog_id,
                         owner_id
                  FROM   dogs) AS owned_dogs ON owners.owner_id = owned_dogs.owner_id
       WHERE  owned_;<separator>SELECT owners.owner_id,
              owners.first_name,
              owners.last_name
       FROM   owners
       WHERE  owners.owner_id in (SELECT dog.owner_id
                                 FROM   dog
                                 GROUP BY dog.owner_id
                                 ORDER BY count(*) DESC
                                 LIMIT 1);<separator>SELECT p.professional_id,
       p.role_code,
       p.first_name
FROM   professionals p
WHERE  p.professional_id in (SELECT t.professional_id
                             FROM   treatments t
                             GROUP BY t.professional_id
                             HAVING count(*);<separator>SELECT p.professional_id,
       p.role_code,
       p.first_name
FROM   professionals p
WHERE  p.professional_id in (SELECT t.professional_id
                             FROM   treatments t
                             GROUP BY t.professional_id
                             HAVING count(*);<separator>SELECT breeds.breed_name
       FROM   breeds
       LEFT JOIN (SELECT breed_code,
                         count(*) AS dog_count
                  FROM   dogs
                  GROUP BY breed_code) AS dog_counts ON breeds.breed_code = dog_counts.breed_code;<separator>SELECT breeds.breed_name
       FROM   breeds
       JOIN   (SELECT breed_code,
                      count(*) AS count
               FROM   dogs
               GROUP BY breed_code
               ORDER BY count(*) DESC
               LIMIT 1) AS most_popular_breed_dogs
       ON breeds;<separator>SELECT o.owner_id,
       o.last_name
FROM   (SELECT d.owner_id,
                d.dog_id,
                count(*) as num_treatments
         FROM   dog d
         LEFT JOIN treatments t on d.dog_id = t.dog_id
         WHERE  d;<separator>SELECT o.owner_id,
       o.last_name
FROM   (SELECT d.owner_id,
                o.last_name,
                sum(t.cost_of_treatment) as total_cost
         FROM   dog d join treatments t on d.dog_id = t.dog_;<separator>SELECT treatment_types.treatment_type_description
FROM   treatment_types
WHERE  treatment_types.treatment_type_code in (SELECT treatments.treatment_type_code
                                               FROM   treatments
                                               ORDER BY treatments.cost_of_treatment asc
                                               LIMIT 1);<separator>SELECT treatment_types.treatment_type_description
FROM   treatment_types
WHERE  treatment_types.treatment_type_code in (SELECT treatments.treatment_type_code
                                               FROM   treatments
                                               ORDER BY treatments.cost_of_treatment asc
                                               LIMIT 1);<separator>SELECT owners.owner_id,
       owners.zip_code
FROM   owners
WHERE  owners.owner_id in (SELECT dog.owner_id
                           FROM   dog
                           WHERE  dog.dog_id in (SELECT treat.dog_id
                                                 FROM   treat
                                                 WHERE  treat.professional_id in;<separator>SELECT owners.owner_id,
       owners.zip_code
FROM   owners
WHERE  owners.owner_id in (SELECT dog.owner_id
                           FROM   dog
                           WHERE  dog.dog_id in (SELECT treat.dog_id
                                                 FROM   treat
                                                 WHERE  treat.professional_id in;<separator>SELECT p.professional_id,
       p.cell_number
FROM   professionals p
WHERE  p.professional_id in (SELECT t.professional_id
                             FROM   treatments t
                             GROUP BY t.professional_id
                             HAVING count(t.treatment_type_;<separator>SELECT DISTINCT p.professional_id, p.cell_number
FROM   professionals p
WHERE  p.professional_id in (SELECT t.professional_id
                             FROM   treatments t
                             GROUP BY t.professional_id
                             HAVING count(*) >= 2)
ORDER BY;<separator>SELECT p.first_name,
       p.last_name
FROM   professionals p
WHERE  p.professional_id in (SELECT t.professional_id
                             FROM   treatments t
                             WHERE  t.cost_of_treatment < (SELECT avg(cost_of_treatment);<separator>WITH avg_treatment_cost AS (
  SELECT avg(cost_of_treatment) AS avg_cost
  FROM   treatments
)
SELECT p.first_name,
       p.last_name
FROM   professionals p
JOIN   treatments t on p.professional_id = t;<separator>SELECT treatments.date_of_treatment,
              professionals.first_name
       FROM   treatments
              JOIN professionals ON treatments.professional_id = professionals.professional_id
       ORDER BY treatments.date_of_treatment asc;<separator>SELECT treatments.date_of_treatment,
              professionals.first_name
       FROM   treatments
              JOIN professionals ON treatments.professional_id = professionals.professional_id
       ORDER BY treatments.date_of_treatment asc;<separator>SELECT treatments.treatment_id,
              treatments.cost_of_treatment,
              treatment_types.treatment_type_description
       FROM   treatments join treatment_types
               ON treatments.treatment_type_code = treatment_types.treatment_type_code
       ORDER BY treatments.;<separator>SELECT treatments.treatment_id,
       treatments.cost_of_treatment,
       treatment_types.treatment_type_description
FROM   treatments join treatment_types on treatments.treatment_type_code = treatment_types.treatment_type_code
ORDER BY treatments.;<separator>SELECT owners.first_name,
              owners.last_name,
              sizes.size_description
       FROM   owners join dogs on owners.owner_id = dogs.owner_id join sizes on dogs.size_code = sizes.size_code
       WHERE  owners.owner_id = dogs.owner;<separator>SELECT owners.first_name,
              owners.last_name,
              sizes.size_description
       FROM   owners
       LEFT JOIN dogs on owners.owner_id = dogs.owner_id
       LEFT JOIN sizes on dogs.size_code = sizes.size_code;<separator>SELECT o.first_name, d.name
       FROM   owners o,
             dogs d
       WHERE  o.owner_id = d.owner_id;<separator>SELECT owners.first_name,
              dogs.name
       FROM   owners
             left join dogs on owners.owner_id = dogs.owner_id
       ORDER BY owners.first_name;<separator>SELECT dog.name,
              treatment.date_of_treatment
       FROM   dog
       LEFT JOIN (SELECT dog_id,
                         date_of_treatment
                  FROM   treatments
                  ORDER BY date_of_treatment ASC NULLS FIRST) treatment ON dog.dog_id = treatment.dog_id
       WHERE;<separator>SELECT d.name,
       tt.treatment_type_description
FROM   (SELECT d.dog_id,
                d.name,
                d.date_of_birth,
                d.date_of_treatment
         FROM   Dogs d
         WHERE  d.breed_code = (SELECT b;<separator>SELECT owners.first_name,
              dogs.name
       FROM   dogs join owners on dogs.owner_id = owners.owner_id
       WHERE  owners.state = 'Virginia';<separator>SELECT o.first_name, d.name
      FROM   owners o join dogs d on o.owner_id = d.owner_id
      WHERE  o.state = 'VA';<separator>SELECT dog_id,
              date_of_birth,
              date_arrived,
              date_departed
       FROM   (SELECT dog_id,
                      date_of_birth,
                      date_arrived,
                      date_departed
               FROM   dogsdatabase.dogs
               WHERE  dog_id in (SELECT;<separator>SELECT dog_id,
              date_of_birth,
              date_arrived,
              date_departed
       FROM   (SELECT dog_id,
                      date_of_birth,
                      date_arrived,
                      date_departed
               FROM   dog_table
               WHERE  dog_id in (SELECT dog_id;<separator>SELECT o.last_name
       FROM   (SELECT d.owner_id,
                      d.date_of_birth
               FROM   Dogs d
               WHERE  d.owner_id is not null
               ORDER BY d.date_of_birth asc) t inner join Owners o on t.owner_id = o;<separator>SELECT o.last_name
      FROM   (SELECT d.dog_id,
                     d.owner_id,
                     o.last_name
              FROM   Dogs d
              JOIN   Owners o ON d.owner_id = o.owner_id
              WHERE  d.age = 'Puppy'
              ORDER;<separator>SELECT professionals.email_address
       FROM   professionals
       WHERE  professionals.state = 'Hawaii'
          or professionals.state = 'Wisconsin';<separator>SELECT DISTINCT professionals.email_address
       FROM   professionals
       WHERE  professionals.state in ('Hawaii', 'Wisconsin');<separator>SELECT dog_id,
              date_of_birth,
              date_arrived,
              date_departed
       FROM   dogs
       ORDER BY dog_id;<separator>SELECT dog_id,
              date_of_birth,
              date_arrived,
              date_departed
       FROM   dogs
       ORDER BY dog_id;<separator>SELECT count(*) AS num_dogs_treated
FROM   (SELECT DISTINCT dog_id
        FROM   Treatments) AS treated_dogs;<separator>SELECT count(*) AS num_dogs_treated
  FROM   dog_table
  WHERE  dog_id in (SELECT dog_id
                     FROM   treatments);<separator>SELECT count(distinct p.professional_id) as num_professionals
FROM   professionals p
LEFT JOIN treatments t
  ON p.professional_id = t.professional_id
WHERE  t.dog_id is not null;<separator>SELECT count(distinct p.professional_id) as num_professionals
FROM   professionals p
WHERE  p.professional_id in (SELECT t.professional_id
                             FROM   treatments t
                             WHERE  t.dog_id in (SELECT d.dog_id
                                                 FROM;<separator>SELECT professionals.role_code,
              professionals.first_name,
              professionals.street,
              professionals.city,
              professionals.state
         FROM professionals
         WHERE professionals.city ilike '%West%'
         ORDER BY professionals.role_code, profession;<separator>SELECT professionals.role_code,
              professionals.street,
              professionals.city,
              professionals.state
         FROM professionals
         WHERE professionals.city ilike '%West%'
         ORDER BY professionals.role_code;<separator>SELECT owners.first_name,
              owners.last_name,
              owners.email_address
       FROM   owners
       WHERE  owners.state like '%North%'
       ORDER BY owners.first_name, owners.last_name;<separator>SELECT owners.first_name,
              owners.last_name,
              owners.email_address
       FROM   owners
       WHERE  owners.state like '%North%';<separator>WITH avg_age AS (
  SELECT avg(cast(Dogs.age as float)) as avg_age
  FROM   Dogs
)
SELECT count(*)
FROM   Dogs
WHERE  cast(Dogs.age as float) < (SELECT avg_age from avg_age);<separator>SELECT count(*)
FROM   (SELECT dog_id
        FROM   dogs
        WHERE  age::float < (SELECT avg(age::float)
                             FROM   dogs)) as subquery;<separator>SELECT treatments.cost_of_treatment
FROM   treatments
WHERE  treatments.treatment_id = (SELECT MAX(treatments.treatment_id)
                                 FROM   treatments);<separator>SELECT treatments.cost_of_treatment
FROM   treatments
WHERE  treatments.date_of_treatment = (SELECT MAX(treatments.date_of_treatment)
                                       FROM   treatments)
ORDER BY treatments.cost_of_treatment DESC;<separator>SELECT count(*) AS num_dogs_without_treatment
FROM   (SELECT dog_id
        FROM   Dogs
        WHERE  dog_id not in (SELECT dog_id
                              FROM   Treatments)) AS dog_ids_without_treatment;<separator>SELECT count(*) AS num_dogs_without_treatment
FROM   dog
WHERE  dog.dog_id not in (SELECT dog_id
                           FROM   treatments);<separator>SELECT count(*) AS "Number of owners temporarily do not have any dogs"
FROM   (SELECT DISTINCT owners.owner_id
        FROM   owners
        LEFT JOIN dogs on owners.owner_id = dogs.owner_id
        WHERE  dogs.dog_id is null
        AND    owners.owner_;<separator>SELECT count(*) AS "Number of owners who do not own any dogs at this moment."
FROM   owners
WHERE  owner_id not in (select owner_id from dogs);<separator>SELECT count(*) AS num_professionals_without_treatment
FROM   professionals
WHERE  professional_id not in (SELECT professional_id
                                FROM   treatments);<separator>SELECT count(*) AS num_professionals_without_treating_dogs
FROM   professionals p
WHERE  p.professional_id not in (select professional_id
                                 from   treatments);<separator>SELECT dog_id,
              name,
              age,
              weight
       FROM   dogs
       WHERE  abandoned_yn = '1';<separator>SELECT dog_id,
              name,
              age,
              weight
       FROM   dogs
       WHERE  abandoned_yn = '1';<separator>SELECT AVG(CAST(Dogs.age AS float)) AS average_age
      FROM   Dogs;<separator>SELECT AVG(CAST(Dogs.age AS float)) AS average_age
      FROM   Dogs;<separator>SELECT dog_id,
              age
       FROM   (SELECT dog_id,
                      age
               FROM   dogs
               WHERE  age!= ''
               ORDER BY age asc) AS oldest_dog
       LIMIT  1;<separator>SELECT dog_id,
              age
       FROM   (SELECT dog_id,
                      age
               FROM   dogs
               WHERE  age!= ''
               ORDER BY age asc) AS oldest_dog
       LIMIT  1;<separator>SELECT charges.charge_type,
              charges.charge_amount
       FROM   charges
       ORDER BY charges.charge_type;<separator>SELECT charges.charge_type,
              charges.charge_amount
       FROM   charges
       ORDER BY charges.charge_type;<separator>SELECT max(charged_amount)::float AS most_expensive_charge_type_cost
      FROM   charges
      WHERE  charge_type = 'Most Expensive Charge Type';<separator>SELECT max(charges.charge_amount) AS most_expensive_charge_amount
  FROM   charges;<separator>SELECT professionals.email_address,
              professionals.cell_number,
              professionals.home_phone
       FROM   professionals;<separator>SELECT professionals.first_name,
              professionals.last_name,
              professionals.email_address,
              professionals.cell_number,
              professionals.home_phone
       FROM   professionals;<separator>SELECT breeds.breed_name,
              sizes.size_description
       FROM   breeds, sizes
       WHERE  breeds.breed_code = sizes.size_code
       GROUP BY breeds.breed_name, sizes.size_description
       ORDER BY breeds.breed_;<separator>SELECT DISTINCT breeds.breed_name,
                       sizes.size_description
        FROM dogs
        JOIN breeds ON dogs.breed_code = breeds.breed_code
        JOIN sizes ON dogs.size_code = sizes.size_code;<separator>SELECT professionals.first_name,
              treatments.treatment_type_description
       FROM   professionals
              LEFT JOIN treatments
                     ON professionals.professional_id = treatments.professional_id
       ORDER BY professionals.first_name;<separator>SELECT p.first_name,
       t.treatment_type_description
FROM   professionals p join treatments t on p.professional_id = t.professional_id;<separator>SELECT count(*) AS num_singers
FROM singer;<separator>SELECT count(*) AS count_of_singers
       FROM   singer;<separator>SELECT singer.name
       FROM   singer
       ORDER BY singer.net_worth_millions asc;<separator>SELECT singer.name
       FROM   singer
       ORDER BY singer.net_worth_millions asc;<separator>SELECT singer.birth_year,
       singer.citizenship
      FROM singer
      ORDER BY singer.birth_year asc;<separator>SELECT singer.name,
              singer.birth_year,
              singer.citizenship
       FROM   singer
       ORDER BY singer.name;<separator>SELECT singer.name
       FROM   singer
       WHERE  singer.citizenship!= 'France';<separator>SELECT singer.name
       FROM   singer
       WHERE  singer.citizenship!= 'France';<separator>SELECT singer.name
       FROM   singer
       WHERE  singer.birth_year in (1948, 1949);<separator>SELECT singer.name
       FROM   singer
       WHERE  singer.birth_year = 1948
       UNION
       SELECT singer.name
       FROM   singer
       WHERE  singer.birth_year = 1949;<separator>SELECT singer.name
FROM   singer
WHERE  singer.net_worth_millions = (SELECT MAX(singer.net_worth_millions)
                                    FROM   singer)
ORDER BY singer.net_worth_millions DESC;<separator>SELECT singer.name
FROM   singer
WHERE  singer.net_worth_millions = (SELECT MAX(singer.net_worth_millions)
                                    FROM   singer);<separator>SELECT singer.citizenship,
       count(*) AS number_of_singers
FROM   singer
GROUP BY singer.citizenship
ORDER BY number_of_singers desc;<separator>SELECT singer.citizenship,
       count(*) AS num_singers
FROM   singer
GROUP BY singer.citizenship
ORDER BY num_singers desc;<separator>SELECT singer.citizenship AS most_common_citizenship,
              count(*) AS frequency
       FROM   singer
       GROUP BY singer.citizenship
       ORDER BY frequency DESC
       LIMIT 1;<separator>SELECT singer.citizenship,
       count(*) AS frequency
FROM   singer
GROUP BY singer.citizenship
ORDER BY frequency DESC
LIMIT 1;<separator>SELECT singer.citizenship,
       max(singer.net_worth_millions) AS max_net_worth
FROM   singer
GROUP BY singer.citizenship
ORDER BY max_net_worth desc;<separator>SELECT singer.citizenship,
       max(singer.net_worth_millions) AS max_net_worth
FROM   singer
GROUP BY singer.citizenship
HAVING max(singer.net_worth_millions) > 0;<separator>SELECT song.title, singer.name
FROM   song join singer on song.singer_id = singer.singer_id;<separator>SELECT song.title, singer.name
FROM   song join singer on song.singer_id = singer.singer_id;<separator>SELECT DISTINCT singer.name
FROM   singer join song on singer.singer_id = song.singer_id
WHERE  song.sales > 300000;<separator>SELECT DISTINCT singer.name
FROM   singer join song on singer.singer_id = song.singer_id
WHERE  song.sales > 300000;<separator>SELECT singer.name
FROM   singer join song on singer.singer_id = song.singer_id
GROUP BY singer.name
HAVING count(*) > 1;<separator>SELECT singer.name
FROM   singer
JOIN   song on singer.singer_id = song.singer_id
GROUP BY singer.name
HAVING count(*) > 1;<separator>SELECT singer.name,
       sum(song.sales) as total_sales
FROM   singer join song on singer.singer_id = song.singer_id
GROUP BY singer.name
ORDER BY total_sales desc;<separator>SELECT singer.name,
       sum(song.sales) AS total_sales
FROM   singer join song on singer.singer_id = song.singer_id
GROUP BY singer.name
ORDER BY total_sales desc;<separator>SELECT singer.name
FROM   singer
WHERE  singer.Singer_ID not in (SELECT song.singer_id
                                FROM   song);<separator>SELECT singer.name
FROM   singer
WHERE  singer.Singer_ID not in (SELECT song.singer_id
                                FROM   song);<separator>SELECT DISTINCT singer.citizenship
       FROM   singer
       WHERE  singer.birth_year between 1945 and 1955;<separator>SELECT DISTINCT singer.citizenship
FROM   singer
WHERE  singer.birth_year between 1945 and 1955;<separator>SELECT count(*) AS total_features
FROM   other_available_features;<separator>SELECT ref_feature_types.feature_type_name
       FROM   ref_feature_types
       WHERE  ref_feature_types.feature_type_code = 'AIRCON';<separator>SELECT properties.property_type_code,
              ref_property_types.property_type_description
       FROM   properties
              LEFT JOIN ref_property_types
                      ON properties.property_type_code = ref_property_types.property_type_code
       WHERE  properties.property_type_code = 'PROPTYPE;<separator>SELECT properties.property_name
       FROM   properties
       WHERE  properties.property_type_code in ('H', 'A')
          and properties.room_count > 1;