SELECT count(*) FROM singer;
SELECT count(*) FROM singer;
SELECT name, country, age FROM singer ORDER BY age ASC;
SELECT name, country, age FROM singer ORDER BY age DESC;
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France';
SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France' AND is_male = false;
SELECT name, song_release_year FROM singer WHERE age = (SELECT min(age) FROM singer) ORDER BY name;
SELECT name, song_release_year FROM singer WHERE age = (SELECT min(age) FROM singer) ORDER BY name;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT DISTINCT country FROM singer WHERE age > 20;
SELECT country, count(*) FROM singer GROUP BY country ORDER BY num_of_singers desc;
SELECT country, count(*) FROM singer GROUP BY country ORDER BY num_singers desc;
SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name asc;
SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name;
SELECT location, name FROM stadium WHERE capacity between 5000 and 10000;
SELECT location, name FROM stadium WHERE capacity between 5000 and 10000;
SELECT max(capacity), avg(capacity) FROM stadium;
SELECT name, capacity, highest, lowest, average FROM stadium ORDER BY name;
SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY average desc LIMIT 1);
SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY average desc LIMIT 1);
SELECT count(*) FROM concert WHERE year in ('2014', '2015');
SELECT count(*) FROM concert WHERE year in ('2014', '2015');
SELECT name, count(concert_id) FROM stadium join concert on stadium_id = stadium_id GROUP BY name ORDER BY num_concerts desc;
SELECT name, count(concert_id) FROM stadium join concert on stadium_id = stadium_id GROUP BY name ORDER BY concert_count desc;
SELECT name, capacity FROM stadium JOIN (SELECT stadium_id, count(*) FROM concert WHERE year >= '2014' GROUP BY stadium_id;
SELECT name, capacity FROM stadium WHERE stadium_id in (SELECT stadium_id FROM concert WHERE year > '2013' GROUP BY stadium_id ORDER;
SELECT year, count(*) FROM concert GROUP BY year ORDER BY num_of_concerts desc LIMIT 1;
SELECT year, count(*) FROM concert GROUP BY year ORDER BY num_concerts desc LIMIT 1;
SELECT DISTINCT name FROM stadium WHERE stadium_id not in (SELECT stadium_id FROM concert);
SELECT name FROM stadium WHERE stadium_id not in (SELECT stadium_id FROM concert);
SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30;
SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014');
SELECT name FROM stadium WHERE stadium_id not in (SELECT stadium_id FROM concert WHERE year = '2014');
SELECT concert_ID, concert_name, theme, count(singer_id) FROM concert left join singer_in_concert on con;
SELECT concert_ID, concert_name, theme, count(singer_id) FROM concert join singer_in_concert on concert_;
SELECT name, count(concert_id) FROM singer left join singer_in_concert on singer_id = singer_id;
SELECT name, count(concert_id) FROM singer_in_concert join singer on singer_id = singer_id GROUP BY s;
SELECT DISTINCT name FROM singer, singer_in_concert, concert WHERE singer_id = singer_id AND concert_id = concert_id;
SELECT DISTINCT name FROM singer_in_concert join singer on singer_id = singer_id WHERE concert_id in (SELECT concert_id FROM concert;
SELECT name, country FROM singer WHERE song_name ilike '%Hey%';
SELECT name, country FROM singer WHERE song_name ilike '%Hey%' ORDER BY name;
SELECT DISTINCT name, location FROM stadium WHERE stadium_id in (SELECT stadium_id FROM concert WHERE year = '2014' or year = '2015;
SELECT DISTINCT name, location FROM stadium WHERE stadium_id in (SELECT stadium_id FROM concert WHERE year = '2014' or year = '2015;
SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity = (SELECT max(capacity) FROM stadium));
SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity = (SELECT max(capacity) FROM stadium));
SELECT count(*) FROM pets WHERE weight > 10;
SELECT count(*) FROM pets WHERE weight > 10;
SELECT min(weight) FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets);
SELECT min(weight) FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets);
SELECT pet_type, max(weight) FROM pets GROUP BY pet_type ORDER BY max_weight DESC;
SELECT pet_type, max(weight) FROM pets GROUP BY pet_type ORDER BY max_weight DESC;
SELECT count(*) FROM has_pet WHERE stuid in (select stuid from student where age > 20);
SELECT count(*) FROM has_pet hp join student s on stuid = stuid WHERE age > 20;
SELECT count(*) FROM (SELECT DISTINCT petid FROM has_pet join student on stuid = stuid WHERE sex = 'F' and pettype = 'dog');
SELECT count(*) FROM has_pet join student on stuid = stuid join pets on petid = petid WHERE sex = 'F' and pet;
SELECT COUNT(DISTINCT pet_type) FROM pets;
SELECT COUNT(DISTINCT pet_type) FROM pets;
SELECT fname FROM student WHERE stuid in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pets WHERE pettype = 'cat' or pets;
SELECT first_name FROM student WHERE stuid in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pets WHERE pettype = 'cat' or;
SELECT fname FROM student WHERE stuid in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pets WHERE pettype = 'cat' or ;
SELECT DISTINCT fname FROM student join has_pet on stuid = stuid join pets on petid = petid WHERE pettype = 'cat' or pettype = 'dog';
SELECT major, age FROM student WHERE stuid not in (select stuid from has_pet where petid = 1);
SELECT major, age FROM student WHERE stuid not in (select stuid from has_pet where petid = 1) ORDER BY major asc, age asc;
SELECT stuid FROM student WHERE stuid not in (SELECT stuid FROM has_pet WHERE petid = (SELECT petid FROM pets WHERE pettype = 'cat'));
SELECT stuid FROM student WHERE stuid not in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pet WHERE pettype = 'cat'));
SELECT first_name, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid = 1) and stuid NOT IN (SELECT stuid;
SELECT first_name FROM student WHERE stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'dog'));
SELECT pet_type, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY pet_type asc, weight asc;
SELECT pet_type, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY pet_type asc;
SELECT petid, weight FROM pets WHERE pet_age < 1;
SELECT petid, weight FROM pets WHERE pet_age > 1;
SELECT pet_type, avg(pet_age), max(pet_age) FROM pets GROUP BY pet_type ORDER BY avg_age desc, max_age desc;
SELECT pet_type, avg(pet_age), max(pet_age) FROM pets GROUP BY pet_type ORDER BY avg_age desc;
SELECT pet_type, avg(weight) FROM pets GROUP BY pet_type ORDER BY avg_weight desc;
SELECT pet_type, avg(weight) FROM pets GROUP BY pet_type ORDER BY avg_weight desc;
SELECT first_name, age FROM student WHERE stuid in (SELECT stuid FROM has_pet);
SELECT DISTINCT first_name, age FROM student WHERE stuid in (SELECT stuid FROM has_pet);
SELECT petid FROM has_pet JOIN student ON stuid = stuid WHERE lname = 'Smith';
SELECT petid FROM has_pet join student on stuid = stuid WHERE lname = 'Smith';
SELECT stuid, count(petid) FROM student left join has_pet on stuid = stuid GROUP BY stuid HAVING count(petid) > 0;
SELECT stuid, count(petid) FROM student left join has_pet on stuid = stuid GROUP BY stuid HAVING count(petid) > 0 ORDER BY;
WITH student_with_multiple_pets SELECT stuid, fname, gender FROM student JOIN has_pet on stuid = stuid GROUP BY stuid, fname, gender HAV;
SELECT DISTINCT first_name, gender FROM student WHERE stuid in (SELECT stuid FROM has_pet GROUP BY stuid having count(*) > 1) ORDER BY first_name;
SELECT lname FROM student join has_pet on stuid = stuid join pets on petid = petid WHERE pet_age = 3;
SELECT lname FROM student join has_pet on stuid = stuid join pets on petid = petid WHERE pet_age = 3 and pettype = 'cat' ORDER BY student;
SELECT avg(age) FROM student WHERE stuid not in (select stuid from has_pet);
SELECT avg(age) FROM student WHERE stuid not in (select stuid from has_pet);
SELECT COUNT(DISTINCT continent) FROM continents;
SELECT COUNT(*) FROM continents;
SELECT cont_id, continent_name, count(distinct country_id) FROM countries join continents on continent = cont_id GROUP BY cont_id, continent_;
SELECT cont_id, continent_name, count(distinct country_id) FROM continents LEFT JOIN countries ON cont_id = continent GROUP BY cont_id, continent;
SELECT count(*) FROM countries;
SELECT COUNT(*) FROM countries;
SELECT maker, id, count(*) FROM car_makers LEFT JOIN model_list ON id = maker GROUP BY maker, id ORDER;
SELECT maker, id, count(model) FROM car_makers left join model_list on id = maker GROUP BY maker, car_;
SELECT model FROM car_names JOIN cars_data on makeid = id WHERE horsepower = (SELECT min(horsepower) FROM cars_data) ORDER BY car_names;
SELECT model FROM car_names JOIN cars_data ON makeid = id ORDER BY horsepower::float asc LIMIT 1;
WITH avg_weight SELECT avg(weight) FROM cars_data ) SELECT model FROM car_names, cars_data, avg_weight WHERE weight < avg_weight ORDER;
WITH avg_weight SELECT avg(weight) FROM cars_data ) SELECT model FROM car_names, cars_data WHERE weight < (SELECT avg_weight FROM avg_weight);
SELECT DISTINCT maker FROM car_makers, car_names, cars_data WHERE id = makeid AND makeid = id AND year = 1970;
SELECT DISTINCT maker FROM car_makers, car_names, cars_data WHERE id = makeid AND makeid = id AND year = 1970;
SELECT maker, year FROM car_makers join car_names on id = makeid join cars_data on makeid = id WHERE year = (SELECT;
SELECT maker, year FROM car_makers join cars_data on id = id WHERE year = (SELECT min(year) FROM cars_data) ORDER BY ;
SELECT DISTINCT model FROM car_names WHERE makeid IN (SELECT modelid FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE car_mak;
SELECT DISTINCT model FROM car_names WHERE makeid in (SELECT modelid FROM model_list WHERE maker in (SELECT id FROM car_makers WHERE car_mak;
SELECT continent, count(id) FROM car_makers join countries on country = countryid join continents on continent = contid GROUP BY continent;
SELECT continent, count(id) FROM continents left join countries on contid = continent left join car_makers on countryid = country GROUP BY continents;
SELECT country_name FROM countries left join car_makers on country_id = country_id GROUP BY country_name ORDER BY count(*) desc nulls last;
SELECT countryname FROM countries left join car_makers on countryid = country GROUP BY countryname ORDER BY count(*) desc LIMIT 1;
SELECT maker, fullname, count(model) FROM car_makers join car_names on id = makeid GROUP BY maker, car_mak;
SELECT maker, id, fullname, count(model) FROM car_makers join car_names on id = makeid GROUP BY car_;
SELECT accelerate FROM cars_data join car_names on id = makeid join car_makers on makeid = id WHERE maker = 'amc' and car_mak;
SELECT accelerate FROM cars_data join car_names on id = makeid join model_list on makeid = modelid join car_makers on maker = id;
SELECT count(*) FROM car_makers WHERE country = 'France';
SELECT count(*) FROM car_makers WHERE country = 'France';
SELECT count(*) FROM car_names cn JOIN model_list ml ON makeid = modelid JOIN car_makers cm ON maker = id JOIN countries c ON country = countryid WHERE;
SELECT COUNT(*) FROM car_names cn JOIN model_list ml ON makeid = modelid JOIN car_makers cm ON maker = id JOIN countries c ON country = countryid WHERE;
SELECT avg(mpg)::float FROM cars_data WHERE cylinders = 4;
SELECT AVG(mpg)::numeric FROM cars_data WHERE cylinders = 4;
SELECT weight FROM cars_data WHERE cylinders = 8 AND year = 1974 ORDER BY weight ASC LIMIT 1;
SELECT weight FROM cars_data WHERE cylinders = 8 AND year = 1974 ORDER BY weight ASC LIMIT 1;
SELECT DISTINCT maker, model FROM car_makers, car_names WHERE id = makeid;
SELECT maker, model FROM car_makers join car_names on id = makeid ORDER BY maker, model;
SELECT countryname, countryid FROM countries WHERE countryid in (SELECT country FROM car_makers) ORDER BY countryname;
SELECT countryname, countryid FROM countries WHERE countryid in (SELECT country FROM car_makers) ORDER BY countryname;
SELECT count(*) FROM cars_data WHERE horsepower::float > 150;
SELECT count(*) FROM cars_data WHERE horsepower::float > 150;
SELECT year, avg(weight) FROM cars_data GROUP BY year ORDER BY year;
SELECT year, avg(weight) FROM cars_data GROUP BY year ORDER BY year;
WITH country_count SELECT countryname, countryid, count(*) FROM countries WHERE continent = 1 GROUP BY countryname, countryid ORDER BY count desc ) SELECT countryname FROM;
SELECT countryname FROM countries WHERE continent = 2 AND EXISTS (SELECT 1 FROM car_makers WHERE country = countryid and maker = countryid) GROUP BY country;
SELECT horsepower, maker FROM cars_data join car_names on id = makeid join car_makers on makeid = id WHERE cyl;
SELECT model, horsepower FROM car_names join cars_data on makeid = id WHERE cylinders = 3 ORDER BY horsepower desc LIMIT 1;
SELECT model FROM car_names JOIN cars_data ON makeid = id WHERE mpg = (SELECT MAX(mpg) FROM cars_data) ORDER BY car_names;
SELECT model FROM car_names JOIN cars_data on makeid = id ORDER BY mpg desc LIMIT 1;
SELECT AVG(horsepower::float) FROM cars_data WHERE year < 1980;
SELECT AVG(horsepower::float) FROM cars_data WHERE year < 1980;
SELECT AVG(edispl) FROM cars_data join car_names on id = makeid WHERE model = 'volvo';
SELECT avg(edispl) FROM cars_data WHERE model = 'volvo';
SELECT cylinders, max(accelerate) FROM cars_data GROUP BY cylinders ORDER BY max_accelerate desc;
SELECT cylinders, max(accelerate) FROM cars_data GROUP BY cylinders ORDER BY max_accelerate desc;
SELECT model, count(*) FROM car_names GROUP BY model ORDER BY version_count DESC LIMIT 1;
SELECT model, count(*) FROM car_names GROUP BY model ORDER BY num_versions DESC;
SELECT count(*)Number of Cars with More than 4 Cylinders" FROM cars_data WHERE cylinders > 4;
SELECT count(*) FROM cars_data WHERE cylinders > 4;
SELECT count(*) FROM cars_data WHERE year = 1980;
SELECT count(*) FROM cars_data WHERE year = 1980;
SELECT count(*) FROM car_names WHERE make = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');
SELECT count(*) FROM car_names WHERE make = (SELECT maker FROM car_makers WHERE maker = 'American Motor Company');
SELECT maker, id FROM car_makers JOIN model_list ON id = maker GROUP BY maker, id HAVING count(*) > 3 ORDER;
SELECT id, maker, fullname FROM car_makers JOIN model_list ON id = maker GROUP BY id, maker, car;
SELECT DISTINCT model FROM car_makers join car_names on id = makeid WHERE (maker = 'General Motors' or maker = 'GM') or model in;
SELECT DISTINCT model FROM car_names WHERE (make = 'General Motors' or model in (select model from model_list where maker in (select id from car_makers where;
SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 and weight <= 4000;
SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000;
SELECT horsepower FROM cars_data WHERE accelerate = (SELECT max(accelerate) FROM cars_data) ORDER BY horsepower desc;
SELECT horsepower FROM cars_data ORDER BY accelerate DESC LIMIT 1;
SELECT cylinders FROM cars_data join car_names on id = makeid join model_list on makeid = modelid WHERE model = 'volvo' ORDER BY cars_;
SELECT cylinders FROM cars_data join car_names on id = makeid join model_list on makeid = modelid join car_makers on maker = id;
SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Accelerate) FROM cars_data);
SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(accelerate) FROM cars_data);
SELECT countryname, count(*) FROM countries left join car_makers on countryid = countryid GROUP BY countryname HAVING count(*) > 2 ORDER BY num_car_makers desc;
SELECT count(distinct country_name) FROM countries WHERE country_id in ( SELECT country FROM car_makers GROUP BY country HAVING count(id) >;
SELECT count(*) FROM cars_data WHERE cylinders > 6;
SELECT count(*) FROM cars_data WHERE cylinders > 6;
SELECT model, horsepower FROM cars_data join car_names on id = makeid WHERE cylinders = 4 ORDER BY horsepower desc nulls last;
SELECT model FROM cars_data join car_names on id = makeid WHERE cylinders = 4 ORDER BY horsepower desc nulls last limit 1;
SELECT makeid, maker FROM cars_data join car_names on id = makeid join car_makers on makeid = id WHERE horsepower;
SELECT id, maker FROM car_makers LEFT JOIN cars_data ON id = id WHERE horsepower is null or cylinders < 4;
SELECT mpg FROM cars_data WHERE cylinders = 8 or year < 1980 ORDER BY mpg desc LIMIT 1;
SELECT mpg FROM cars_data WHERE (cylinders = 8 or year < 1980) ORDER BY mpg desc LIMIT 1;
SELECT model FROM car_names WHERE model not like 'Ford%' AND model not like 'Fiat%' AND model not like 'Honda%' AND model not like 'Toyota%' AND;
SELECT DISTINCT model FROM car_names WHERE model!= 'Ford' AND model!= 'Mustang' AND model!= 'Ranger' AND model!= 'Taurus' AND car_names;
SELECT countryname FROM countries WHERE countryid not in (SELECT country FROM car_makers) ORDER BY countryname;
SELECT countryname FROM countries WHERE countryid not in (select country from car_makers);
SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING count(*) >= 2) GROUP BY id,;
SELECT id, maker FROM car_makers left join (SELECT id, count(*) FROM car_makers join car_names on id = make;
SELECT countryid, countryname FROM countries WHERE countryid in (SELECT country FROM car_makers WHERE maker = 'fiat' GROUP BY country having count(*) >;
SELECT countryid, countryname FROM countries WHERE (SELECT count(*) FROM car_makers WHERE country = countryid) > 3 or (SELECT count(*) FROM car_names WHERE model =;
SELECT country FROM airlines WHERE airline = 'JetBlue Airways';
SELECT country FROM airlines WHERE airline = 'Jetblue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'JetBlue Airways';
SELECT abbreviation FROM airlines WHERE airline = 'Jetblue Airways';
SELECT airline, abbreviation FROM airlines WHERE country = 'USA' ORDER BY airline asc;
SELECT airline, abbreviation FROM airlines WHERE country = 'USA' ORDER BY airline;
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT airportcode, airportname FROM airports WHERE city = 'Anthony';
SELECT count(distinct airline) FROM airlines;
SELECT count(*) FROM airlines;
SELECT count(*) FROM airports;
SELECT count(*) FROM airports;
SELECT count(*) FROM flights;
SELECT count(*) FROM flights;
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT airline FROM airlines WHERE abbreviation = 'UAL';
SELECT count(*) FROM airlines WHERE country = 'USA';
SELECT count(*) FROM airlines WHERE country = 'USA';
SELECT city, country FROM airports WHERE airportcode = 'ALTM';
SELECT city, country FROM airports WHERE airportcode = 'ALTM';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE airportcode = 'AKO';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT airportname FROM airports WHERE city = 'Aberdeen';
SELECT count(*) FROM flights WHERE sourceairport = 'APG';
SELECT count(*) FROM flights f JOIN airports a ON sourceairport = airportcode WHERE airportname = 'APG';
SELECT count(*) FROM flights JOIN airports ON DestAirport = AirportCode WHERE AirportCode = 'ATO';
SELECT count(*) FROM flights WHERE destairport = 'ATO';
SELECT count(*) FROM flights f join airports a on sourceairport = airportcode WHERE city = 'Aberdeen';
SELECT count(*) FROM flights f join airports a on sourceairport = airportcode WHERE city = 'Aberdeen';
SELECT count(*) FROM flights f join airports a on dest_airport = airportcode WHERE city = 'Aberdeen';
SELECT count(*) FROM flights f join airports a on dest_airport = airportcode WHERE city = 'Aberdeen';
SELECT count(*) FROM flights f1, airports a1, airports a2 WHERE sourceairport = airportcode AND city = 'Aberdeen' AND destairport = airportcode AND;
SELECT count(*) FROM flights f1, airports a1, airports a2 WHERE sourceairport = airportcode AND city = 'Aberdeen' AND destairport = airportcode AND;
SELECT count(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'Jetblue Airways';
SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' AND destairport = 'ASY';
SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' and destairport = 'ASY';
SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
SELECT count(*) FROM flights f join airlines a on airline = uid join airports ap on destairport = airportcode WHERE airline = 'United Airlines' and city = 'Aberdeen';
SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' and destairport = 'ABERDEEN';
SELECT city, count(*) FROM flights join airports on destairport = airportcode GROUP BY city ORDER BY num_flights desc LIMIT 1;
SELECT city, count(*) FROM flights join airports on destairport = airportcode GROUP BY city ORDER BY frequency DESC LIMIT 1;
SELECT city, count(*) FROM flights join airports on destairport = airportcode GROUP BY city ORDER BY num_flights DESC LIMIT 1;
SELECT city, count(*) FROM flights JOIN airports ON sourceairport = airportcode GROUP BY city ORDER BY frequency DESC LIMIT 1;
SELECT AirportCode FROM airports LEFT JOIN (SELECT SourceAirport, count(*) FROM flights GROUP BY SourceAirport) ON AirportCode = SourceAirport ORDER;
SELECT airportcode FROM airports LEFT JOIN (SELECT sourceairport, count(*) FROM flights GROUP BY sourceairport) ON airportcode = sourceairport ORDER BY ;
WITH airport_counts SELECT airportcode, count(*) FROM flights join airports on sourceairport = airportcode GROUP BY airportcode ORDER BY flight_count asc ) SELECT airport_;
SELECT airportcode FROM airports LEFT JOIN (SELECT sourceairport, count(*) FROM flights GROUP BY sourceairport) ON airportcode = sourceairport WHERE flight;
SELECT airline, count(*) FROM flights join airlines on airline = uid GROUP BY airline ORDER BY num_flights DESC LIMIT 1;
SELECT airline, count(*) FROM flights join airlines on airline = uid GROUP BY airline ORDER BY flight_count DESC LIMIT 1;
SELECT abbreviation, country FROM airlines LEFT JOIN (SELECT airline, count(*) FROM flights GROUP BY airline) ON uid = airline ORDER;
WITH airline_counts SELECT abbreviation, country, count(*) FROM airlines join flights on uid = airline GROUP BY abbreviation, country ORDER BY flight_count asc;
SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND airportcode = sourceairport AND airportcode = 'AHD';
SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND airportcode = sourceairport AND airportcode = 'AHD';
SELECT DISTINCT airline FROM airlines join flights on uid = airline WHERE destairport = 'AHD';
SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND airportcode = destairport AND airportcode = 'AHD';
SELECT DISTINCT airline FROM airlines, flights WHERE uid = airline AND (sourceairport = 'APG' or sourceairport = 'CVO') ORDER BY airline asc;
SELECT DISTINCT airline FROM flights WHERE sourceairport in (SELECT airportcode FROM airports WHERE airportname = 'APG' or airportname = 'CVO') ORDER BY airline;
SELECT DISTINCT airline FROM airlines, flights WHERE uid = airline AND sourceairport = 'CVO' AND destairport!= 'APG';
SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND sourceairport = 'CVO' AND destairport!= 'APG' AND airportcode = dest;
SELECT DISTINCT airline FROM airlines, flights WHERE uid = airline GROUP BY airline HAVING count(*) >= 10;
SELECT airline FROM airlines join flights on uid = airline GROUP BY airline HAVING count(*) >= 10;
SELECT airline FROM airlines LEFT JOIN (SELECT airline, count(*) FROM flights GROUP BY airline) ON uid = airline WHERE flight;
SELECT airline FROM airlines join flights on uid = airline GROUP BY airline HAVING count(*) < 200;
SELECT flightno FROM flights join airlines ON airline = uid WHERE airline = 'United Airlines';
SELECT flightno FROM flights join airlines ON airline = uid WHERE airline = 'United Airlines';
SELECT flightno FROM flights JOIN airports ON sourceairport = airportcode WHERE airportname = 'APG';
SELECT flightno FROM flights JOIN airports ON sourceairport = airportcode WHERE airportname = 'APG';
SELECT flightno FROM flights join airports ON destairport = airportcode WHERE airportname = 'APG';
SELECT flightno FROM flights JOIN airports ON destairport = airportcode WHERE airportname = 'APG';
SELECT flightno FROM flights JOIN airports ON sourceairport = airportcode WHERE city = 'Aberdeen';
SELECT flightno FROM flights JOIN airports ON sourceairport = airportcode WHERE city = 'Aberdeen';
SELECT flightno FROM flights join airports ON destairport = airportcode WHERE city = 'Aberdeen';
SELECT flightno FROM flights JOIN airports ON destairport = airportcode WHERE city = 'Aberdeen';
SELECT count(*) FROM flights f join airports a on dest_airport = airportcode WHERE city in ('Aberdeen', 'Abilene');
SELECT count(*) FROM flights f join airports a1 on sourceairport = airportcode join airports a2 on destairport = airportcode WHERE (city = 'Aberdeen' or city =;
SELECT AirportName FROM airports LEFT JOIN flights ON AirportCode = SourceAirport WHERE SourceAirport is null and DestAirport is null;
SELECT DISTINCT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
SELECT count(*) FROM employee;
SELECT count(*) FROM employee;
SELECT name, age FROM employee ORDER BY age asc;
SELECT name, age FROM employee ORDER BY age asc;
SELECT city, count(*) FROM employee GROUP BY city ORDER BY number_of_employees desc;
SELECT city, count(*) FROM employee GROUP BY city ORDER BY count desc;
SELECT city FROM (SELECT city, count(*) FROM employee WHERE age < 30 GROUP BY city) WHERE count > 1;
SELECT DISTINCT city FROM employee WHERE age < 30 GROUP BY city HAVING count(*) > 1;
SELECT location, count(*) FROM shop GROUP BY location ORDER BY number_of_shops DESC;
SELECT location, count(*) FROM shop GROUP BY location ORDER BY num_shops DESC;
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
SELECT min(number_products), max(number_products) FROM shop;
SELECT min(number_products), max(number_products) FROM shop;
SELECT name, location, district FROM shop ORDER BY number_products DESC;
SELECT name, location, district FROM shop ORDER BY number_products desc;
WITH avg_num_products SELECT avg(number_products) FROM shop ) SELECT name FROM shop WHERE number_products > (SELECT avg_num_products FROM avg_num_products);
WITH avg_num_products SELECT avg(number_products) FROM shop ) SELECT name FROM shop WHERE number_products > (SELECT avg_num_products FROM avg_num_products) ORDER BY;
SELECT name FROM employee join evaluation on employee_id = employee_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
SELECT name FROM employee join evaluation on employee_id = employee_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
SELECT name FROM employee join evaluation on employee_id = employee_id WHERE year_awarded = '2018' ORDER BY bonus desc LIMIT 1;
SELECT name FROM employee join evaluation on employee_id = employee_id WHERE bonus = (SELECT max(bonus) FROM evaluation) ORDER BY name asc;
SELECT DISTINCT name FROM employee WHERE employee_id not in (SELECT employee_id FROM evaluation);
SELECT DISTINCT name FROM employee WHERE employee_id not in (SELECT employee_id FROM evaluation);
WITH max_employees SELECT shop_id, name, count(*) FROM hiring join shop on shop_id = shop_id GROUP BY shop_id, name ORDER BY num_employees;
WITH max_employees SELECT name, count(*) FROM shop JOIN hiring on shop_id = shop_id GROUP BY name ORDER BY num_employees desc limit 1 ) SELECT name;
SELECT name FROM shop WHERE shop_id not in (SELECT shop_id FROM hiring) ORDER BY name asc;
SELECT name FROM shop WHERE shop_id not in (SELECT shop_id FROM hiring) ORDER BY name asc;
SELECT shop_id, name, count(employee_id) FROM hiring join shop on shop_id = shop_id GROUP BY shop_id, name ORDER BY number_;
SELECT shop_id, name, count(employee_id) FROM shop left join hiring on shop_id = shop_id left join employee on employee_id = employee_id;
SELECT sum(bonus) FROM evaluation;
SELECT sum(bonus) FROM evaluation;
SELECT employee_id, name, age, city, start_from, is_full_time FROM hiring join employee on employee_id = employee_id ORDER BY employee;
SELECT employee_id, name, age, city, start_from, is_full_time FROM hiring join employee on employee_id = employee_id ORDER BY employee;
WITH less_than_3000SELECT district FROM shop WHERE number_products < 3000), more_than_10000SELECT district FROM shop WHERE number_products > 1000;
SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000;
SELECT COUNT(DISTINCT location) FROM shop;
SELECT count(distinct location) FROM shop;
SELECT count(*) FROM documents;
SELECT count(*) FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_id, document_name, document_description FROM documents;
SELECT document_name, template_id FROM documents WHERE document_description like '%w%' ORDER BY document_name;
SELECT document_name, template_id FROM documents WHERE document_description like '%w%' ORDER BY document_name;
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';
SELECT document_id, template_id, document_description FROM documents WHERE document_name = 'Robbin CV';
SELECT count(distinct template_id) FROM documents;
SELECT count(distinct template_id) FROM documents;
SELECT count(*) FROM documents d WHERE template_id in (select template_id from templates t where template_type_code = 'PPT');
SELECT count(*) FROM documents d WHERE template_id in (select template_id from templates t where template_type_code = 'PPT');
SELECT template_id, count(document_id) FROM templates left join documents on template_id = template_id GROUP BY template_id ORDER BY number_of_documents desc;
SELECT template_id, template_type_description, count(*) FROM templates join documents on template_id = template_id join ref_template_types on template_type_code = ;
SELECT template_id, template_type_code FROM templates join documents on template_id = template_id join ref_template_types on template_type_code = template_type_code GROUP BY;
SELECT template_id, template_type_code FROM templates join ref_template_types on template_type_code = template_type_code GROUP BY template_id, template_type;
WITH template_usage_count SELECT template_id, count(*) FROM templates JOIN documents ON template_id = template_id GROUP BY template_id HAVING count(*) > 1 ) SELECT template_usage_count;
WITH template_counts SELECT template_id, count(*) FROM templates JOIN documents on template_id = template_id GROUP BY template_id HAVING count(*) > 1 ) SELECT template_id FROM template;
SELECT DISTINCT template_id FROM templates WHERE template_id not in (SELECT template_id FROM documents);
SELECT DISTINCT template_id FROM templates WHERE template_id not in (SELECT template_id FROM documents);
SELECT count(*) FROM templates;
SELECT count(*) FROM templates;
SELECT template_id, version_number, template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code;
SELECT template_id, version_number, template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code;
SELECT DISTINCT template_type_code FROM ref_template_types UNION ALL SELECT DISTINCT template_type_code FROM templates ORDER BY template_type_code;
SELECT DISTINCT template_type_code FROM ref_template_types ORDER BY template_type_code;
SELECT template_id FROM templates WHERE template_type_code in ('PP', 'PPT');
SELECT template_id FROM templates WHERE template_type_code in ('PP', 'PPT');
SELECT count(*)Number of Templates with Type CV" FROM templates WHERE template_type_code = 'CV';
SELECT count(*) FROM templates WHERE template_type_code = 'CV';
SELECT version_number, template_type_code FROM templates join ref_template_types on template_type_code = template_type_code WHERE version_number > 5;
SELECT version_number, template_type_code FROM templates join ref_template_types on template_type_code = template_type_code WHERE version_number > 5;
SELECT template_type_code, count(template_id) FROM ref_template_types LEFT JOIN templates ON template_type_code = template_type_code GROUP BY ref_template_types;
SELECT template_type_code, count(*) FROM ref_template_types rt left join templates t on template_type_code = template_type_code GROUP BY template_type_code ORDER BY number_of_templates desc;
SELECT template_type_code, count(*) FROM ref_template_types LEFT JOIN templates ON template_type_code = template_type_code GROUP BY template_type_code;
WITH template_type_counts SELECT template_type_code, count(*) FROM templates t JOIN ref_template_types rt ON template_type_code = template_type_code GROUP BY template_type_code ) SELECT template;
SELECT template_type_code FROM ref_template_types rt LEFT JOIN (SELECT template_type_code, count(*) FROM templates GROUP BY template_type_code) t ON template_type_code = template_type_code WHERE t;
SELECT template_type_code FROM ref_template_types rt WHERE template_type_code not in (select template_type_code from templates tt group by template_type_code having count(*) < 3);
SELECT min(version_number), template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code GROUP BY ref;
SELECT min(version_number), template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code GROUP BY ref;
SELECT template_type_code FROM documents join templates on template_id = template_id WHERE document_name = 'Data base';
SELECT template_type_code FROM documents join templates on template_id = template_id WHERE document_name = 'Data base';
SELECT document_name FROM documents WHERE template_id in (select template_id from templates where template_type_code = 'BK');
SELECT document_name FROM documents WHERE template_id in (select template_id from templates where template_type_code = 'BK');
SELECT template_type_code, template_type_description, count(document_id) FROM ref_template_types LEFT JOIN templates ON template_type_code = template_;
SELECT template_type_code, count(document_id) FROM ref_template_types rt left join templates t on template_type_code = template_type_code left join documents d on template_id = template;
SELECT template_type_code, count(document_id) FROM ref_template_types join templates on template_type_code = template_type_code join documents on template_id = ;
SELECT template_type_code FROM ref_template_types JOIN (SELECT template_type_code, count(*) FROM templates JOIN documents on template_id = template_id GROUP BY template_type_;
SELECT DISTINCT template_type_code FROM ref_template_types rt WHERE template_type_code not in (SELECT template_type_code FROM documents dt);
SELECT template_type_code FROM ref_template_types rt WHERE template_type_code not in (select distinct template_type_code from templates t where template_id in (select template_id from documents d));
SELECT template_type_code, template_type_description FROM ref_template_types ORDER BY template_type_code asc;
SELECT template_type_code, template_type_description FROM ref_template_types rt ORDER BY template_type_code asc;
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_description FROM ref_template_types WHERE template_type_code = 'AD';
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';
SELECT template_type_code FROM ref_template_types WHERE template_type_description = 'Book';
SELECT DISTINCT template_type_description FROM ref_template_types rt WHERE template_type_code in (SELECT distinct template_type_code FROM templates t WHERE template_id in (SELECT distinct template_id FROM documents d));
SELECT DISTINCT template_details FROM templates JOIN documents on template_id = template_id ORDER BY template_details;
SELECT template_id FROM templates JOIN ref_template_types ON template_type_code = template_type_code WHERE template_type_description = 'Presentation';
SELECT template_id FROM templates WHERE template_details = 'Presentation';
SELECT count(*) FROM paragraphs;
SELECT count(*) FROM paragraphs;
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
SELECT paragraph_text, other_details FROM paragraphs WHERE paragraph_text = 'Korea ' ORDER BY paragraph_id asc;
SELECT paragraph_text, document_description, template_details FROM paragraphs join documents on document_id = document_id join templates on template_id = template_id WHERE paragraph_text ilike '%Korea%';
SELECT paragraph_id, paragraph_text FROM documents join templates on template_id = template_id join paragraphs on document_id = document_id WHERE document_name = 'Welcome to NY';
SELECT paragraph_id, paragraph_text FROM documents join paragraphs on document_id = document_id WHERE document_name = 'Welcome to NY';
SELECT paragraph_text FROM documents join templates on template_id = template_id join ref_template_types on template_type_code = template_type_code join paragraphs on document_id = document_id;
SELECT paragraph_text FROM documents join templates on template_id = template_id join ref_template_types on template_type_code = template_type_code join paragraphs on document_id = document_id WHERE;
SELECT document_id, count(paragraph_id) FROM documents left join paragraphs on document_id = document_id GROUP BY document_id ORDER BY document_id asc;
SELECT document_id, count(paragraph_id) FROM documents left join paragraphs on document_id = document_id GROUP BY document_id ORDER BY document_id asc;
SELECT document_id, document_name, count(paragraph_id) FROM documents left join paragraphs on document_id = document_id GROUP BY document_id, document_name ORDER BY ;
SELECT document_id, document_name, count(paragraph_id) FROM documents LEFT JOIN paragraphs ON document_id = document_id GROUP BY document_id, document_name ORDER BY num_;
SELECT DISTINCT document_id FROM documents JOIN templates on template_id = template_id JOIN ref_template_types on template_type_code = template_type_code JOIN paragraphs on document_id = paragraphs;
SELECT document_id FROM documents JOIN paragraphs on document_id = document_id GROUP BY document_id HAVING count(*) >= 2;
SELECT document_id, document_name FROM documents JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id) on document_id = document_id ORDER BY paragraph;
SELECT document_id, document_name FROM documents JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id ORDER BY num_paragraphs desc limit 1) on ;
SELECT document_id FROM documents LEFT JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id) ON document_id = document_id ORDER BY num_paragraphs;
SELECT document_id FROM documents LEFT JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id) on document_id = document_id ORDER BY num_paragraphs;
SELECT document_id FROM documents JOIN templates on template_id = template_id JOIN ref_template_types on template_type_code = template_type_code JOIN paragraphs on document_id = ;
SELECT DISTINCT document_id FROM documents, paragraphs WHERE document_id = document_id GROUP BY document_id, count(paragraph_id) HAVING count(paragraph_id) between 1 and 2;
SELECT DISTINCT document_id FROM documents, paragraphs WHERE document_id = document_id AND paragraph_text = 'Brazil' AND paragraph_text = 'Ireland';
SELECT DISTINCT document_id FROM documents, paragraphs WHERE document_id = document_id AND paragraph_text like '%Brazil%' AND paragraph_text like '%Ireland%';
SELECT count(*) FROM teacher;
SELECT count(*) FROM teacher;
SELECT name FROM teacher ORDER BY age asc;
SELECT name FROM teacher ORDER BY age asc;
SELECT age, hometown FROM teacher;
SELECT age, hometown FROM teacher;
SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District';
SELECT name FROM teacher WHERE hometown!= 'Little Lever Urban District';
SELECT name FROM teacher WHERE age in ('32', '33');
SELECT name FROM teacher WHERE age in ('32', '33');
SELECT hometown FROM teacher WHERE age = (SELECT min(age) FROM teacher) ORDER BY age asc;
SELECT name, age, hometown FROM teacher WHERE age = (SELECT min(age) FROM teacher) ORDER BY age asc;
SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY number_of_teachers DESC;
SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY num_teachers DESC;
SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY frequency DESC LIMIT 1;
SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY frequency DESC LIMIT 1;
WITH teacher_hometowns SELECT hometown, count(*) FROM teacher GROUP BY hometown HAVING count(*) >= 2 ) SELECT hometown FROM teacher_hometowns;
WITH teacher_count SELECT hometown, count(*) FROM teacher GROUP BY hometown HAVING count(*) >= 2 ) SELECT hometown FROM teacher_count;
SELECT name, course FROM teacher join course_arrange on teacher_id = teacher_id join course on course_id = course_id ORDER BY name;
SELECT name, course FROM teacher join course_arrange on teacher_id = teacher_id join course on course_id = course_id ORDER BY name;
SELECT name, course FROM teacher join course_arrange on teacher_id = teacher_id join course on course_id = course_id ORDER BY name asc;
SELECT name, course FROM teacher join course_arrange on teacher_id = teacher_id join course on course_id = course_id ORDER BY name asc;
SELECT name FROM course_arrange join course on course_id = course_id join teacher on teacher_id = teacher_id WHERE course ='math';
SELECT name FROM teacher join course_arrange ON teacher_id = teacher_id join course ON course_id = course_id WHERE course = 'Math';
SELECT name, count(course_id) FROM teacher LEFT JOIN course_arrange ON teacher_id = teacher_id GROUP BY name ORDER BY number_of_courses DESC;
SELECT name, count(course_id) FROM teacher LEFT JOIN course_arrange ON teacher_id = teacher_id GROUP BY name ORDER BY number_of_courses DESC;
WITH teacher_courses SELECT teacher_id, count(*) FROM course_arrange GROUP BY teacher_id HAVING count(*) >= 2 ) SELECT name FROM teacher, teacher_courses WHERE;
WITH teacher_courses SELECT teacher_id, count(*) FROM course_arrange GROUP BY teacher_id HAVING count(*) >= 2 ) SELECT name FROM teacher_courses join teacher on teacher_;
SELECT name FROM teacher WHERE teacher_id not in (SELECT teacher_id FROM course_arrange);
SELECT name FROM teacher LEFT JOIN course_arrange ON teacher_id = teacher_id WHERE course_id IS NULL;
SELECT COUNT(*) FROM visitor WHERE age < 30;
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;
SELECT AVG(age) FROM visitor WHERE level_of_membership <= 4;
SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC;
SELECT Museum_ID, Name FROM museum ORDER BY Num_of_Staff DESC LIMIT 1;
SELECT AVG(num_of_staff) FROM museum WHERE open_year < '2009';
SELECT open_year, num_of_staff FROM museum WHERE name = 'Plaza Museum';
WITH min_staff SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > '2010' ) SELECT Name FROM museum WHERE Num_of_Staff >;
SELECT id, name, age FROM visitor join visit on id = visitor_id GROUP BY id, name, age HAVING count(museum_id) > 1;
SELECT id, name, level_of_membership FROM visitor join (SELECT visitor_id, sum(total_spent) FROM visit GROUP BY visitor_id) on visitor;
SELECT Museum_ID, Name FROM museum JOIN (SELECT museum_id, count(*) FROM visit GROUP BY museum_id ORDER BY count(*) DESC LIMIT 1);
SELECT name FROM museum WHERE museum_id not in (select museum_id from visit);
SELECT name, age FROM visitor join (select visitor_id, count(*) from visit group by visitor_id order by ticket_count desc limit 1) on id = ;
SELECT AVG(num_of_ticket), MAX(num_of_ticket) FROM visit;
SELECT sum(total_spent) FROM visit join visitor ON visitor_id = id WHERE level_of_membership = 1;
SELECT name FROM visitor join visit on id = visitor_id WHERE open_year < '2009' and open_year > '2011' GROUP BY name HAVING count(*) = 2;
SELECT COUNT(*) FROM visitor v WHERE id NOT IN (SELECT id FROM visit v JOIN museum m on museum_id =;
SELECT count(*) FROM museum WHERE open_year::int > 2013 or open_year::int < 2008;
SELECT COUNT(*) FROM players;
SELECT count(*) FROM players;
SELECT count(*) FROM matches;
SELECT count(*) FROM matches;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY first_name;
SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY first_name;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(loser_age), AVG(winner_age) FROM matches;
SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches) GROUP BY ranking_date;
SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches) GROUP BY ranking_date;
SELECT max(loser_rank) FROM matches WHERE loser_id IS NOT NULL;
SELECT MIN(ranking) FROM rankings WHERE player_id IN (SELECT loser_id FROM matches) GROUP BY ranking_date;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT country_code) FROM players;
SELECT COUNT(DISTINCT last_name)Number of distinct name of losers" FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE match_num = 1);
SELECT COUNT(DISTINCT last_name) FROM matches join players on loser_id = player_id WHERE match_num = 1;
SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 ORDER BY count(*) DESC;
SELECT DISTINCT tourney_name FROM tournaments JOIN matches ON tourney_id = tourney_id GROUP BY tourney_name HAVING count(*) > 10;
SELECT DISTINCT first_name ||'' || last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT ;
SELECT DISTINCT first_name ||'' || last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT winner_id FROM matches WHERE;
SELECT count(*) FROM matches WHERE year in (2013, 2016);
SELECT count(*) FROM matches WHERE year in (2013, 2016);
SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND year = 2018);
SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND year = 2018);
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM players ORDER BY birth_date asc LIMIT 1);
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM players ORDER BY birth_date asc LIMIT 1);
SELECT first_name, last_name FROM players ORDER BY birth_date;
SELECT first_name ||'' || last_name, birth_date FROM players ORDER BY birth_date;
SELECT first_name, last_name FROM players WHERE hand = 'L' ORDER BY birth_date;
SELECT first_name ||'' || last_name FROM players WHERE hand = 'Left' ORDER BY birth_date;
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours desc LIMIT 1);
SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE ranking = 1) ORDER BY first_name, country_code;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
SELECT first_name, last_name, ranking_points FROM players join rankings on player_id = player_id WHERE ranking = (SELECT max(ranking) FROM rankings) ORDER BY ;
SELECT first_name ||'' || last_name, player_id, ranking_points FROM players join matches on player_id = winner_id join rankings on player_id = player;
SELECT first_name ||'' || last_name FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank;
SELECT first_name ||'' || last_name FROM players JOIN matches ON player_id = winner_id WHERE tourney_name = 'Australian Open' ORDER BY player_id desc LIMIT;
SELECT first_name ||'' || last_name, first_name ||'' || last_name FROM matches join players on loser_id = player_id WHERE minutes = (;
SELECT first_name ||'' || last_name, first_name ||'' || last_name FROM matches join players on winner_id = player_id WHERE match_num =;
SELECT first_name, last_name, AVG(ranking) FROM players join rankings on player_id = player_id GROUP BY first_name, last_name ORDER BY average_ranking;
SELECT first_name, avg(ranking) FROM players left join rankings on player_id = player_id GROUP BY first_name ORDER BY average_ranking desc;
SELECT first_name, last_name, sum(ranking_points) FROM players join rankings on player_id = player_id GROUP BY first_name, last_name ORDER BY;
SELECT first_name, sum(ranking_points) FROM players left join rankings on player_id = player_id GROUP BY first_name ORDER BY total_ranking_points desc;
SELECT country_code, count(player_id) FROM players GROUP BY country_code ORDER BY num_players DESC;
SELECT country_code, count(*) FROM players GROUP BY country_code ORDER BY player_count DESC;
SELECT country_code, count(*) FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1;
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50;
SELECT country_code FROM players GROUP BY country_code HAVING count(*) > 50;
SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY year;
SELECT year, count(*) FROM matches GROUP BY year ORDER BY year;
SELECT first_name, last_name, ranking FROM players join matches on player_id = winner_id join rankings on player_id = player_id WHERE tourney_date = '201;
SELECT first_name, last_name, ranking FROM players join matches on player_id = winner_id join rankings on player_id = player_id WHERE tourney_date = (SELECT MIN(;
SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'Left';
SELECT count(*) FROM players WHERE hand = 'Left' AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships');
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(ranking_points);
SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT max(player_id) FROM rankings) ORDER BY first_name, country_code, ;
SELECT hand, count(*) FROM players GROUP BY hand ORDER BY num_players DESC;
SELECT hand, count(*) FROM players GROUP BY hand ORDER BY player_count DESC;
SELECT count(*) FROM ship WHERE disposition_of_ship = 'Captured';
SELECT name, tonnage FROM ship ORDER BY name DESC;
SELECT name, date, result FROM battle ORDER BY date;
SELECT id, note, killed, injured, MIN(killed), MAX(killed) FROM death GROUP BY id, note, killed;
SELECT date, avg(injured) FROM battle join ship on id = lost_in_battle join death on id = caused_by_ship_id GROUP BY date ORDER BY date;
SELECT note, killed, injured FROM death join ship on caused_by_ship_id = id WHERE tonnage = 't' ORDER BY note;
SELECT name, result FROM battle WHERE bulgarian_commander!= 'Boril' ORDER BY name;
SELECT id, name FROM battle join ship ON id = lost_in_battle WHERE ship_type = 'Brig' ORDER BY id asc;
SELECT id, name FROM battle join death on id = id GROUP BY id, name HAVING sum(killed) > 10 ORDER BY sum(killed) desc;
SELECT id, name, sum(injured) FROM ship join death on id = caused_by_ship_id GROUP BY id, name ORDER BY total_injuries desc LIMIT;
SELECT DISTINCT name FROM battle WHERE bulgarian_commander BETWEEN 'Kaloyan' AND 'Baldwin I' OR latin_commander BETWEEN 'Kaloyan' AND 'Baldwin I' ORDER BY name;
SELECT DISTINCT result FROM battle ORDER BY result;
SELECT count(*) FROM battle b LEFT JOIN ship s ON id = id WHERE tonnage!= '225' OR id IS NULL;
SELECT name, date FROM battle WHERE id in (SELECT id FROM battle WHERE name = 'Lettice' AND id in (SELECT lost_in_battle FROM ship WHERE name = ';
SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT id FROM ship WHERE lost_in_battle IS NOT NULL) AND name LIKE '%English Channel%' ORDER BY ;
SELECT note FROM death WHERE note like '%East%';
SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses;
SELECT address_id, line_1, line_2 FROM addresses;
SELECT count(*) FROM Courses;
SELECT count(*) FROM Courses;
SELECT course_description FROM courses WHERE course_name = 'Mathematics';
SELECT course_name, course_description FROM courses WHERE course_name LIKE '%math%' ORDER BY course_name;
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT zip_postcode FROM Addresses WHERE city = 'Port Chelsea';
SELECT department_name, department_id FROM (SELECT department_id, count(*) FROM Degree_Programs dp GROUP BY department_id) WHERE degree_count = (SELECT max(degree_count);
SELECT department_name, department_id FROM departments LEFT JOIN degree_programs ON department_id = department_id GROUP BY department_name, department_id ORDER BY count(degree;
SELECT count(distinct department_id) FROM degree_programs dp WHERE department_id in (SELECT department_id FROM degree_programs dp2);
SELECT count(distinct department_id) FROM degree_programs;
SELECT COUNT(DISTINCT degree_summary_name) FROM degree_programs;
SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;
SELECT count(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
SELECT section_name, section_description FROM sections;
SELECT section_name, section_description FROM sections;
SELECT course_id, course_name FROM courses JOIN sections on course_id = course_id GROUP BY course_id, course_name HAVING count(section_id) <= 2 ORDER BY course;
SELECT course_id, course_name FROM courses LEFT JOIN sections ON course_id = course_id WHERE section_id IS NULL GROUP BY course_id, course_name HAVING count(section_;
SELECT DISTINCT section_name FROM sections ORDER BY section_name DESC;
SELECT section_name FROM sections ORDER BY section_name DESC;
SELECT semester_name, semester_id FROM semesters WHERE semester_id in (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1);
SELECT semester_name, semester_id FROM semesters WHERE semester_id IN (SELECT semester_id FROM (SELECT semester_id, count(*) FROM student_enrolment GROUP;
SELECT department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT department_description FROM departments WHERE department_name LIKE '%computer%';
SELECT DISTINCT first_name, middle_name, last_name, student_id FROM students INNER JOIN student_enrolment on student_id = student_id INNER JOIN semesters on student_enrol;
SELECT student_id, first_name, middle_name, last_name FROM students join student_enrolment on student_id = student_id join semesters on semester;
SELECT DISTINCT first_name, middle_name, last_name FROM students INNER JOIN student_enrolment on student_id = student_id INNER JOIN degree_programs on degree_program_id;
SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment on student_id = student_id JOIN degree_programs on degree_program_id = degree;
SELECT degree_program_id, degree_summary_name, degree_summary_description, other_details, count(student_id) FROM degree_programs left;
SELECT degree_summary_name, count(student_id) FROM student_enrolment join degree_programs on degree_program_id = degree_program_id GROUP BY degree;
SELECT degree_program_id, degree_summary_name FROM degree_programs left join (select degree_program_id, count(*) from student_enrolment group by student_enrolment;
SELECT degree_program_id, degree_summary_name FROM degree_programs left join (select degree_program_id, count(*) from student_enrolment group by degree_program_id) on;
SELECT student_id, first_name, middle_name, last_name, count(*) FROM students left join student_enrolment on student_id = student_id GROUP BY;
SELECT student_id, first_name, middle_name, last_name, count(student_enrolment_id) FROM students left join student_enrolment on student_;
SELECT semester_name FROM semesters WHERE semester_id not in (SELECT semester_id FROM student_enrolment) ORDER BY semester_name;
SELECT semester_name FROM semesters WHERE semester_id not in (SELECT semester_id FROM student_enrolment) ORDER BY semester_name;
SELECT DISTINCT course_name FROM Courses c WHERE course_id in (SELECT course_id FROM Student_Enrolment se join Student_Enrolment_Courses sec on student_enrolment_id = student_enrolment_id;
SELECT DISTINCT course_name FROM Courses c WHERE course_id in (SELECT course_id FROM Student_Enrolment se join Student_Enrolment_Courses sec on student_enrolment_id = student_enrolment_id;
SELECT course_name FROM courses JOIN student_enrolment_courses on course_id = course_id GROUP BY course_name ORDER BY count(*) desc LIMIT 1;
SELECT course_name FROM Courses c join Student_Enrolment_Courses sec on course_id = course_id GROUP BY course_name ORDER BY count(*) desc LIMIT 1;
SELECT last_name FROM students left join addresses on current_address_id = address_id left join student_enrolment on student_id = student_id WHERE state_province_county = 'North Carolina;
SELECT last_name FROM students LEFT JOIN addresses ON current_address_id = address_id LEFT JOIN student_enrolment ON student_id = student_id WHERE state_province_county = 'North Carolina;
SELECT transcript_date, transcript_id FROM transcripts t JOIN transcript_contents tc on transcript_id = transcript_id JOIN student_enrolment_courses sec on student_course_id = student_course_id GROUP;
SELECT transcript_date, transcript_id FROM transcripts t WHERE transcript_id in (SELECT transcript_id FROM transcript_contents tc GROUP BY transcript_id HAVING count(*) >= 2) ORDER BY transcript_;
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' and last_name = 'Ward';
SELECT cell_mobile_number FROM students WHERE first_name = 'Timmothy' and last_name = 'Ward';
SELECT first_name, middle_name, last_name FROM students ORDER BY student_id asc LIMIT 1;
SELECT first_name, middle_name, last_name FROM students ORDER BY student_id asc LIMIT 1;
SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE semester_id = (SELECT;
SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE semester_id = (SELECT MIN;
SELECT first_name FROM students WHERE permanent_address_id!= current_address_id;
SELECT first_name FROM students WHERE permanent_address_id!= current_address_id;
SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses;
SELECT address_id, line_1, line_2 FROM addresses WHERE address_id in (SELECT current_address_id FROM students group by current_address_id order by count(*) desc limit 1) ORDER BY ;
SELECT avg(cast(transcript_date)) FROM transcripts t;
SELECT avg(transcript_date) FROM transcripts t;
SELECT min(transcript_date), other_details FROM transcripts ORDER BY first_transcript_date asc;
SELECT min(transcript_date), other_details FROM transcripts t GROUP BY other_details ORDER BY earliest_date asc;
SELECT count(*) FROM Transcripts WHERE transcript_date <= now();
SELECT count(*) FROM Transcripts;
SELECT max(transcript_date) FROM transcripts;
SELECT max(transcript_date) FROM transcripts;
SELECT student_enrolment_id, count(*) FROM (SELECT student_enrolment_id, course_id FROM student_enrolment_courses WHERE transcript_id in (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id;
SELECT course_id, course_name, count(*) FROM courses left join student_enrolment_courses on course_id = course_id left join transcript_contents on student_enrolment_courses;
SELECT transcript_date, transcript_id FROM (SELECT transcript_id, count(*) FROM transcript_contents GROUP BY transcript_id) LEFT JOIN transcripts ON transcript_id = transcript_id ORDER BY num;
SELECT transcript_date, transcript_id FROM (SELECT transcript_id, count(*) FROM transcript_contents GROUP BY transcript_id) WHERE num_results = (SELECT min(num_results) FROM transcript_contents;
SELECT semester_name FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment WHERE student_id IN (SELECT student_id FROM students;
SELECT semester_id FROM semesters WHERE semester_name = 'Fall' AND EXISTS (SELECT 1 FROM student_enrolment      WHERE semester_id = semester_id         AND student_;
SELECT COUNT(DISTINCT address_id) FROM  Students     LEFT JOIN Addresses ON current_address_id = address_id;
SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM  addresses JOIN  students on address;
SELECT student_id,        first_name,        last_name,        email_address,        cell_mobile_number,        date_first_registered,        date_left,        other_student_details    FROM  students    ORDER BY;
SELECT student_id,        first_name,        last_name,        email_address,        cell_mobile_number,        date_first_registered,        date_left,        other_student_details    FROM  students    ORDER BY;
SELECT section_name,        section_description,        department_name,        department_description,        course_name,        course_description    FROM  sections        JOIN courses ON course_id = course_id        JOIN departments ON courses;
SELECT section_description    FROM  sections    WHERE section_name = 'h';
SELECT first_name    FROM  students    WHERE (permanent_address_id IN (SELECT address_id                           FROM  addresses                           WHERE country = 'Haiti')      or cell_mobile_number = '09700166582');
SELECT first_name    FROM  students    WHERE (permanent_address_id in (SELECT address_id                           FROM  addresses                           WHERE country = 'Haiti') or cell_mobile_number = '09700166582');
SELECT title    FROM  cartoon    ORDER BY title;
SELECT title    FROM  cartoon    ORDER BY title;
SELECT title,        original_air_date    FROM  cartoon    WHERE directed_by = '<NAME>'    ORDER BY original_air_date asc;
SELECT title    FROM  cartoon    WHERE directed_by = '<NAME>';
SELECT count(*) FROM  cartoon WHERE written_by = 'Joseph Kuhr';
SELECT count(*) FROM  cartoon WHERE written_by = '<NAME>';
SELECT title,        directed_by    FROM  cartoon    ORDER BY original_air_date asc;
SELECT title,    directed_by FROM  cartoon WHERE original_air_date is not null ORDER BY original_air_date;
SELECT title    FROM  cartoon    WHERE directed_by in ('<NAME>', '<NAME>')    ORDER BY title;
SELECT title FROM  cartoon WHERE directed_by in ('<NAME>', '<NAME>') ORDER BY title;
SELECT country,    count(*) FROM  tv_channel GROUP BY country ORDER BY num_channels desc;
SELECT country,    count(*) FROM  tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
SELECT series_name,    content,    count(*) FROM  tv_channel GROUP BY series_name, content ORDER BY count DESC;
SELECT DISTINCT series_name,          content FROM  tv_channel ORDER BY series_name, content;
SELECT content    FROM  tv_channel    WHERE series_name = 'Sky Radio';
SELECT content FROM  tv_channel WHERE series_name = 'Sky Radio';
SELECT package_option    FROM  tv_channel    WHERE series_name = 'Sky Radio';
SELECT package_option    FROM  tv_channel    WHERE series_name = 'Sky Radio';
SELECT count(*) FROM  tv_channel WHERE language = 'English';
SELECT count(*) FROM  tv_channel WHERE language = 'English';
SELECT language,    count(*) FROM  tv_channel tvc GROUP BY language ORDER BY number_of_channels asc;
WITH channel_count  SELECT language,     count(*)  FROM  tv_channel  GROUP BY language  ORDER BY channel_count asc  limit 1 ) SELECT language,    channel_count FROM;
SELECT language,    count(id) FROM  tv_channel GROUP BY language ORDER BY number_of_channels DESC;
SELECT language,    count(id) FROM  tv_channel GROUP BY language ORDER BY number_of_channels desc;
SELECT series_name FROM  tv_channel join cartoon      on id = channel WHERE title = 'The Rise of the Blue Beetle!';
SELECT series_name FROM  tv_channel join cartoon on id = channel WHERE title = 'The Rise of the Blue Beetle';
SELECT title    FROM  cartoon join tv_channel        on channel = id    WHERE series_name = 'Sky Radio';
SELECT title FROM  cartoon join tv_channel on channel = id WHERE series_name = 'Sky Radio';
SELECT episode,        rating    FROM  tv_series    ORDER BY rating;
SELECT episode,        rating    FROM  tv_series    ORDER BY rating asc;
SELECT episode,    rating,    title FROM  tv_series tvs WHERE rating = 'TV-Y7' ORDER BY rating desc, title asc limit 3;
SELECT episode,    rating FROM  tv_series ORDER BY rating desc, episode asc LIMIT 3;
SELECT min(share),    max(share)  FROM  tv_series;
SELECT max(share),    min(share)    FROM  tv_series;
SELECT air_date    FROM  tv_series    WHERE episode = 'A Love of a Lifetime';
SELECT original_air_date FROM  cartoon WHERE title = 'A Love of a Lifetime' ORDER BY original_air_date desc;
SELECT weekly_rank    FROM  tv_series    WHERE episode = 'A Love of a Lifetime';
SELECT weekly_rank    FROM  tv_series    WHERE episode = 'A Love of a Lifetime';
SELECT series_name FROM  tv_channel join tv_series on id = channel WHERE episode = 'A Love of a Lifetime';
SELECT series_name FROM  tv_channel join tv_series on id = channel WHERE episode = 'A Love of a Lifetime';
SELECT episode    FROM  tv_series join tv_channel        on channel = id    WHERE series_name = 'Sky Radio'    ORDER BY episode asc;
SELECT episode FROM  tv_series, tv_channel WHERE channel = id and series_name = 'Sky Radio';
SELECT directed_by,    count(*) FROM  cartoon GROUP BY directed_by ORDER BY number_of_cartoons DESC;
SELECT directed_by,    count(id) FROM  cartoon GROUP BY directed_by ORDER BY cartoon_count DESC;
SELECT production_code,    channel FROM  cartoon WHERE original_air_date = (SELECT max(original_air_date)                   FROM  cartoon) ORDER BY production_code, channel;
SELECT production_code,    channel FROM  cartoon WHERE id = (SELECT max(id)           FROM  cartoon) ORDER BY production_code, channel;
SELECT package_option,    series_name FROM  tv_channel WHERE hight_definition_tv = 'Yes';
SELECT package_option,    series_name FROM  tv_channel WHERE hight_definition_tv = 'Yes';
SELECT DISTINCT country FROM  tv_channel join cartoon on id = channel WHERE written_by = '<NAME>';
SELECT DISTINCT country FROM  cartoon join tv_channel on channel = id WHERE written_by = '<NAME>' ORDER BY country;
SELECT DISTINCT country FROM  tv_channel WHERE id not in (select channel               from  cartoon               where written_by = '<NAME>') ORDER BY country;
SELECT DISTINCT country FROM  tv_channel WHERE id not in (select channel               from  cartoon               where written_by = '<NAME>') ORDER BY country;
SELECT series_name,    country FROM  tv_channel join cartoon      on id = channel WHERE directed_by in ('Ben Jones', 'Michael Chang') ORDER BY series;
SELECT DISTINCT series_name,         country FROM  tv_channel join cartoon on id = channel WHERE directed_by in ('Ben Jones', 'Michael Chang');
SELECT pixel_aspect_ratio_par,    country FROM  tv_channel WHERE language!= 'English' ORDER BY pixel_aspect_ratio_par asc;
SELECT pixel_aspect_ratio_par,    country FROM  tv_channel WHERE language!= 'English' ORDER BY country;
SELECT id FROM  tv_channel tvc GROUP BY id, country HAVING count(*) > 2 ORDER BY id asc;
SELECT id FROM  tv_channel GROUP BY id HAVING count(*) > 2;
SELECT DISTINCT id FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY id asc;
SELECT DISTINCT id FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY id asc;
SELECT DISTINCT package_option FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY package_option;
SELECT DISTINCT package_option FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY package_option;
SELECT count(*) FROM  poker_player;
SELECT count(*)    FROM  poker_player;
SELECT earnings    FROM  poker_player    ORDER BY earnings DESC;
SELECT earnings,      name   FROM  poker_player join people on people_id = people_id   ORDER BY earnings DESC;
SELECT final_table_made,    best_finish    FROM  poker_player    ORDER BY final_table_made, best_finish;
SELECT final_table_made,    best_finish FROM  poker_player JOIN  people on people_id = people_id ORDER BY final_table_made, best;
SELECT AVG(earnings) FROM  poker_player;
SELECT AVG(earnings) FROM  poker_player;
SELECT money_rank    FROM  poker_player    WHERE earnings = (SELECT MAX(earnings)                   FROM  poker_player);
SELECT money_rank    FROM  poker_player    WHERE earnings = (SELECT MAX(earnings)                   FROM  poker_player);
SELECT max(final_table_made) FROM  poker_player WHERE earnings < 200000;
SELECT max(final_table_made) FROM  poker_player WHERE earnings < 200000;
SELECT name    FROM  people join poker_player        ON people_id = people_id    ORDER BY name asc;
SELECT name    FROM  people join poker_player        on people_id = people_id    ORDER BY name asc;
SELECT name FROM  people join poker_player on people_id = people_id WHERE earnings > 300000;
SELECT name    FROM  people join poker_player        ON people_id = people_id    WHERE earnings > 300000;
SELECT name    FROM  people join poker_player        ON people_id = people_id    ORDER BY final_table_made asc;
SELECT name,      final_table_made    FROM  people join poker_player on people_id = people_id    ORDER BY final_table_made asc;
SELECT birth_date FROM  people join poker_player on people_id = people_id WHERE earnings = (SELECT min(earnings)                 FROM  poker_player) ORDER BY birth_;
SELECT birth_date FROM  people join poker_player on people_id = people_id WHERE earnings = (SELECT min(earnings)                 FROM  poker_player) ORDER BY birth_;
SELECT money_rank    FROM  poker_player join people        ON people_id = people_id    WHERE height = (SELECT max(height)                FROM  people)    ORDER BY money_rank desc;
SELECT money_rank    FROM  poker_player join people        ON people_id = people_id    WHERE height = (SELECT MAX(height)                FROM  people)    ORDER BY money_rank DESC;
SELECT AVG(earnings) FROM  poker_player join people on people_id = people_id WHERE height > 200;
SELECT AVG(earnings) FROM  poker_player join people on people_id = people_id WHERE height > 200;
SELECT name    FROM  people join poker_player        on people_id = people_id    ORDER BY earnings DESC;
SELECT name    FROM  people join poker_player        on people_id = people_id    ORDER BY earnings DESC;
SELECT nationality,    count(*) FROM  people GROUP BY nationality ORDER BY number_of_people DESC;
SELECT nationality,    count(*) FROM  people GROUP BY nationality ORDER BY count DESC;
SELECT nationality,    count(*) FROM  people GROUP BY nationality ORDER BY frequency DESC LIMIT 1;
SELECT nationality,        count(*)    FROM  people    GROUP BY nationality    ORDER BY count DESC    LIMIT 1;
WITH shared_nationalities  SELECT nationality, count(*)  FROM people  GROUP BY nationality  HAVING count(*) >= 2 ) SELECT nationality FROM shared_nationalities ORDER BY nationality;
SELECT nationality FROM  people GROUP BY nationality HAVING count(*) >= 2;
SELECT name,        birth_date    FROM  people    ORDER BY name ASC;
SELECT name,        birth_date    FROM  people    ORDER BY name;
SELECT name    FROM  people    WHERE nationality!= 'Russia';
SELECT name    FROM  people    WHERE nationality!= 'Russia';
SELECT name    FROM  people    WHERE people_id not in (SELECT people_id                    FROM  poker_player);
SELECT name FROM people WHERE people_id NOT IN (SELECT people_id                FROM poker_player);
SELECT COUNT(DISTINCT nationality) FROM  people;
SELECT COUNT(DISTINCT nationality) FROM  people;
SELECT COUNT(DISTINCT state) FROM  AREA_CODE_STATE;
SELECT contestant_number,    contestant_name   FROM contestants   ORDER BY contestant_name DESC;
SELECT vote_id,        phone_number,        state    FROM  votes v        join area_code_state a on state = state    ORDER BY vote_id asc;
SELECT min(area_code),    max(area_code)    FROM area_code_state;
SELECT max(created)    FROM  votes v    WHERE state = 'CA';
SELECT contestant_name    FROM  CONTESTANTS    WHERE contestant_name!= 'Jessie Alloway';
SELECT DISTINCT state, created    FROM  votes v    ORDER BY state, created;
SELECT contestant_number,    contestant_name FROM  CONTESTANTS WHERE contestant_number in (SELECT contestant_number               FROM  VOTES               GROUP BY contestant_number               HAVING count(*) >= 2) ORDER BY contestant_number asc;
WITH contestant_votes  SELECT contestant_number,     count(*)  FROM  votes  GROUP BY contestant_number ) SELECT contestant_number,    contestant_name FROM  contestant_votes cv join contestants c on contestant_number = c;
SELECT count(*) FROM  votes WHERE state in ('NY', 'CA');
SELECT COUNT(*) FROM CONTESTANTS c WHERE contestant_number not in (SELECT contestant_number                  FROM  VOTES v);
SELECT area_code,    state,    count(*) FROM  area_code_state join votes on state = state GROUP BY area_code, area_code_;
SELECT created,        state,        phone_number    FROM  votes v join contestants c on contestant_number = contestant_number join area_code_state a on state = state    WHERE contestant_name = 'Tabath;
SELECT DISTINCT area_code FROM  votes v1 JOIN votes v2  ON contestant_number = contestant_number WHERE contestant_number = (SELECT contestant_number                FROM  contestants                WHERE contestant_;
SELECT contestant_name    FROM  contestants    WHERE contestant_name like '%Al%';
SELECT name    FROM  country    WHERE indepyear > 1950;
SELECT name    FROM  country    WHERE indepyear > 1950;
SELECT count(*) FROM  country WHERE governmentform ='republic';
SELECT count(*) FROM  country WHERE GovernmentForm = 'Republic';
SELECT region,        name,        surfacearea    FROM  country    WHERE region = 'Caribbean'    ORDER BY surfacearea desc;
SELECT SUM(surfacearea) FROM  country WHERE continent = 'Caribbean';
SELECT continent    FROM  country    WHERE name = 'Anguilla';
SELECT continent    FROM  country    WHERE name = 'Anguilla';
SELECT region FROM  city join country on CountryCode = Code WHERE Name = 'Kabul';
SELECT region    FROM  country    WHERE name = 'Kabul';
SELECT language,    percentage FROM  countrylanguage join country on countrycode = code WHERE name = 'Aruba' ORDER BY percentage desc;
SELECT language,    percentage FROM  countrylanguage join country on countrycode = code WHERE name = 'Aruba' ORDER BY percentage desc;
SELECT name,    population,    lifeexpectancy FROM  country WHERE name = 'Brazil';
SELECT name,    population,    lifeexpectancy FROM  country WHERE name = 'Brazil';
SELECT region,      population    FROM  country    WHERE name = 'Angola';
SELECT region,      population    FROM  country    WHERE name = 'Angola';
SELECT name,    life_expectancy FROM  country WHERE region = 'Central Africa' GROUP BY name, life_expectancy HAVING count(*) > 100 ORDER BY life_expectancy asc;
SELECT AVG(LifeExpectancy) FROM  country WHERE Continent = 'Africa'  AND Region = 'Central Africa';
SELECT name FROM  country WHERE continent = 'Asia' ORDER BY lifeexpectancy asc LIMIT 1;
SELECT name    FROM  country    WHERE continent = 'Asia'    ORDER BY lifeexpectancy ASC    LIMIT 1;
SELECT region,    name,    population,    gnp FROM  country WHERE continent = 'Asia' ORDER BY gnp desc, population desc;
SELECT name,    gnp FROM  country WHERE continent = 'Asia' ORDER BY gnp desc LIMIT 1;
SELECT AVG(lifeexpectancy) FROM  country WHERE continent = 'Africa'  AND region = 'Africa'  AND governmentform = 'Republic';
SELECT name,    life_expectancy FROM  country WHERE continent = 'Africa'  AND government_form = 'Republic' GROUP BY name, life_expectancy HAVING count(*) >= 10 ORDER BY country;
SELECT sum(surfacearea) FROM  country WHERE continent = 'Asia'  OR continent = 'Europe';
SELECT sum(surfacearea) FROM  country WHERE continent in ('Asia', 'Europe');
SELECT population FROM  city WHERE district = 'Gelderland';
SELECT population    FROM  city    WHERE district = 'Gelderland';
SELECT name,    gnp,    population FROM  country WHERE continent = 'North America'  AND region = 'US' GROUP BY name, gnp, population ORDER BY gnp desc;
SELECT gnp,    population FROM  country WHERE continent = 'North America'  AND region = 'US' GROUP BY gnp, population HAVING count(*) > 0;
SELECT COUNT(DISTINCT language) FROM  countrylanguage;
SELECT COUNT(DISTINCT language) FROM  countrylanguage;
SELECT governmentform,    count(*) FROM  country WHERE continent = 'Africa' GROUP BY governmentform ORDER BY count DESC;
SELECT COUNT(DISTINCT governmentform) FROM  country WHERE continent = 'Africa';
SELECT sum(percentage) FROM  countrylanguage     JOIN country ON countrycode = code WHERE name = 'Aruba';
SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';
SELECT count(*) FROM countrylanguage WHERE countrycode = 'AFG'  AND isofficial = 'true';
SELECT count(*) FROM  countrylanguage WHERE isofficial = 'true'  AND countrycode = 'AFG';
SELECT name FROM  country WHERE code = (SELECT countrycode            FROM  countrylanguage            GROUP BY countrycode            ORDER BY count(*) desc            LIMIT 1);
WITH nation_language_count  SELECT name,     count(*)  FROM  country     LEFT JOIN countrylanguage ON code = countrycode  GROUP BY name  ORDER BY language_count desc  limit 1) SELECT nation_language_count;
SELECT continent,    count(distinct language) FROM  country   left join countrylanguage on code = countrycode GROUP BY continent ORDER BY language_count desc;
SELECT continent,    count(*) FROM  countrylanguage     join country on countrycode = code GROUP BY continent ORDER BY language_count DESC;
SELECT count(*) FROM  country c WHERE code IN (SELECT countrycode          FROM  countrylanguage          WHERE language = 'English'            or language = 'Dutch');
SELECT count(*) FROM  country c WHERE Name in (SELECT Name          FROM  country          WHERE Code in (SELECT CountryCode                      FROM  countrylanguage                      WHERE Language = 'English'                       or Language = 'D;
SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               or language = 'French') ORDER BY name;
SELECT DISTINCT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               or language = 'French') ORDER BY name;
SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               and isofficial = 'true') and code in (SELECT countrycode                                       FROM  countrylanguage;
SELECT name    FROM  country    WHERE code in (SELECT countrycode                FROM  countrylanguage                WHERE language in ('English', 'French'));
SELECT COUNT(DISTINCT continent) FROM country WHERE name = 'China' AND continent IS NOT NULL;
SELECT continent,    count(*) FROM  countrylanguage join country on countrycode = code WHERE language = 'Chinese' GROUP BY continent ORDER BY num_speakers DESC;
SELECT DISTINCT region FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE (language = 'English' or language = 'Dutch'));
SELECT DISTINCT region FROM  countrylanguage JOIN  country on countrycode = code WHERE (language = 'Dutch' or language = 'English') ORDER BY region;
SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               or language = 'Dutch') ORDER BY name;
SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE isofficial = 'true'               and (language = 'English'                 or language = 'Dutch')) ORDER BY name;
WITH continent_languages  SELECT continent,     language,     percentage  FROM  countrylanguage join country      ON countrycode = code  WHERE continent = 'Asia' ), most_popular_language  SELECT continent;
SELECT language,    isofficial,    percentage,    name,    continent,    region,    surfacearea,    indepyear,    population,    lifeexpectancy,    gnp,;
WITH republic_countries  SELECT name,     code  FROM  country  WHERE governmentform ='republic' ), single_country_languages  SELECT language  FROM  countrylanguage  JOIN  country on countrycode = ;
WITH country_republics  SELECT name,     code  FROM  country  WHERE governmentform ='republic') SELECT language FROM  country_republics cr, countrylanguage WHERE code = countrycode GROUP;
SELECT name,    population FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE language = 'English' ORDER BY population desc LIMIT 1;
SELECT name,    population FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE language = 'English' ORDER BY population desc LIMIT 1;
SELECT name,    population,    life_expectancy FROM  country WHERE continent = 'Asia' ORDER BY surface_area desc LIMIT 1;
SELECT name,    population,    life_expectancy FROM  country WHERE continent = 'Asia' ORDER BY population desc, life_expectancy desc LIMIT 1;
SELECT name,    life_expectancy,    region FROM  country WHERE code not in (select countrycode               from  countrylanguage               where language = 'English') GROUP BY name, life_expectancy, country;
SELECT name,    life_expectancy FROM  country WHERE code not in (select countrycode               from  countrylanguage               where language = 'English') GROUP BY name, life_expectancy HAVING count(*) = (;
SELECT sum(population) FROM  country WHERE code NOT IN (SELECT countrycode              FROM  countrylanguage              WHERE language = 'English');
SELECT name,    population,    surfacearea,    indepyear,    lifeexpectancy,    gnp,    gnpold,    localname,    governmentform,    headofstate,    capital;
SELECT language FROM  countrylanguage join country on countrycode = code WHERE headofstate = 'Beatrix'  AND isofficial = 'true';
SELECT language FROM  countrylanguage join country on countrycode = code WHERE headofstate = 'Beatrix' and name = countryname and isofficial = 'true';
SELECT count(distinct language) FROM  countrylanguage     left join country on countrycode = code WHERE indepyear < 1930;
SELECT name,    count(distinct language) FROM  country   LEFT JOIN countrylanguage ON code = countrycode WHERE indepyear < 1930 GROUP BY name ORDER BY total_distinct;
WITH european_countries  SELECT name,     surfacearea  FROM  country  WHERE continent = 'European Union' ) SELECT name FROM  country WHERE surfacearea > (SELECT max(surfacearea)                FROM  europe;
WITH country_area  SELECT name,     surfacearea  FROM  country  WHERE continent = 'Europe' ) SELECT name FROM  country WHERE surfacearea > (SELECT surfacearea                FROM  country_area) ORDER BY ;
SELECT name FROM  country WHERE continent = 'Africa'  AND population < (SELECT population              FROM  country              WHERE continent = 'Asia');
SELECT name,    population FROM  country WHERE continent = 'Africa'  AND population < (SELECT population               FROM  country               WHERE continent = 'Asia') ORDER BY population asc;
SELECT name,    population FROM  country WHERE continent = 'Asia'  AND population > (SELECT max(population)               FROM  country               WHERE continent = 'Africa');
SELECT name FROM  country WHERE continent = 'Asia'  AND population > (SELECT max(population)               FROM  country               WHERE continent = 'Africa');
SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language = 'English');
SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language = 'English');
SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language = 'English') ORDER BY code;
SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language!= 'English');
SELECT code FROM  country WHERE governmentform!= 'Republic'  AND code not in (SELECT countrycode              FROM  countrylanguage              WHERE language = 'English') ORDER BY code;
SELECT code FROM  country WHERE governmentform!= 'Republic'  AND code not in (SELECT countrycode              FROM  countrylanguage              WHERE language = 'English') ORDER BY code;
SELECT DISTINCT name FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE continent = 'Europe'  AND language!= 'English'  AND isofficial!= 'true';
SELECT name FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE continent = 'Europe'  AND language!= 'English' ORDER BY name;
SELECT DISTINCT name FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE continent = 'Asia'  AND language = 'Chinese'  AND isofficial = 'Y';
SELECT DISTINCT name FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE continent = 'Asia' and language = 'Chinese' and isofficial = 'Y';
SELECT name,        indepyear,        surfacearea    FROM  country    WHERE population = (SELECT MIN(population)                  FROM  country)    ORDER BY population asc;
SELECT name,        indepyear,        surfacearea    FROM  country    WHERE population = (SELECT MIN(population)                  FROM  country)    ORDER BY population ASC;
SELECT population,    name,    headofstate FROM  country WHERE code = (SELECT code            FROM  country            ORDER BY surfacearea desc            LIMIT 1);
SELECT name,    population,    head_of_state FROM  country WHERE surface_area = (SELECT MAX(surface_area)                FROM  country) ORDER BY surface_area DESC;
SELECT name,    count(language) FROM  country  LEFT JOIN countrylanguage ON code = countrycode GROUP BY name HAVING count(language) >= 3 ORDER BY num_languages desc;
SELECT name,    count(language) FROM  country   LEFT JOIN countrylanguage ON code = countrycode GROUP BY name HAVING count(language) > 2 ORDER BY language_count DESC;
SELECT district,    count(*) FROM  city GROUP BY district HAVING population > (SELECT avg(population)              FROM  city);
SELECT district,    count(*) FROM  city GROUP BY district HAVING population > (SELECT avg(population)              FROM  city);
SELECT governmentform,    population FROM  country WHERE lifeexpectancy > 72 ORDER BY governmentform;
SELECT governmentform,    sum(population) FROM  country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY total_population DESC;
SELECT continent,    avg(lifeexpectancy),    sum(population) FROM  country GROUP BY continent HAVING avg(lifeexpectancy) < 72 ORDER BY avg_life_exp;
SELECT continent,    name,    population,    life_expectancy,    avg_life_expectancy FROM  country WHERE avg_life_expectancy < 72 ORDER BY continent, name;
SELECT name,    surfacearea FROM  country ORDER BY surfacearea desc LIMIT 5;
SELECT name,    surfacearea    FROM country    ORDER BY surfacearea desc    LIMIT 5;
SELECT name    FROM  country    ORDER BY population DESC    LIMIT 3;
SELECT name    FROM  country    ORDER BY population DESC    LIMIT 3;
SELECT name    FROM  country    ORDER BY population asc    LIMIT 3;
SELECT name FROM  country ORDER BY population asc LIMIT 3;
SELECT count(*) FROM  country WHERE continent = 'Asia';
SELECT count(*) FROM  country WHERE continent = 'Asia';
SELECT name    FROM  country    WHERE continent = 'Europe'      and population = 80000;
SELECT name    FROM  country    WHERE continent = 'Europe'      and population = 80000;
SELECT continent,    name,    population,    surfacearea,    avg(surfacearea) OVER (PARTITION BY continent) FROM  country WHERE continent = 'North America'  AND surfacearea >;
SELECT name,    surfacearea,    population,    avg(surfacearea) OVER (PARTITION BY continent) FROM  country WHERE continent = 'North America'  AND surfacearea > 3000;
SELECT name    FROM  city    WHERE population between 160000 and 900000;
SELECT name    FROM  city    WHERE population between 160000 and 900000;
WITH country_language_count  SELECT language,     count(*)  FROM  countrylanguage  GROUP BY language  ORDER BY count DESC ) SELECT language FROM  country_language_count WHERE count =;
WITH country_language_count  SELECT language,     count(*)  FROM  countrylanguage  GROUP BY language  ORDER BY count DESC) SELECT language FROM  country_language_count WHERE count = (;
SELECT name,    language,    percentage FROM  country  LEFT JOIN countrylanguage ON code = countrycode ORDER BY percentage desc nulls last, name;
SELECT code,    name,    language,    percentage FROM  country  LEFT JOIN countrylanguage   ON code = countrycode ORDER BY percentage desc;
WITH country_spanish_speakers  SELECT name,     code,     percentage  FROM  country     INNER JOIN countrylanguage ON code = countrycode  WHERE language = 'Spanish' ) SELECT country_spanish_speak;
SELECT count(*) FROM country WHERE code in (SELECT countrycode            FROM  countrylanguage            WHERE language = 'Spanish'             AND isofficial = 'Y');
SELECT code FROM  country JOIN  countrylanguage ON code = countrycode WHERE language = 'Spanish' ORDER BY percentage desc LIMIT 1;
SELECT code FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'Spanish'             GROUP BY countrycode             HAVING count(*) >= ALL (SELECT count(*)                        FROM  countrylanguage                        WHERE;
SELECT count(*) FROM  conductor;
SELECT count(*) FROM  conductor;
SELECT name    FROM  conductor    ORDER BY age asc;
SELECT name    FROM  conductor    ORDER BY age asc;
SELECT name    FROM  conductor    WHERE nationality!= 'USA';
SELECT name    FROM  conductor    WHERE nationality!= 'USA';
SELECT record_company, year_of_founded    FROM  orchestra    ORDER BY year_of_founded desc;
SELECT record_company, year_of_founded    FROM  orchestra    ORDER BY year_of_founded DESC;
SELECT AVG(attendance) FROM  show;
SELECT AVG(attendance) FROM  show;
SELECT MIN(share::float),    MAX(share::float) FROM  performance WHERE type!= 'Live final';
SELECT MIN(share::float), MAX(share::float)    FROM  performance    WHERE type!= 'Live final';
SELECT COUNT(DISTINCT nationality) FROM  conductor;
SELECT COUNT(DISTINCT nationality) FROM  conductor;
SELECT name    FROM  conductor    ORDER BY year_of_work DESC;
SELECT name,    age,    year_of_work FROM  conductor ORDER BY year_of_work desc;
SELECT name    FROM  conductor    ORDER BY year_of_work desc    LIMIT 1;
SELECT name FROM  conductor WHERE year_of_work = (SELECT MAX(year_of_work)                 FROM  conductor) ORDER BY name;
SELECT name,      orchestra    FROM conductor    JOIN orchestra    ON conductor_id = conductor_id;
SELECT name,    orchestra FROM  conductor join orchestra on conductor_id = conductor_id ORDER BY name;
SELECT name FROM  conductor WHERE conductor_id in (   SELECT conductor_id   FROM  orchestra   GROUP BY conductor_id   HAVING count(*) > 1) ORDER BY name asc;
SELECT name FROM  conductor WHERE conductor_id in (   SELECT conductor_id   FROM  orchestra   GROUP BY conductor_id   HAVING count(*) > 1) ORDER BY name;
SELECT name FROM conductor JOIN orchestra on conductor_id = conductor_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
SELECT name FROM conductor JOIN orchestra on conductor_id = conductor_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
SELECT name FROM conductor WHERE conductor_id in (   SELECT conductor_id   FROM orchestra   WHERE year_of_founded > 2008) ORDER BY name;
SELECT name    FROM  conductor join orchestra        ON conductor_id = conductor_id    WHERE year_of_work >= 2008;
SELECT record_company,    count(orchestra_id)  orchestra GROUP BY record_company ORDER BY number_of_orchest;
SELECT record_company,    count(orchestra_id) FROM  orchestra GROUP BY record_company ORDER BY orchestra_count desc;
SELECT Major_Record_Format,    count(*) FROM  orchestra GROUP BY Major_Record_Format ORDER BY count(*) ASC;
SELECT Major_Record_Format,    count(*) FROM  orchestra GROUP BY Major_Record_Format ORDER BY frequency desc;
SELECT record_company,    count(*)  orchestra GROUP BY record_company ORDER BY num_of_orchest LIMIT 1;
SELECT record_company,    count(*)  orchestra GROUP BY record_company ORDER BY num_of_orchest LIMIT 1;
SELECT orchestra    FROM orchestra    LEFT JOIN performance    ON Orchestra_ID = Orchestra_ID    WHERE Performance_ID IS NULL;
SELECT orchestra FROM orchestra LEFT JOIN performance ON orchestra_id = orchestra_id WHERE performance_id IS NULL;
SELECT DISTINCT record_company FROM  orchestra WHERE year_of_founded < 2003  OR year_of_founded > 2003;
SELECT DISTINCT   record_company FROM  orchestra WHERE year_of_founded < 2003 INTERSECT SELECT DISTINCT   record_company FROM  orchestra WHERE year_of_founded > 200;
SELECT count(*) FROM  orchestra WHERE major_record_format in ('CD', 'DVD');
SELECT count(*) FROM  orchestra WHERE major_record_format in ('CD', 'DVD');
SELECT year_of_founded FROM  orchestra WHERE orchestra_id in (SELECT orchestra_id                  FROM  performance                  GROUP BY orchestra_id having count(*) > 1) ORDER BY year_of_founded asc;
SELECT year_of_founded FROM  orchestra WHERE orchestra_id in (SELECT orchestra_id                  FROM  performance                  GROUP BY orchestra_id having count(*) > 1) ORDER BY year_of_founded asc;
SELECT count(*)    FROM  highschooler;
SELECT count(*)    FROM  highschooler;
SELECT name,    grade    FROM  highschooler    ORDER BY name;
SELECT name,    grade    FROM  highschooler    ORDER BY name;
SELECT grade    FROM  highschooler    WHERE grade > 9    ORDER BY grade asc;
SELECT name,      grade    FROM  highschooler    ORDER BY grade asc;
SELECT grade    FROM  highschooler    WHERE name = 'Kyle';
SELECT grade    FROM  highschooler    WHERE name = 'Kyle';
SELECT name    FROM  highschooler    WHERE grade = 10;
SELECT name    FROM  highschooler    WHERE grade = 10;
SELECT id    FROM  highschooler    WHERE name = 'Kyle';
SELECT id    FROM  highschooler    WHERE name = 'Kyle';
SELECT count(*) FROM  highschooler WHERE grade = 9  OR grade = 10;
SELECT count(*) FROM  highschooler WHERE grade in (9, 10);
SELECT grade,      count(*)    FROM  highschooler    GROUP BY grade    ORDER BY grade;
SELECT grade,      count(*)    FROM  highschooler    GROUP BY grade    ORDER BY grade;
SELECT grade,        count(*)    FROM  highschooler    GROUP BY grade    ORDER BY num_highschoolers DESC    LIMIT 1;
SELECT grade    FROM  highschooler    GROUP BY grade    ORDER BY count(*) desc    LIMIT 1;
SELECT DISTINCT grade FROM  highschooler hs WHERE id in (SELECT student_id         FROM  friend         WHERE friend_id in (SELECT id                       FROM  highschooler hs                       GROUP BY id                       HAVING count(*) >= 4));
SELECT grade    FROM  highschooler    WHERE grade >= 4    GROUP BY grade    ORDER BY grade;
SELECT id,    count(friend_id)    FROM  highschooler    LEFT JOIN friend ON id = student_id    GROUP BY id    ORDER BY num_friends DESC;
SELECT id,    count(friend_id) FROM  highschooler     left join friend on id = student_id GROUP BY id;
SELECT name,    count(friend_id)    FROM  highschooler    LEFT JOIN friend ON id = student_id    WHERE grade = 10    GROUP BY name    ORDER BY number;
SELECT name,    count(friend_id) FROM  highschooler     left join friend on id = student_id GROUP BY name ORDER BY friend_count desc;
SELECT name    FROM  highschooler    LEFT JOIN friend      ON id = student_id    GROUP BY name    ORDER BY count(*) desc    LIMIT 1;
WITH friend_counts  SELECT name,     count(*)  FROM  friend join highschooler      on student_id = id  GROUP BY name  ORDER BY friend_count desc nulls last limit 1 ) SELECT;
SELECT name FROM  highschooler join friend on id = student_id GROUP BY name HAVING count(*) >= 3;
SELECT name FROM  highschooler join friend on id = student_id GROUP BY name HAVING count(*) >= 3;
WITH kyle_friends  SELECT friend_id  FROM  friend  WHERE student_id = 1000000 ) SELECT name FROM  highschooler, kyle_friends WHERE id = kyle_;
SELECT friend_id,        name    FROM  friend join highschooler on friend_id = id    WHERE student_id = (SELECT id                  FROM  highschooler                  WHERE name = 'Kyle');
WITH kyle_friends  SELECT count(*)  FROM  friend  WHERE student_id = (SELECT id                FROM  highschooler                WHERE name = 'Kyle') ) SELECT kyle_friend_count FROM;
WITH kyle_friends  SELECT count(*)  FROM  friend  WHERE student_id = (SELECT id                FROM  highschooler                WHERE name = 'Kyle') ) SELECT kyle_friend_count;
SELECT id    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend)    ORDER BY id asc;
SELECT id    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend)    AND grade = 13;
SELECT name    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend) and grade = 13;
SELECT name    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend);
WITH friend_and_like  SELECT student_id  FROM  friend join highschooler on friend_id = id  WHERE friend_id in (select distinct liked_id from likes) ) SELECT id FROM;
WITH friend_ids  SELECT friend_id  FROM  friend  GROUP BY friend_id  HAVING count(*) > 1 ), liked_ids  SELECT student_id  FROM  likes  GROUP BY student_id  HAVING count(*) > 0 ) SELECT friend;
WITH friend_of_someone  SELECT student_id  FROM  friend  GROUP BY student_id  HAVING count(*) > 0 ), liked_by_someone  SELECT student_id  FROM  likes  GROUP BY student;
SELECT name FROM  highschooler WHERE id in (SELECT student_id               FROM  friend               WHERE friend_id in (SELECT liked_id                            FROM  likes                            WHERE student_id in (SELECT student;
SELECT id,    count(student_id) FROM  highschooler    left join likes on id = student_id GROUP BY id ORDER BY number_of_likes desc;
SELECT id,    count(student_id) FROM  highschooler    left join likes on id = student_id GROUP BY id ORDER BY likes_count desc;
SELECT name,    count(student_id) FROM  highschooler    left join friend on id = student_id    left join likes on id = student_id WHERE ;
SELECT name,    count(student_id) FROM  highschooler     left join friend on id = student_id     left join likes on id = student_id WHERE friend_id is;
SELECT name    FROM  highschooler    JOIN  (SELECT student_id,           count(*)        FROM  likes        GROUP BY student_id        ORDER BY num_likes desc        limit 1) on id =;
SELECT name    FROM  highschooler    JOIN  (SELECT student_id,           count(*)        FROM  likes        GROUP BY student_id        ORDER BY likes_count desc        limit 1) on id =;
SELECT name FROM  highschooler,    likes WHERE id = student_id GROUP BY name, id HAVING count(*) >= 2;
SELECT name FROM  highschooler,    likes WHERE id = student_id GROUP BY name, id HAVING count(*) >= 2;
SELECT name    FROM  highschooler    WHERE grade > 5    GROUP BY name    HAVING count(*) >= 2;
SELECT name FROM  highschooler join friend on id = student_id WHERE grade > 5 GROUP BY name HAVING count(*) >= 2;
SELECT count(*) FROM  Likes WHERE student_id = (SELECT ID              FROM  Highschooler              WHERE name = 'Kyle');
SELECT count(*)  FROM  Likes  WHERE student_id = (SELECT ID               FROM  Highschooler               WHERE name = 'Kyle');
WITH student_friends  SELECT student_id,     friend_id  FROM  friend  GROUP BY student_id, friend_id  HAVING count(*) > 0 ) SELECT avg(grade) FROM;
WITH student_friends  SELECT student_id,     friend_id  FROM  friend  WHERE friend_id IS NOT NULL  GROUP BY student_id, friend_id ) SELECT avg(grade) FROM;
SELECT min(grade)    FROM  highschooler hs    WHERE id not in (SELECT student_id              FROM  friend);
SELECT min(grade)    FROM  highschooler hs    WHERE id not in (SELECT student_id              FROM  friend);
WITH owner_states  SELECT DISTINCT state  FROM  owners ), prof_states  SELECT DISTINCT state  FROM  professionals ) SELECT DISTINCT state FROM  owner_states INTERSECT SELECT DISTINCT state FROM  prof_states;
WITH owner_states  SELECT DISTINCT state  FROM  owners ), prof_states  SELECT DISTINCT state  FROM  professionals ) SELECT DISTINCT state FROM  owner_states INTERSECT SELECT DISTINCT state FROM  prof_states;
SELECT avg(age::float) FROM  dogs WHERE dog_id in (SELECT dog_id            FROM  treatments);
SELECT avg(age::float) FROM  dogs WHERE dog_id in (SELECT dog_id            FROM  treatments);
SELECT professional_id,    last_name,    cell_number FROM  professionals p WHERE state = 'Indiana'  or (SELECT count(*)   FROM  treatments t   WHERE professional_id = professional_;
SELECT professional_id,    last_name,    cell_number FROM  professionals p WHERE state = 'Indiana'  or (SELECT count(*)   FROM  treatments t   WHERE professional_id = professional_;
SELECT DISTINCT name FROM  dog d WHERE owner_id NOT IN (SELECT owner_id              FROM  owner o              WHERE owner_id in (SELECT owner_id                        FROM  dog d                        WHERE dog_id in (SELECT dog;
SELECT DISTINCT name FROM  dogs WHERE owner_id NOT IN (SELECT dog_id               FROM  treatments               WHERE cost_of_treatment > 1000);
SELECT DISTINCT first_name FROM  professionals WHERE first_name NOT IN (SELECT name                     FROM  dog) UNION SELECT DISTINCT first_name FROM  owners WHERE first_name NOT IN (SELECT name;
SELECT DISTINCT first_name FROM  professionals WHERE first_name NOT IN (SELECT name                     FROM  dog) UNION SELECT DISTINCT first_name FROM  owners WHERE first_name NOT IN (SELECT name;
SELECT professional_id,    role_code,    email_address FROM  professionals p WHERE professional_id not in (SELECT professional_id                 FROM  treatments t                 WHERE dog_id in (SELECT dog;
SELECT professional_id,        role_code,        email_address    FROM  professionals prof    WHERE professional_id not in (SELECT professional_id                      FROM  professionals prof                      JOIN treatments trt on professional_id;
SELECT owner_id,        first_name,        last_name    FROM  owners    LEFT JOIN (SELECT dog_id,             owner_id          FROM  dogs) ON owner_id = owner_id    WHERE owned_;
SELECT owner_id,        first_name,        last_name    FROM  owners    WHERE owner_id in (SELECT owner_id                 FROM  dog                 GROUP BY owner_id                 ORDER BY count(*) DESC                 LIMIT 1);
SELECT professional_id,    role_code,    first_name FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(*);
SELECT professional_id,    role_code,    first_name FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(*);
SELECT breed_name    FROM  breeds    LEFT JOIN (SELECT breed_code,             count(*)          FROM  dogs          GROUP BY breed_code) ON breed_code = breed_code;
SELECT breed_name    FROM  breeds    JOIN  (SELECT breed_code,            count(*)        FROM  dogs        GROUP BY breed_code        ORDER BY count(*) DESC        LIMIT 1)    ON breeds;
SELECT owner_id,    last_name FROM  (SELECT owner_id,         dog_id,         count(*)     FROM  dog d     LEFT JOIN treatments t on dog_id = dog_id     WHERE d;
SELECT owner_id,    last_name FROM  (SELECT owner_id,         last_name,         sum(cost_of_treatment)     FROM  dog d join treatments t on dog_id = dog_;
SELECT treatment_type_description FROM  treatment_types WHERE treatment_type_code in (SELECT treatment_type_code                        FROM  treatments                        ORDER BY cost_of_treatment asc                        LIMIT 1);
SELECT treatment_type_description FROM  treatment_types WHERE treatment_type_code in (SELECT treatment_type_code                        FROM  treatments                        ORDER BY cost_of_treatment asc                        LIMIT 1);
SELECT owner_id,    zip_code FROM  owners WHERE owner_id in (SELECT owner_id              FROM  dog              WHERE dog_id in (SELECT dog_id                         FROM  treat                         WHERE professional_id in;
SELECT owner_id,    zip_code FROM  owners WHERE owner_id in (SELECT owner_id              FROM  dog              WHERE dog_id in (SELECT dog_id                         FROM  treat                         WHERE professional_id in;
SELECT professional_id,    cell_number FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(treatment_type_;
SELECT DISTINCT professional_id, cell_number FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(*) >= 2) ORDER BY;
SELECT first_name,    last_name FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               WHERE cost_of_treatment < (SELECT avg(cost_of_treatment);
WITH avg_treatment_cost  SELECT avg(cost_of_treatment)  FROM  treatments ) SELECT first_name,    last_name FROM  professionals p JOIN  treatments t on professional_id = t;
SELECT date_of_treatment,        first_name    FROM  treatments        JOIN professionals ON professional_id = professional_id    ORDER BY date_of_treatment asc;
SELECT date_of_treatment,        first_name    FROM  treatments        JOIN professionals ON professional_id = professional_id    ORDER BY date_of_treatment asc;
SELECT treatment_id,        cost_of_treatment,        treatment_type_description    FROM  treatments join treatment_types        ON treatment_type_code = treatment_type_code    ORDER BY ;
SELECT treatment_id,    cost_of_treatment,    treatment_type_description FROM  treatments join treatment_types on treatment_type_code = treatment_type_code ORDER BY ;
SELECT first_name,        last_name,        size_description    FROM  owners join dogs on owner_id = owner_id join sizes on size_code = size_code    WHERE owner_id = owner;
SELECT first_name,        last_name,        size_description    FROM  owners    LEFT JOIN dogs on owner_id = owner_id    LEFT JOIN sizes on size_code = size_code;
SELECT first_name, name    FROM  owners o,       dogs d    WHERE owner_id = owner_id;
SELECT first_name,        name    FROM  owners       left join dogs on owner_id = owner_id    ORDER BY first_name;
SELECT name,        date_of_treatment    FROM  dog    LEFT JOIN (SELECT dog_id,             date_of_treatment          FROM  treatments          ORDER BY date_of_treatment ASC NULLS FIRST) treatment ON dog_id = dog_id    WHERE;
SELECT name,    treatment_type_description FROM  (SELECT dog_id,         name,         date_of_birth,         date_of_treatment     FROM  Dogs d     WHERE breed_code = (SELECT b;
SELECT first_name,        name    FROM  dogs join owners on owner_id = owner_id    WHERE state = 'Virginia';
SELECT first_name, name    FROM  owners o join dogs d on owner_id = owner_id    WHERE state = 'VA';
SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  (SELECT dog_id,            date_of_birth,            date_arrived,            date_departed        FROM  dogs        WHERE dog_id in (SELECT;
SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  (SELECT dog_id,            date_of_birth,            date_arrived,            date_departed        FROM  dog_table        WHERE dog_id in (SELECT dog_id;
SELECT last_name    FROM  (SELECT owner_id,            date_of_birth        FROM  Dogs d        WHERE owner_id is not null        ORDER BY date_of_birth asc) t inner join Owners o on owner_id = o;
SELECT last_name    FROM  (SELECT dog_id,           owner_id,           last_name        FROM  Dogs d        JOIN  Owners o ON owner_id = owner_id        WHERE age = 'Puppy'        ORDER;
SELECT email_address    FROM  professionals    WHERE state = 'Hawaii'      or state = 'Wisconsin';
SELECT DISTINCT email_address    FROM  professionals    WHERE state in ('Hawaii', 'Wisconsin');
SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  dogs    ORDER BY dog_id;
SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  dogs    ORDER BY dog_id;
SELECT count(*) FROM  (SELECT DISTINCT dog_id     FROM  Treatments);
SELECT count(*)  FROM  dog_table  WHERE dog_id in (SELECT dog_id           FROM  treatments);
SELECT count(distinct professional_id) FROM  professionals p LEFT JOIN treatments t  ON professional_id = professional_id WHERE dog_id is not null;
SELECT count(distinct professional_id) FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               WHERE dog_id in (SELECT dog_id                         FROM;
SELECT role_code,        first_name,        street,        city,        state     FROM professionals     WHERE city ilike '%West%'     ORDER BY role_code, profession;
SELECT role_code,        street,        city,        state     FROM professionals     WHERE city ilike '%West%'     ORDER BY role_code;
SELECT first_name,        last_name,        email_address    FROM  owners    WHERE state like '%North%'    ORDER BY first_name, last_name;
SELECT first_name,        last_name,        email_address    FROM  owners    WHERE state like '%North%';
WITH avg_age  SELECT avg(cast(age))  FROM  Dogs ) SELECT count(*) FROM  Dogs WHERE cast(age) < (SELECT avg_age from avg_age);
SELECT count(*) FROM  (SELECT dog_id     FROM  dogs     WHERE age::float < (SELECT avg(age::float)               FROM  dogs));
SELECT cost_of_treatment FROM  treatments WHERE treatment_id = (SELECT MAX(treatment_id)                 FROM  treatments);
SELECT cost_of_treatment FROM  treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment)                    FROM  treatments) ORDER BY cost_of_treatment DESC;
SELECT count(*) FROM  (SELECT dog_id     FROM  Dogs     WHERE dog_id not in (SELECT dog_id                FROM  Treatments));
SELECT count(*) FROM  dog WHERE dog_id not in (SELECT dog_id              FROM  treatments);
SELECT count(*)Number of owners temporarily do not have any dogs" FROM  (SELECT DISTINCT owner_id     FROM  owners     LEFT JOIN dogs on owner_id = owner_id     WHERE dog_id is null     AND  owner_;
SELECT count(*)Number of owners who do not own any dogs at this " FROM  owners WHERE owner_id not in (select owner_id from dogs);
SELECT count(*) FROM  professionals WHERE professional_id not in (SELECT professional_id                 FROM  treatments);
SELECT count(*) FROM  professionals p WHERE professional_id not in (select professional_id                 from  treatments);
SELECT dog_id,        name,        age,        weight    FROM  dogs    WHERE abandoned_yn = '1';
SELECT dog_id,        name,        age,        weight    FROM  dogs    WHERE abandoned_yn = '1';
SELECT AVG(CAST(age))    FROM  Dogs;
SELECT AVG(CAST(age))    FROM  Dogs;
SELECT dog_id,        age    FROM  (SELECT dog_id,            age        FROM  dogs        WHERE age!= ''        ORDER BY age asc)    LIMIT 1;
SELECT dog_id,        age    FROM  (SELECT dog_id,            age        FROM  dogs        WHERE age!= ''        ORDER BY age asc)    LIMIT 1;
SELECT charge_type,        charge_amount    FROM  charges    ORDER BY charge_type;
SELECT charge_type,        charge_amount    FROM  charges    ORDER BY charge_type;
SELECT max(charged_amount)::float    FROM  charges    WHERE charge_type = 'Most Expensive Charge Type';
SELECT max(charge_amount)  FROM  charges;
SELECT email_address,        cell_number,        home_phone    FROM  professionals;
SELECT first_name,        last_name,        email_address,        cell_number,        home_phone    FROM  professionals;
SELECT breed_name,        size_description    FROM  breeds, sizes    WHERE breed_code = size_code    GROUP BY breed_name, size_description    ORDER BY breed_;
SELECT DISTINCT breed_name,            size_description     FROM dogs     JOIN breeds ON breed_code = breed_code     JOIN sizes ON size_code = size_code;
SELECT first_name,        treatment_type_description    FROM  professionals        LEFT JOIN treatments           ON professional_id = professional_id    ORDER BY first_name;
SELECT first_name,    treatment_type_description FROM  professionals p join treatments t on professional_id = professional_id;
SELECT count(*) FROM singer;
SELECT count(*)    FROM  singer;
SELECT name    FROM  singer    ORDER BY net_worth_millions asc;
SELECT name    FROM  singer    ORDER BY net_worth_millions asc;
SELECT birth_year,    citizenship    FROM singer    ORDER BY birth_year asc;
SELECT name,        birth_year,        citizenship    FROM  singer    ORDER BY name;
SELECT name    FROM  singer    WHERE citizenship!= 'France';
SELECT name    FROM  singer    WHERE citizenship!= 'France';
SELECT name    FROM  singer    WHERE birth_year in (1948, 1949);
SELECT name    FROM  singer    WHERE birth_year = 1948    UNION    SELECT name    FROM  singer    WHERE birth_year = 1949;
SELECT name FROM  singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions)                   FROM  singer) ORDER BY net_worth_millions DESC;
SELECT name FROM  singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions)                   FROM  singer);
SELECT citizenship,    count(*) FROM  singer GROUP BY citizenship ORDER BY number_of_singers desc;
SELECT citizenship,    count(*) FROM  singer GROUP BY citizenship ORDER BY num_singers desc;
SELECT citizenship,        count(*)    FROM  singer    GROUP BY citizenship    ORDER BY frequency DESC    LIMIT 1;
SELECT citizenship,    count(*) FROM  singer GROUP BY citizenship ORDER BY frequency DESC LIMIT 1;
SELECT citizenship,    max(net_worth_millions) FROM  singer GROUP BY citizenship ORDER BY max_net_worth desc;
SELECT citizenship,    max(net_worth_millions) FROM  singer GROUP BY citizenship HAVING max(net_worth_millions) > 0;
SELECT title, name FROM  song join singer on singer_id = singer_id;
SELECT title, name FROM  song join singer on singer_id = singer_id;
SELECT DISTINCT name FROM  singer join song on singer_id = singer_id WHERE sales > 300000;
SELECT DISTINCT name FROM  singer join song on singer_id = singer_id WHERE sales > 300000;
SELECT name FROM  singer join song on singer_id = singer_id GROUP BY name HAVING count(*) > 1;
SELECT name FROM  singer JOIN  song on singer_id = singer_id GROUP BY name HAVING count(*) > 1;
SELECT name,    sum(sales) FROM  singer join song on singer_id = singer_id GROUP BY name ORDER BY total_sales desc;
SELECT name,    sum(sales) FROM  singer join song on singer_id = singer_id GROUP BY name ORDER BY total_sales desc;
SELECT name FROM  singer WHERE Singer_ID not in (SELECT singer_id                 FROM  song);
SELECT name FROM  singer WHERE Singer_ID not in (SELECT singer_id                 FROM  song);
SELECT DISTINCT citizenship    FROM  singer    WHERE birth_year between 1945 and 1955;
SELECT DISTINCT citizenship FROM  singer WHERE birth_year between 1945 and 1955;
SELECT count(*) FROM  other_available_features;
SELECT feature_type_name    FROM  ref_feature_types    WHERE feature_type_code = 'AIRCON';
SELECT property_type_code,        property_type_description    FROM  properties        LEFT JOIN ref_property_types            ON property_type_code = property_type_code    WHERE property_type_code = 'PROPTYPE;
SELECT property_name    FROM  properties    WHERE property_type_code in ('H', 'A')      and room_count > 1;