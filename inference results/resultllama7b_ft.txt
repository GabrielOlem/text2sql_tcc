
eval_err_num:1
medium pred: select t1.name,  t2.country,  t3.age from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id order by t3.age;
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
neval_err_num:2
medium pred: select avg(t1.age),  min(t2.age),  max(t2.age) from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where country  =  "france
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
neval_err_num:3
medium pred: select avg(t1.age),  min(t2.age),  max(t2.age) from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where country  =  "france
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
neval_err_num:4
medium pred: select t1.song_name,  t2.song_release_year from singer as t1 join song as t2 on t1.song_name  =  t2.title where age  <  (select min(t3.age) from singer as t3);
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:5
medium pred: select t1.song_name,  t2.song_release_year from song as t1 join singer as t2 on t1.song_name  =  t2.song_name where is_male  =  "false" and age  <= (select min(t3.age) from singer
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neasy pred: select country from singer where is_male!= "t" and age >  20 group by country;
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20
neasy pred: select distinct country from singer where is_male!= "t" and age  >  20;
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20
nmedium pred: select name,  count(*) from singer group by country;
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
neval_err_num:6
hard pred: select t1.song_name from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where is_male!= 'f' intersect select t3.song_name from singer as t1 join singer_in_concert
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
nhard pred: select t1.song_name from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where age > (select avg(t3.age) from singer as t3);
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
neval_err_num:7
medium pred: select t2.location,  t1.name from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id where t1.capacity between 5000 and 10000;
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
neval_err_num:8
medium pred: select location,  name from station where capacity between 5000 and 10000;
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
neval_err_num:9
medium pred: select max(t1.capacity),  avg(t2.capacity) from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id;
medium gold: select max(capacity), average from stadium
neval_err_num:10
medium pred: select avg(t1.capacity),  max(t2.capacity) from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id;
medium gold: select avg(capacity) ,  max(capacity) from stadium
neval_err_num:11
medium pred: select t1.name,  t2.capacity from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id order by t2.avg(attendance) desc limit 1;
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
neval_err_num:12
medium pred: select t1.name,  t2.capacity from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id order by avg(t2.attendance) desc limit 1;
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
nmedium pred: select count(*) from concert where year  =  2014 intersect select count(*) from concert where year  =  2015;
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
neval_err_num:13
medium pred: select t1.name,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t2.stadium_id;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
nmedium pred: select count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id; unnest(distinct location)
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:14
extra pred: select t3.name,  t5.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id join singer_in_concert as t3 on t1.concert_id  =  t3.concert_
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:15
extra pred: select t4.name,  t5.capacity from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id join singer as t3 on t2.singer_id  =  t3.singer_id
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
nhard pred: select t1.year from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id group by t1.year order by count(*) desc limit 1;
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
nhard pred: select max(t1.year) from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id group by t1.year;
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
nhard pred: select name from stadium where stadium_id not in (select t1.stadium_id from concert as t1 join singer_in_concert as t2 on t1.stadium_id  =  t2.concert_id);
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
nhard pred: select name from stadium where stadium_id not in (select t1.stadium_id from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id);
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
nhard pred: select country from singer where is_male!= 't' intersect select country from singer except select t1.country from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id group by t1.country having count(*) >  4
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
neval_err_num:16
hard pred: select name from stadium where location!= "outside" intersect select t3.name from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id intersect select t5.name from singer_in_concert as t3 join concert as t4
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:17
hard pred: select t3.name from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id join stadium as t3 on t2.stadium_id  =  t3.stadium_id where year(t1.
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:18
medium pred: select t1.concert_name,  t2.theme from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id;
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
neval_err_num:19
medium pred: select t1.concert_name,  t2.theme,  count(*) from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id group by t1.concert_name;
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
nmedium pred: select t1.name,  count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id group by name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
nmedium pred: select t1.name,  count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id group by name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:20
hard pred: select t3.name from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id join singer as t3 on t2.singer_id  =  t3.singer_id where t1.year  =
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:21
hard pred: select t3.name from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id join singer as t3 on t2.singer_id  =  t3.singer_id where year(t1.year
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:22
medium pred: select t1.name,  t2.nation from singer as t1 join song_name as t2 on t1.song_name  =  t2.song_name where t2.title like '%hey%';
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:23
medium pred: select t1.name,  t2.country from singer as t1 join song_title as t2 on t1.song_name like '% hey %';
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:24
extra pred: select t3.name,  t1.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where year(t1.date)  =  2014 intersect select t3.name,  t1.location from
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
neval_err_num:25
extra pred: select t3.name,  t1.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id join singer_in_concert as t3 on t1.concert_id  =  t3.concert_id
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
nhard pred: select count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t2.capacity  =  (select max(t3.capacity) from stadium as t3);
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neval_err_num:26
hard pred: select count(*) from concert where highest  =  (select max(t1.highest) from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id);
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neval_err_num:27
medium pred: select t2.weight from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where t1.pet_age  <= (select min(t3.pet_age) from pets as t3);
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
nmedium pred: select weight from pets where pet_age  =   (select min(t1.pet_age) from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t1.petid);
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:28
medium pred: select max(t2.weight),  t1.pettype from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t1.pettype;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
neval_err_num:29
medium pred: select max(t1.weight),  t2.pettype from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t2.pettype;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
nmedium pred: select count(*) from has_pet where stuid  >  20;
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
nmedium pred: select count(*) from has_pet where stuid  >  20;
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:30
hard pred: select count(*) from pets as t1 join student as t2 on t1.petid  =  t2.stuid where t2.sex  =  'f' and t1.tpeet  =  "dog";
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:31
hard pred: select count(*) from has_pet as t1 join student as t2 on t1.stuid  =  t2.stuid where t2.sex  =  'f' and t1.t1.pettype  =  "dog";
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:32
easy pred: select count(distinct t1.t2) from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid;
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:33
easy pred: select count(distinct t1.t2) from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid;
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:34
extra pred: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.t1type  =  "cat" intersect select t1.fname from student as t1 join has_pet as t2 on t1.
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:35
extra pred: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.t1type  =  "cat" intersect select t1.fname from student as t1 join has_pet as t2 on t1.
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:36
extra pred: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.t1type  =  "cat" intersect select t1.fname from student as t1 join has_pet as t2 on t1.
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
nextra pred: select fname from student where stuid in (select t1.stuid from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid group by petid having count(*)  >  2);
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
neval_err_num:37
extra pred: select t1.major,  t2.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.t3!= "cat";
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:38
extra pred: select t1.major,  count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.t3!= "cat" group by t1.major;
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:39
hard pred: select stuid from has_pet where t1.t2 != "cat";
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:40
hard pred: select stuid from has_pet where pettype  =  "cat"; except select distinct t1.stuid from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid;
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:41
extra pred: select t1.fname,  t2.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.t1type!= "cat" group by t1.stuid having count(*) >  0;
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:42
extra pred: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.pettype  =  "dog" except select fname from student;
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:43
medium pred: select t1.t2 from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid where t2.pet_age  <= (select min(pet_age) from pets);
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:44
medium pred: select t1.t2 from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid order by t2.pet_age limit 1;
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:45
medium pred: select t2.petid,  t3.weight from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where t1.pet_age  >  1;
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
neval_err_num:46
medium pred: select avg(t1.pet_age),  max(t2.pet_age) from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t1.pettype;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:47
medium pred: select avg(t1.pet_age),  max(t2.pet_age) from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t1.pettype;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:48
medium pred: select avg(t2.weight),  t1.pettype from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t1.pettype;
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:49
medium pred: select avg(t2.weight),  t1.pettype from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid group by t1.pettype;
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:50
medium pred: select t1.fname,  t2.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.petid!= "null";
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
nmedium pred: select distinct fname,  age from student where stuid in (select t1.stuid from has_pet as t1 join student as t2 on t1.stuid  =  t2.stuid);
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:51
medium pred: select t1.petid from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid where t2.tname  = 'smith';
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
neval_err_num:52
medium pred: select t1.petid from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid where t2.tname  =  "smith";
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
nmedium pred: select count(*),  stuid from has_pet group by stuid;
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
nmedium pred: select stuid from has_pet group by stuid;
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
neval_err_num:53
medium pred: select t1.fname,  t2.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1;
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:54
medium pred: select t1.fname,  t2.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1;
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:55
hard pred: select t2.lname from has_pet as t1 join student as t2 on t1.stuid  =  t2.stuid where t1.pettype  =  "cat" intersect select t2.lname from has_pet as t1 join student as t2 on t1.st
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:56
hard pred: select t2.lname from has_pet as t1 join pets as t2 on t1.petid  =  t2.petid where t1.t1type  =  "cat" intersect select t2.lname from has_pet as t1 join pets as t2 on t
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
nextra pred: select avg(t1.age) from student as t1 join has_pet as t2 on t1.stuid !=  t2.stuid;
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)
nextra pred: select avg(t1.age) from student as t1 join has_pet as t2 on t1.stuid !=  t2.stuid;
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)
neval_err_num:57
medium pred: select t1.contid,  t2.continent from continents as t1 join countries as t2 on t1.contid  =  t2.contid group by t1.contid;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
nmedium pred: select t1.contid,  contid from continents as t1 join countries as t2 on t1.contid  =  t2.continent;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:58
medium pred: select t1.fullname,  t2.id, count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.t1 where make!= "unknown" group by t1.id;
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
nmedium pred: select t1.fullname,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:59
hard pred: select t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid group by t2.model order by sum(t1.horsepower) limit 1;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:60
hard pred: select t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid order by t1.horsepower limit 1;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:61
extra pred: select t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.weight  <  (select avg(t3.weight) from cars_data as t3);
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:62
extra pred: select t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.weight  <  (select avg(t3.weight) from cars_data as t3);
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:63
extra pred: select t2.fullname from car_makes as t1 join car_names as t2 on t1.id  =  t2.make where t2.year  =  1970;
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:64
extra pred: select t2.fullname from car_makers as t1 join cars_data as t2 on t1.id  =  t2.make where year  =  1970;
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:65
extra pred: select t1.make,  t2.productiontime from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.year  =  (select min(t3.year) from cars_data as t3);
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
nextra pred: select t1.maker,  t2.year from car_makers as t1 join cars_data as t2 on t1.id  =  t2.id order by t2.year limit 1;
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
neval_err_num:66
hard pred: select t2.model from car_names as t1 join model_list as t2 on t1.makeid  =  t2.modelid where year  >  1980;
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
nhard pred: select distinct t2.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where year  >  1980;
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
nhard pred: select t1.contid,  count(*) from continents as t1 join car_makers as t2 on t1.contid  =  t2.country group by t1.contid;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:67
hard pred: select t1.contnamen,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.countryid group by t1.contid;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:68
extra pred: select countryname from countries group by contid order by count(*) desc limit 1;
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:69
extra pred: select t1.contnme from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country where count(*)  >  (select max(count) from car_makes);
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:70
medium pred: select t1.t2.fullname,  count(*) from car_makes as t1 join car_models as t2 on t1.id  =  t2.make where t2.produced !=  0 group by t1.id;
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
neval_err_num:71
medium pred: select count(*),  t1.t2.fullname from car_makes as t1 join car_names as t2 on t1.id  =  t2.make where make!= " ";select distinct(distinct t3.fullname) from car_makers as t1 join car_names
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
neval_err_num:72
medium pred: select accelerate from cars_data as t1 join car_names as t2 on t1.makeid  =  t2.make where t2.make  =  "amc" and t2.model  =  "hornet";
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
neval_err_num:73
medium pred: select t1.accelerate from cars_data as t1 join car_names as t2 on t1.makeid  =  t2.id where make  =  "amc" and model  =  "hornet";
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
nmedium pred: select count(*) from car_makers where country  =  "france";
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
nmedium pred: select count(*) from car_makers where country  =  "france";
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
nhard pred: select count(*) from car_names where make  =  'usa';
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
nhard pred: select count(*) from car_names where make  =  'united states';
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:74
medium pred: select min(t2.weight) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.cylinders  =  8 and year  =  1974;
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
neval_err_num:75
medium pred: select min(t2.weight) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.cylinders  =  8 and year  =  1974;
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
neval_err_num:76
medium pred: select t1.make,  t2.model from car_makers as t1 join car_names as t2 on t1.id  =  t2.make;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
nmedium pred: select t1.maker,  t2.model from car_makers as t1 join car_names as t2 on t1.id  =  t2.make;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
neval_err_num:77
medium pred: select t1.contriyfrom counties as t1 join car_makers as t2 on t1.countryid  =  t2.country where exists (select * from car_makers as t3 join cars_data as t4 on t3.id  =  t4.id);
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:78
medium pred: select t1.countryname,  t2.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
nmedium pred: select avg(t1.weight) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid group by year;
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:79
medium pred: select avg(t1.weight),  t2.year from cars_data as t1 join model_list as t2 on t1.id  =  t2.model where t2.year  =  2015; unnest (distinct make) except select distinct make from car_
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:80
extra pred: select t1.contid from counties as t1 join car_makers as t2 on t1.contid  =  t2.country where continent  =  "europe" group by t1.contid having count(*)  >=  3;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
nextra pred: select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country where continent  =  "europe" group by t1.countryname having count(*)  >=  3;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:81
extra pred: select max(t1.horsepower),  t2.make from cars_data as t1 join car_names as t2 on t1.makeid  =  t2.model where t1.cylinders  =  3;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:82
extra pred: select max(t1.horsepower),  t2.make from cars_data as t1 join model_list as t2 on t1.modelid  =  t2.model where t1.cylinders  =  3;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:83
hard pred: select t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid group by t2.model order by sum(t1.mpg) desc limit 1;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
neval_err_num:84
hard pred: select t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid order by t1.mpg desc limit 1;
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
neval_err_num:85
easy pred: select avg(t2.horsepower) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where year <  1980;
easy gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
neval_err_num:86
easy pred: select avg(t2.horsepower) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where year  <  1980;
easy gold: select avg(horsepower) from cars_data where year  <  1980;
neval_err_num:87
medium pred: select avg(edispl) from cars_data where make  =  'volvo';
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
neval_err_num:88
medium pred: select avg(t1.edispl) from t2 as t1 join t3 as t2 on t1.id  =  t2.volvo where make  =  "volvo";
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
nmedium pred: select max(accelerate),  count(*) from cars_data group by cylinders;
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
nhard pred: select t1.model from car_names as t1 join model_list as t2 on t1.make  =  t2.model group by t1.model order by count(*) desc limit 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
nhard pred: select t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model group by t1.model order by count(*) desc limit 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neasy pred: select count(*) from cars_data;
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
nmedium pred: select count(*) from car_names as t1 join car_makers as t2 on t1.make  =  t2.id where t2.fullname  =  "american motor company";
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
neval_err_num:89
medium pred: select count(*) from car_names as t1 join car_makers as t2 on t1.make  =  t2.id where t2.company  =  "american motor company";
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
neval_err_num:90
medium pred: select t1.fullname,  t2.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:91
medium pred: select t1.fullname,  t2.id from car_makes as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:92
extra pred: select t1.model from car_names as t1 join car_makes as t2 on t1.makeid  =  t2.id where t2.fullname  =  "general motors" intersect select t1.model from cars_data as t1 join car_names as t2 on
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:93
extra pred: select distinct t1.model from car_names as t1 join car_makes as t2 on t1.makeid  =  t2.id where t2.company  =  "general motors" intersect select distinct t1.model from cars_data as t1 join car_names as t2
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neasy pred: select distinct year from cars_data where weight < 4000 intersect select distinct year from cars_data where weight > 3000;
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neval_err_num:94
extra pred: select count(*) from t1 as t2 join t3 as t4 on t2.id  =  t4.t1 where t4.accelerate  =  (select min(accelerate) from t3);
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
neval_err_num:95
extra pred: select count(*) from t1 join t2 on t1.model  =  t2.model where t1.accelerate  <= (select min(t3.accelerate) from t1 as t1 join t2 as t2 on t1.model  =  t2.model group
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
nhard pred: select count(*) from cars_data where accelerate  > (select max(accelerate) from cars_data);
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
nhard pred: select count(*) from cars_data where accelerate  > (select max(accelerate) from cars_data);
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
nmedium pred: select count(*) from car_makers group by country having count(distinct id) >  2;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
nmedium pred: select count(*) from car_makers group by country having count(distinct id) > 2;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:96
extra pred: select t1.model from cars_data as t1 join model_list as t2 on t1.modelid  =  t2.model where t1.cylinders  =  4;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:97
extra pred: select t1.model from cars_data as t1 join car_names as t2 on t1.makeid  =  t2.model where t1.cylinders  =  4 group by t1.model order by count(*) desc limit 1;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:98
extra pred: select t1.make,  t2.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower > (select min(t4.horsepower) from cars_data as t1 join car_names
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
neval_err_num:99
extra pred: select t1.make,  t2.make from cars_data as t1 join car_names as t2 on t1.makeid  =  t2.make where t1.horsepower <  4;
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
neval_err_num:100
medium pred: select max(t2.mpg) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.cylinders  =  8 intersect select mpg from cars_data where year  <  1980;
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:101
medium pred: select max(t2.mpg) from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.cylinders  =  8 intersect select max(t2.mpg) from cars_data as t1 join car_
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
nextra pred: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where mpg  >  3500 except select make from car_names group by make having count(*)  >  1;
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
neval_err_num:102
extra pred: select distinct t1.model from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where weight  <  3500 except select distinct t1.model from cars_data as t1 join car_names as t2 on t1.id
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
nhard pred: select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country except select distinct countryname from countries;
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
neval_err_num:103
hard pred: select t1.contnamen from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country where t2.country is null;
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
nextra pred: select t1.id,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2;
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
nextra pred: select t1.id,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 and sum(t2.model)  >  3;
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:104
extra pred: select t1.country,  t2.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country where count(*)  >  3 intersect select countryname from car_makes except select "fiat";
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
neval_err_num:105
extra pred: select t1.country,  t2.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country where (select count(*) from car_makes group by country) >  3 intersect select countryname from car_m
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
neval_err_num:106
easy pred: select t1.country from airlines as t1 join countries as t2 on t1.country  =  t2.country where t1.airline  =  'jetblue airways';
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neasy pred: select t1.country from airlines as t1 join airports as t2 on t1.country  =  t2.country where t1.airline  =  "jetblue";
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:107
easy pred: select t1.abbreviation from airlines as t1 join airports as t2 on t1.airline  =  t2.airline where t2.airline  =  'jetblue airways';
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neasy pred: select t1.abbreviation from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.airline  =  'jetblue';
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:108
medium pred: select t1.airline,  t2.abbreviation from airlines as t1 join country as t2 on t1.country  =  t2.country where t2.countryabrev  =  'usa';
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:109
medium pred: select t1.airline,  t2.abbreviation from airlines as t1 join country as t2 on t1.country  =  t2.country where t2.countryabrev  =  "usa";
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:110
medium pred: select t1.airportcode,  t2.airportname from airports as t1 join flight as t2 on t1.airportcode  =  t2.sourceairport where t2.destairport  =  "anthony";
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
neval_err_num:111
medium pred: select t1.airportcode,  t2.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport where t2.destairport  =  "anthony";
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
neval_err_num:112
easy pred: select t1.airline from airlines as t1 join country as t2 on t1.country  =  t2.id where t2.abbr  =  "ual";
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
neval_err_num:113
easy pred: select t1.airline from airlines as t1 join country as t2 on t1.country  =  t2.country where t2.countryabbrev  =  "ual";
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
neval_err_num:114
medium pred: select t1.city,  t2.country from airports as t1 join country as t2 on t1.countryabbrev  =  t2.country where t1.airportcode  =  "atl";
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
neval_err_num:115
medium pred: select t1.city,  t2.country from airports as t1 join country as t2 on t1.countryabbrev  =  t2.country;
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
neasy pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport where t1.airportcode  =  "ako";
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
neasy pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport where t1.airportcode  =  "ako";
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
neasy pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport where t1.city  =  "aberdeen";
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
neasy pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport where t1.city  =  "Aberdeen";
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
neasy pred: select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where country  =  'ato';
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
neasy pred: select count(*) from flights;
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
nmedium pred: select count(*) from flights where destairport  =  'ABZ';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where sourceairport  =  'ABZ';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where destairport  =  'ABZ';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where destairport  =  'ABZ';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nhard pred: select count(*) from flights where sourceairport  =  "aberdeen" intersect select destairport from flights where destairport  =  "ashley";
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
neval_err_num:116
hard pred: select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  "ashley" intersect select count(*) from flights as t1 join airports as t2 on t1.destinationairport  =
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where airline  =  "jetblue airways";
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
nmedium pred: select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.airportname  =  "asy";
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
nmedium pred: select count(*) from flights where destairport  =  'asy';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
nmedium pred: select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.airportname  =  "ahd";
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
nmedium pred: select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.airportname  =  "ahd";
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
nhard pred: select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  "aberdeen";
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
nhard pred: select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  "Aberdeen";
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
nextra pred: select min(t1.airportcode) from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.airportcode;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
nextra pred: select t1.airline from flights as t1 join airlines as t2 on t1.airline  =  t2.airline group by t1.airline order by count(*) desc limit 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.airline from flights as t1 join airlines as t2 on t1.airline  =  t2.airline group by t1.airline order by count(*) desc limit 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:117
extra pred: select t1.abbreviation,  t2.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.abbreviation order by count(*) asc limit 1;
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
nextra pred: select t1.abbreviation,  t2.country from airlines as t1 join airports as t2 on t1.uid  =  t2.airportcode group by t1.abbreviation order by count(*) asc limit 1;
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
nmedium pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where destairport!= "ahd";
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:118
medium pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.destairport where t2.destinationairport!= "ahd";
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
neval_err_num:119
extra pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where destairport  =  "apg" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:120
extra pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.sourceairport where destairport in (select airportcode from airports where countryabbrev  =  'apg' intersect select airportcode from airports where countryab
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:121
extra pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where destairport  =  "cvo" except select distinct t3.airline from airlines as t1 join flights as t2 on t1.uid
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:122
extra pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.sourceairport where t2.destairport!= "cvo" except select distinct t3.airline from airports as t1 join flights as t2 on t1.
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
nmedium pred: select t2.airline from flights as t1 join airlines as t2 on t1.airline  =  t2.airline group by t2.airline having count(*)  >=  10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
nmedium pred: select t2.airline from flights as t1 join airlines as t2 on t1.airline  =  t2.uid group by t2.airline having count(*)  >=  10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
nmedium pred: select t1.airline from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where count(*)  <  200;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
neval_err_num:123
medium pred: select t1.airline from airlines as t1 join flights as t2 on t1.uid intersect select distinct t3.airline from flights as t4 join airlines as t5 on t4.uid where count(*)  <  200;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.airportname  =  'apg';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.airportname  =  "apg";
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.airportname  =  'apg';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.airportname  =  "apg";
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
nhard pred: select count(*) from flights where destairport  =  'aberdeen' intersect select count(*) from flights where destairport  =  'abilene';
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
nhard pred: select count(*) from flights where destairport  =  'aberdeen' intersect select count(*) from flights where sourceairport  =  'abilene';
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
neval_err_num:124
hard pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport where t2.destairport is null;
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
neval_err_num:125
hard pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport union all select t3.airportname from airports as t3 join flights as t4 on t3.airportcode  =  t4
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
nmedium pred: select count(*),  district from shop group by district;
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
nmedium pred: select count(*),  district from shop group by district;
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
nmedium pred: select t1.manager_name,  t2.district from shop as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:126
medium pred: select t1.manager_name,  t2.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:127
medium pred: select min(t1.number_products),  max(t2.number_products) from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id;
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop
neval_err_num:128
medium pred: select min(t1.number_products),  max(t2.number_products) from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id;
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop
neval_err_num:129
medium pred: select t1.name,  t2.location,  t3.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id join shop as t3 on t2.shop_id  =  t3.shop_id order by
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
neval_err_num:130
medium pred: select t1.name,  t2.location,  t3.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc;
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
nhard pred: select name from shop where number_products  >  (select avg(t1.number_products) from shop as t1 group by district);
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
nextra pred: select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:131
hard pred: select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.one_time_bonus desc limit 1;
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
nhard pred: select name from employee where employee_id not in (select t1.employee_id from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id);
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
nhard pred: select name from employee where employee_id not in (select t1.employee_id from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id);
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
neval_err_num:132
hard pred: select t1.name from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id where t2.employee_id is null;
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
nhard pred: select name from shop where shop_id not in (select t1.shop_id from hiring as t1 join employee as t2 on t1.employee_id  =  t2.employee_id);
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
neval_err_num:133
medium pred: select count(*),  t1.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name;
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
nmedium pred: select count(*),  t1.name from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id;
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
nhard pred: select location from shop where number_products <  3000 intersect select location from shop where number_products >  10000;
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
neval_err_num:134
medium pred: select t1.document_id,  t2.document_name,  t3.document_description from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id join documents as t3 on t1.document_id  =  t3.
medium gold: SELECT document_id ,  document_name ,  document_description FROM Documents
nmedium pred: select t1.document_name,  t2.template_id from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t1.document_description like '%w%';
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
nmedium pred: select document_name,  document_id from documents where document_description like '%w%';
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
neval_err_num:135
medium pred: select t1.document_id,  t2.template_id,  t3.document_description from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t1.document_name  =  'robin cv';
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
neval_err_num:136
medium pred: select t1.document_id,  t2.template_id,  t3.document_description from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t1.document_name  =  "robin cv";
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
nmedium pred: select count(*) from documents where document_name like "%ppt%";
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
nmedium pred: select t1.template_id,  count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t2.template_id;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
nmedium pred: select distinct t1.template_id,  count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
nextra pred: select t1.template_id,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t2.template_type_code order by count(*) desc limit 1;
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neasy pred: select t1.template_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.template_id having count(*)  >  1;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neasy pred: select distinct t1.template_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id having count(*)  >  1;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
nhard pred: select template_id from templates where template_id not in (select t1.template_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id);
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
nhard pred: select template_id from documents except select t1.template_id from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id;
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:137
medium pred: select t1.template_id,  t2.version_number,  t3.template_type_code from templates as t1 join document_templates as t2 on t1.template_id  =  t2.template_id join ref_template_types as t3 on t3.template_
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neval_err_num:138
medium pred: select t1.template_id,  t2.version_number,  t3.template_type_code from templates as t1 join document_templates as t2 on t1.template_id  =  t2.template_id join ref_template_types as t3 on t2.template_
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neasy pred: select distinct t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code;
easy gold: SELECT DISTINCT template_type_code FROM Templates
neasy pred: select distinct t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code;
easy gold: SELECT DISTINCT template_type_code FROM Templates
nmedium pred: select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_code  =  "pp" intersect select t1.template_id from templates as t
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
nmedium pred: select template_id from templates where template_type_code  =  'pp' intersect select template_id from templates where template_type_code  =  'ppt';
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
neasy pred: select count(*) from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_code  =  'cv';
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
neasy pred: select count(*) from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_description  =  "cv";
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
neval_err_num:139
medium pred: select t1.version_number,  t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where date_effective_to >   "2018-06
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
nmedium pred: select t1.version_number,  t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t1.version_number  >  5;
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
nmedium pred: select t1.template_type_code,  count(*) from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
nmedium pred: select count(*),  distinct t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
nhard pred: select t2.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code order by count(*) desc limit 1;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
nhard pred: select t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code group by t2.template_type_code order by count(*) desc limit 1;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neasy pred: select t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code having count(*)  <  3;
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neasy pred: select t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code having count(*)  <  3;
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neval_err_num:140
medium pred: select min(t1.version_number),  t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code group by t2.template_type_code order by t1
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
neval_err_num:141
medium pred: select min(t1.version_number),  t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code group by t2.template_type_code order by t1
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
neval_err_num:142
medium pred: select t1.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t1.document_name  =  "data base";
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
neval_err_num:143
medium pred: select document_name from documents where template_id in (select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_code  =  'bk
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
neval_err_num:144
medium pred: select t1.template_type_code,  count(*) from document as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id;
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:145
medium pred: select count(*),  distinct t1.template_type_code from document as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t2.template_type_code;
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:146
extra pred: select t1.template_type_code from document as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.template_type_code order by count(*) desc limit 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:147
extra pred: select t1.template_type_code from document as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.template_type_code order by count(*) desc limit 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:148
hard pred: select distinct t1.template_type_code from ref_template_types as t1 join documents as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code having count(*)  >  0;
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:149
hard pred: select distinct t1.template_type_code from ref_template_types as t1 join documents as t2 on t1.template_type_code  =  t2.template_type_code where t2.document_id is null;
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:150
medium pred: select t1.template_type_code,  t2.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code;
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neval_err_num:151
medium pred: select t1.template_type_code,  t2.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code;
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neval_err_num:152
easy pred: select t2.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code where t1.template_type_code  =  'ad';
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
neval_err_num:153
easy pred: select t2.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code where t1.template_type_code  =  "ad";
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
neasy pred: select t2.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code where t1.template_type_description  =  'book';
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
neval_err_num:154
easy pred: select t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_description  =  'book';
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
neval_err_num:155
medium pred: select distinct t2.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_id in (select template_id from documents);
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
nmedium pred: select distinct template_details from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t2.template_details having count(*) >  0;
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
neval_err_num:156
medium pred: select template_id from templates where template_type_description  =  "presentation";
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
nmedium pred: select * from paragraphs where paragraph_text  =  "korea ";
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
neval_err_num:157
medium pred: select t1.* from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t2.paragraph_text like '% korea %';
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
neval_err_num:158
medium pred: select t1.paragraph_id,  t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t1.document_name  =  "welcome to ny";
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:159
medium pred: select t1.paragraph_id,  t2.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t1.document_name  =  "welcome to ny";
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:160
medium pred: select t1.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t1.document_title  =  'customer reviews';
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:161
medium pred: select t1.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t1.document_name  =  "customer reviews";
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
nmedium pred: select t1.document_id,  count(*) from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
nmedium pred: select t1.document_id,  count(*) from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by t1.document_id;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neval_err_num:162
medium pred: select t1.document_id,  t2.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id;
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neval_err_num:163
medium pred: select t1.document_id,  t2.document_name, count(*) from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id;
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neasy pred: select distinct t1.document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id having count(*)  >=  2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neasy pred: select document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id having count(*)  >=  2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neval_err_num:164
extra pred: select t1.document_id,  t2.document_name from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:165
extra pred: select t1.document_id,  t2.document_name from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
nhard pred: select t1.document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) asc limit 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
nhard pred: select t1.document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) limit 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:166
easy pred: select t3.document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id group by t1.document_id having count(*) between 1 and 2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neasy pred: select document_id from documents where count(*)  >=  1 intersect select document_id from paragraphs group by document_id having count(*)  <=  2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
nhard pred: select t1.document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t2.paragraph_text like '%brazil%'; select t1.document_id from documents as t1 join paragraphs as t2 on t1
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
nhard pred: select document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t2.paragraph_text like '%brazil%'; select distinct document_id from documents intersect select distinct document_id from paragraphs;
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
nmedium pred: select name,  age from teacher;
medium gold: SELECT Age ,  Hometown FROM teacher
neval_err_num:167
medium pred: select t1.age,  t2.hometown from teacher as t1 join teacher as t2 on t1.teacher_id  =  t2.teachert_id;
medium gold: SELECT Age ,  Hometown FROM teacher
neval_err_num:168
easy pred: select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teachert where t2.grade!= "A";
easy gold: select name from teacher where hometown != "little lever urban district"
neval_err_num:169
medium pred: select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teachert where age  =  32 intersect select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
neval_err_num:170
medium pred: select name from teacher where age  =  32 union all select name from teacher where age  =  33;
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
nmedium pred: select t1.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id order by age limit 1;
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:171
medium pred: select min(t1.age),  t2.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teachert_id group by t2.name;
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
nmedium pred: select count(*),  t2.hometown from teacher as t1 join teacher as t2 on t1.hometown!= t2.hometown group by t2.hometown;
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:172
medium pred: select count(*),  t2.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teachert_id group by t2.hometown;
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
nhard pred: select t1.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id group by t1.hometown order by count(*) desc limit 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
nhard pred: select t1.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id group by t1.hometown order by count(*) desc limit 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:173
easy pred: select distinct t1.hometown from teacher as t1 join teacher as t2 on t1.teacher_id!= t2.teachert where count(*)  >=  2;
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:174
medium pred: select t1.name,  t2.title from course as t1 join course_arrange as t2 on t1.course_id  =  t2.course_id;
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:175
medium pred: select t1.name,  t2.title from course as t1 join course_arrange as t2 on t1.course_id  =  t2.course_id;
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:176
hard pred: select t1.name,  t2.title from course as t1 join course_arrange as t2 on t1.course_id  =  t2.course_id order by t1.title;
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
neval_err_num:177
hard pred: select t1.name,  t2.title from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id order by t1.name;
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
neval_err_num:178
hard pred: select t1.name from course as t1 join course_arrange as t2 on t1.course_id  =  t2.course_id where t2.subject  =  "math";
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:179
hard pred: select name from teacher where grade  =   "math";
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
nmedium pred: select name,  count(*) from teacher group by name;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:180
medium pred: select t1.name,  count(*) from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teachertable group by name;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:181
medium pred: select name from teacher where teacher_id in (select t1.teacher_id from course as t1 join course_arrange as t2 on t1.course_id  =  t2.course_id group by t2.teachers_id having count(*)  >=  2);
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
nmedium pred: select name from teacher where count(*)  >=  2;
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:182
hard pred: select name from teacher where teacher_id not in (select t1.teacher_id from course as t1 join course_arrange as t2 on t1.teachers_id  =  t2.teacher_id);
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
neval_err_num:183
hard pred: select t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teachert where grade!= "arranged";
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
neval_err_num:184
easy pred: select count(*) from visitor where level_of_membership  =   "free" intersect select t1.count(*) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t2.total_spent  <  5;
easy gold: SELECT count(*) FROM visitor WHERE age  <  30
nmedium pred: select name from visitor where level_of_membership > 4 order by level_of_membership;
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
nmedium pred: select t1.name,  t2.level_of_membership from visitor as t1 join visitor as t2 on t1.id  =  t2.id where t2.level_of_membership >  5 order by t2.age;
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
neval_err_num:185
medium pred: select t1.museum_id,  t2.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id group by t1.museum_id order by count(*) desc limit 1;
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
nhard pred: select name from museum where num_of_staff > (select min(num_of_staff) from museum where open_year >= 2010);
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
neval_err_num:186
medium pred: select t1.visitor_id,  t2.name,  t3.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t1.id having count(*)  >  1;
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
neval_err_num:187
extra pred: select t1.visitor_id,  t2.name,  t3.level_of_membership from visitor as t1 join museum as t2 on t1.museum_id  =  t2.museum_id join visit as t3 on t1.id  =  t3.
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
neval_err_num:188
hard pred: select t1.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id where not exists (select * from visit);
hard gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
neval_err_num:189
hard pred: select t1.name,  t2.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t2.visitor_id order by sum(t2.num_of_ticket) desc limit 1;
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
neval_err_num:190
medium pred: select sum(total_spent) from visitor where level_of_membership  =  1;
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
neval_err_num:191
extra pred: select t3.name from visit as t1 join museum as t2 on t1.museum_id  =  t2.museum_id join visitor as t3 on t1.visitor_id  =  t3.id where open_year(t2.open_year) <  200
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
neval_err_num:192
extra pred: select count(*) from visit where num_of_ticket  =  0; except select t3.count(*) from visit as t1 join museum as t2 on t1.museum_id  =  t2.museum_id intersect select t4.count(*) from visit as t1 join visitor as t2 on
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
nmedium pred: select count(*) from museum where open_year >= 2013 intersect select count(*) from museum where open_year <= 2008;
medium gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
neval_err_num:193
medium pred: select t1.first_name,  t2.birth_date from players as t1 join countries as t2 on t1.country_code  =  "usa";
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
neval_err_num:194
medium pred: select t1.first_name,  t2.birth_date from players as t1 join country_codes as t2 on t1.country_code  =  t2.country_code where t2.country_code  =  'usa';
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
neasy pred: select avg(winner_rank) from matches where winner_id!= 0;
easy gold: SELECT avg(winner_rank) FROM matches
neasy pred: select avg(winner_rank) from matches where winner_id!= 0;
easy gold: SELECT avg(winner_rank) FROM matches
neasy pred: select max(loser_rank) from matches;
easy gold: SELECT min(loser_rank) FROM matches
neasy pred: select max(loser_rank) from matches;
easy gold: SELECT min(loser_rank) FROM matches
neval_err_num:195
easy pred: select t2.tourney_name from tournaments as t1 join matches as t2 on t1.tourney_id  =  t2.tourney_id group by t1.tourney_name having count(*)  >  10;
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:196
easy pred: select t2.tourney_name from tourneys as t1 join matches as t2 on t1.tourney_id  =  t2.tourney_id group by t1.tourney_name having count(*)  >  10;
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:197
hard pred: select t4.win_name from wins as t1 join tourneys as t2 on t1.tourn_id  =  t2.tourn_id join tournaments as t3 on t2.tourn_id  =  t3.tourn_id join players as t4 on t
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:198
hard pred: select t1.first_name,  t1.last_name from wins as t1 join players as t2 on t1.winner_id  =  t2.player_id where year(t1.winning_date)  =  2013 intersect select t1.first_name
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
nmedium pred: select count(*) from matches where year  =  2013 union select count(*) from matches where year  =  2016;
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
neval_err_num:199
medium pred: select count(*) from matches where tourney_date between '2013-01-01' and '2017-01-01'; select count(*) from matches where tourney_date between '2015-01-01' and '2018-01
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
neval_err_num:200
extra pred: select t1.country_code,  t2.first_name from wins as t1 join tournaments as t2 on t1.tournament_id  =  t2.tournament_id where t2.title  =  "australian open" intersect select t1.country_code
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
neval_err_num:201
extra pred: select t1.first_name,  t2.country_code from wins as t1 join tournaments as t2 on t1.tournament_id  =  t2.tournament_id where t1.title  =  "australian open" intersect select t1.first_name
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
neval_err_num:202
medium pred: select t1.first_name,  t2.country_code from players as t1 join countries as t2 on t1.country_code  =  t2.country_code order by birth_date desc limit 1;
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:203
medium pred: select t1.first_name,  t2.country_code from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by birth_date desc limit 1;
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:204
medium pred: select t1.first_name,  t1.last_name from players as t1 join (select distinct first_name,  last_name from players) as t2 on t1.first_name  =  t2.first_name and t1.last_name  =  t2.last
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
neval_err_num:205
medium pred: select t1.first_name,  t2.last_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t1.birth_date;
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
neval_err_num:206
medium pred: select t1.first_name,  t1.last_name from players as t1 join hands as t2 on t1.hand  =  t2.hand where t2.l; order by t1.birth_date; unnest(distinct player_id) as id;
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
neval_err_num:207
medium pred: select t1.first_name,  t1.last_name from players as t1 join hands as t2 on t1.hand  =  t2.hand where hand  =  "lh";select first_name,  last_name from players order by birth_date;
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
neval_err_num:208
hard pred: select first_name,  country_code from players group by hand order by ranking_points desc limit 1;
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
neval_err_num:209
hard pred: select first_name,  country_code from players order by ranking_points desc limit 1;
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
nhard pred: select max(year) from matches;
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
nhard pred: select max(year) from matches;
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:210
hard pred: select t1.winner_name,  t2.winner_rank_points from wins as t1 join rankings as t2 on t1.winner_id  =  t2.player_id group by t1.winner_id order by count(*) desc limit 1;
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:211
hard pred: select t1.winner_name,  sum(t2.ranking_points) from rankings as t1 join players as t2 on t1.player_id  =  t2.player_id group by t1.winner_id order by sum(t2.ranking_points)
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:212
hard pred: select t1.winner_name from wins as t1 join rankings as t2 on t1.winner_id  =  t2.player_id where t2.tours  =   "australia" order by ranking_points desc limit 1;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:213
hard pred: select t1.winner_name from wins as t1 join tourneys as t2 on t1.tournery_id  =  t2.tourney_id where t2.tourney_name  =  "australian open" group by t1.winner_id order
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:214
medium pred: select t1.loser_name,  t2.winner_name from matches as t1 join players as t2 on t1.loser_id  =  t2.player_id order by t1.minutes desc limit 1;
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:215
medium pred: select t1.winner_name,  t2.loser_name from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id where draw_size  =  3 intersect select t1.winner_name,  t2.loser
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:216
medium pred: select avg(ranking),  t1.first_name from rankings as t1 join players as t2 on t1.player_id  =  t2.player_id group by t1.first_name;
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:217
medium pred: select t1.total_rating,  t2.first_name from rankings as t1 join players as t2 on t1.player_id  =  t2.player_id; unnest(distinct tourney_name)
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
nmedium pred: select count(*),  ranking_date from rankings group by ranking_date; unnest(select ranking_date from rankings);
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
neval_err_num:218
medium pred: select t1.winner_name,  t2.winner_rank from wins as t1 join rankings as t2 on t1.winner_id  =  t2.player_id order by t1.winner_age limit 3;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
neval_err_num:219
medium pred: select t1.winner_name,  t2.winner_rank from wins as t1 join rankings as t2 on t1.winner_id  =  t2.player_id order by t1.winner_age limit 3;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
nmedium pred: select count(distinct winner_id) from matches where tourney_name  =  "wta" intersect select distinct t1.winner_id from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id where hand  =  'l';
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:220
medium pred: select count(*) from wins as t1 join tournaments as t2 on t1.tournament_id  =  t2.tournament_id where t2.title  =  "wta" and hand  =  'l';
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:221
hard pred: select t1.first_name,  t2.country_code,  t3.birth_date from wins as t1 join players as t2 on t1.winner_id  =  t2.player_id join rankings as t3 on t1.winner_id  =
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:222
hard pred: select t1.first_name,  t2.country_code,  t3.birth_date from players as t1 join matchs as t2 on t1.player_id  =  t2.winner_id group by t1.player_id order by ranking_points desc limit
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
nmedium pred: select name,  tonnage from ship order by name;
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC
neval_err_num:223
medium pred: select t1.name,  t2.date,  t3.result from battle as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id join results as t3 on t2.result  =  t3.id;
medium gold: SELECT name ,  date FROM battle
neval_err_num:224
medium pred: select max(t1.total),  min(t2.total) from (select sum(t3.kills + t4.wounds) as total from death as t1 join killed as t2 on t1.caused_by_ship_id  =  t2.id union all select
medium gold: SELECT max(killed) ,  min(killed) FROM death
neval_err_num:225
medium pred: select injured,  killed from death where tonnage  =  "t";
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
neval_err_num:226
medium pred: select t1.name,  t2.result from battle as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id where t1.bulgarian_commander!= "boril";
medium gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
neval_err_num:227
medium pred: select distinct t1.id,  t2.name from battle as t1 join ship as t2 on t1.losing_side_ship_id  =  t2.id where t2.ship_type  =  "brig";
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
neval_err_num:228
hard pred: select t2.id,  t3.name from battle as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id join ship as t3 on t2.caused_by_ship_id  =  t3.id group by t2
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
neval_err_num:229
extra pred: select t1.id,  t2.name from ship as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id group by t2.caused_by_ship_id order by sum(t2.injured) desc limit 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
neval_err_num:230
medium pred: select t1.name from battle as t1 join (select name from battle where bulgarian_commander  =  "kaloyan" intersect select name from battle where latin_commander  =  "baldwin i") as t2 on t1.name!= t2.name;
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
neval_err_num:231
extra pred: select count(*) from battle where lost_in_battle != (select id from ship where tonnage  =  225);
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
neval_err_num:232
extra pred: select t1.name,  t2.date from battle as t1 join ship as t2 on t1.id  =  t2.id where t2.name  =  "lettice" intersect select t1.name,  t2.date from battle as t1 join ship as t2 on
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
neval_err_num:233
extra pred: select name,  result,  latin_commander from battle where location!= "english channel";
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
neval_err_num:234
medium pred: select t1.line_1,  t1.line_2 from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.current_address_id;
medium gold: SELECT line_1 ,  line_2 FROM addresses
neval_err_num:235
easy pred: select t1.course_description from courses as t1 join section_descriptions as t2 on t1.course_id  =  t2.course_id where t2.subject_area_of_interest like '%math%';
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:236
easy pred: select course_description from courses where subject_area  =  "math";
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:237
easy pred: select t1.zip_postcode from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.current_address_id where t2.student_id  =  5;
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
neval_err_num:238
easy pred: select t1.zip_postcode from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.current_address_id where t2.student_id  =  5;
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
neval_err_num:239
extra pred: select t1.department_name,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
neasy pred: select count(*) from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id having count(*) >  0;
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
neval_err_num:240
easy pred: select count(distinct t1.degree_summary_name) from degrees as t1 join degree_programs as t2 on t1.degree_program_id  =  t2.degree_program_id;
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
neasy pred: select count(distinct t1.degree_summary_name) from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id;
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
neval_err_num:241
medium pred: select section_name,  course_description from sections;
medium gold: SELECT section_name ,  section_description FROM Sections
neval_err_num:242
medium pred: select section_name,  course_description from sections;
medium gold: SELECT section_name ,  section_description FROM Sections
nmedium pred: select t1.course_name,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <  2;
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
neval_err_num:243
easy pred: select t4.section_name from address as t1 join sections as t2 on t1.address_id  =  t2.section_id join course as t3 on t2.course_id  =  t3.course_id join student_enrolment_courses as t4 on t
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC
neval_err_num:244
medium pred: select t4.department_description from departments as t1 join degrees_programs as t2 on t1.department_id  =  t2.department_id join student_enrolment as t3 on t2.degree_program_id  =  t3.degree_
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
neval_err_num:245
medium pred: select t1.department_description from departments as t1 join student_enrolment as t2 on t1.department_id  =  t2.degree_program_id where t2.degree_program_id in (select degree_program_id from student_enrolment where
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
neval_err_num:246
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.degree_
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:247
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.semester_
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
nhard pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.degree_program_id  =  4;
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
nhard pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.degree_program_id  =  4;
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:248
extra pred: select t4.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id  =  t2.degree_program_id join degrees as t3 on t2.degree_summary_name  =  t
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:249
extra pred: select t1.degree_summary_name,  t1.degree_summary_description from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:250
extra pred: select t1.degree_program_id,  t2.degree_summary_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:251
extra pred: select t1.student_id,  t1.first_name,  t1.middle_name,  t1.last_name, count(*) from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id  =  t2.deg
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:252
extra pred: select t1.first_name,  t1.middle_name,  t1.last_name,  count(*) from student_enrolment as t1 join student_enrolment_courses as t2 on t1.student_enrolment_id  =  t2.student_en
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:253
hard pred: select t1.semester_name from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id where t2.student_enrolment_id is null;
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:254
hard pred: select t4.semester_name from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id join student_enrolment_courses as t3 on t2.student_enrolment_id  =  t
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:255
extra pred: select t1.last_name from students as t1 join address as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  "nc" except select distinct(t1.last_name) from students as t1
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:256
extra pred: select t1.last_name from students as t1 join address as t2 on t1.permanent_address_id  =  t2.address_id where state_province_county  =  "nc" except select distinct(t1.last_name) from students as t1 join
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:257
medium pred: select t1.transcript_date,  t1.transcript_id from transcripts as t1 join student_enrolment_courses as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
neval_err_num:258
medium pred: select cell_phone_number from students where first_name  =  "timmothy" and last_name  =  "ward";
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
neval_err_num:259
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id order by t2.date_first_registered limit 1;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:260
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id order by t2.date_first_registered limit 1;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:261
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.degree_program_id in (select degree_
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:262
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where date_graduated  <= (select max(date_grad
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neasy pred: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t1.permanent_address_id!= t1.current_address_id;
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
neasy pred: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t1.permanent_address_id!= t1.current_address_id;
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
neval_err_num:263
extra pred: select t1.address_id,  line_1,  line_2,  line_3 from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:264
extra pred: select t1.address_id,  t1.line_1,  t1.line_2 from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:265
easy pred: select avg(t1.transcript_date) from transcripts as t1 join student_enrolment_courses as t2 on t1.transcript_id  =  t2.transcript_id;
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:266
medium pred: select t1.transcript_date,  t2.other_details from transcripts as t1 join transcript_contents as t2 on t1.transcript_id  =  t2.transcript_id order by t1.transcript_date limit 1;
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:267
medium pred: select min(t1.transcript_date),  t2.other_details from transcripts as t1 join transcript_contents as t2 on t1.transcript_id  =  t2.transcript_id;
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:268
medium pred: select max(t4.transcript_date) from address as t1 join degrees as t2 on t1.address_id  =  t2.address_id join transcripts as t3 on t2.address_id  =  t3.address_id join transcript_contents as t4
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:269
medium pred: select max(t1.release_date) from transcripts as t1 join transcript_contents as t2 on t1.transcript_id  =  t2.transcript_id;
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:270
hard pred: select count(*),  t1.student_course_id from student_enrolment as t1 join transcripts as t2 on t1.student_enrolment_id  =  t2.transcript_id group by t1.student_course_id having count(*)  >  1;
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:271
hard pred: select max(t1.course_id),  t2.student_course_id from transcripts as t1 join student_enrolment_courses as t2 on t1.transcript_id  =  t2.transcript_id group by t2.student_course_id;
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.transcript_date,  t1.transcript_id from transcripts as t1 join transcript_contents as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_date order by count(*) asc limit 1;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:272
extra pred: select t1.semester_id from student_enrolment as t1 join degrees as t2 on t1.degree_program_id  =  t2.degree_program_id where t2.title like'master%'; intersect select t1.semester_id from student_enrol
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:273
extra pred: select t1.semester_id from student_enrolment as t1 join degrees as t2 on t1.degree_program_id  =  t2.degree_program_id where t2.degree_summary_name  =  "master"; intersect select t1.semester_
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:274
easy pred: select distinct t1.address_id from address as t1 join students as t2 on t1.address_id  =  t2.current_address_id;
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neasy pred: select * from students order by last_name,  first_name;
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:275
easy pred: select t4.* from students as t1 join address_details as t2 on t1.permanent_address_id  =  t2.address_detail_id join permanent_addresses as t3 on t2.permanent_address_id  =  t3.address_id join current
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:276
easy pred: select t4.section_name from address as t1 join sections as t2 on t1.address_id  =  t2.section_id join course as t3 on t2.course_id  =  t3.course_id join student_enrolment_courses as t4 on t
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neval_err_num:277
easy pred: select t4.section_description from address as t1 join sections as t2 on t1.address_id  =  t2.section_id join course as t3 on t2.course_id  =  t3.course_id join transcript_contents as t4 on t3.course_
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neval_err_num:278
hard pred: select t1.first_name from students as t1 join permanent_addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country like '%haiti' intersect select distinct t1.first_name from students as t1 join current_
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neval_err_num:279
hard pred: select t1.first_name from students as t1 join permanent_addresses as t2 on t1.permanent_address_id  =  t2.address_id where country  =  "haiti" intersect select distinct t1.first_name from students as t1 join current_address
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neval_err_num:280
easy pred: select t2.title from cartoon as t1 join tv_show as t2 on t1.channel  =  t2.id order by t1.title;
easy gold: SELECT Title FROM Cartoon ORDER BY title
neasy pred: select count(*) from cartoon where directed_by  =  'joseph kuhr';
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
neasy pred: select count(*) from cartoon where directed_by  =   "joseph kuhr";
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
neval_err_num:281
medium pred: select t2.title from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id where t1.directed_by like "%ben%jones%" or t1.directed_by like "%brandon%vietti";
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
nmedium pred: select title from cartoon where directed_by  =  'ben jones' intersect select title from cartoon where directed_by  =  'brandon vietti';
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:282
hard pred: select t2.country,  count(*) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t2.country order by count(*) desc limit 1;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:283
hard pred: select t2.country,  count(*) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t2.country order by count(*) desc limit 1;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:284
medium pred: select count(distinct t2.series_name),  count(distinct t3.content) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel join tv_channel as t3 on t1.id!= t2.channel;
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:285
medium pred: select count(distinct t2.series_name),  count(distinct t3.content) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel join tv_channel as t3 on t1.id  =  t3.id
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:286
easy pred: select t2.content from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.series_name  = 'sky radio';
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:287
easy pred: select t2.content from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t1.series_name  =  "sky radio";
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:288
easy pred: select t2.package_option from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.series_name  = 'sky radio';
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:289
easy pred: select t2.package_option from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.series_name like "%sky%radio%";
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
neasy pred: select count(*) from tv_channel where country  =  'english';
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
neval_err_num:290
hard pred: select t2.language from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t2.language order by count(*) asc limit 1;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
nhard pred: select language from tv_channel group by language order by count(*) asc limit 1;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:291
medium pred: select t2.language,  count(*) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t2.language;
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:292
medium pred: select count(*),  t2.language from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t2.language;
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:293
medium pred: select t2.series_name from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel where title  =  'the rise of the blue beetle!';
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
neval_err_num:294
medium pred: select t2.series_name from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel where title  =  'the rise of the blue beetle';
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
neval_err_num:295
medium pred: select t2.title from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id where t2.series_name  = 'sky radio';
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:296
medium pred: select t2.title from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id where t2.series_name  = 'sky radio';
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:297
easy pred: select t2.episode from tv_serie as t1 join tv_series as t2 on t1.id  =  t2.id order by t1.rating;
easy gold: SELECT Episode FROM TV_series ORDER BY rating
neval_err_num:298
medium pred: select t2.episode,  t1.rating from tv_series as t1 join tv_series as t2 on t1.id  =  t2.parent where t1.rating  >   (select max(t1.rating) from tv_series);
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
neval_err_num:299
medium pred: select t2.episode,  t2.rating from tv_series as t1 join tv_series as t2 on t1.id  =  t2.parent where rating  >  7 order by rating desc limit 3;
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
nmedium pred: select min(t2.share),  max(t2.share) from tv_series as t1 join tv_series as t2 on t1.id!= t2.id;
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;
nmedium pred: select max(t2.share),  min(t2.share) from tv_series as t1 join tv_series as t2 on t1.id!= t2.id;
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;
neasy pred: select t2.air_date from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.episode  =  'a love of a lifetime';
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:300
easy pred: select t2.air_date from tv_series as t1 join tv_series as t2 on t1.id  =  t2.parent where title  =  'a love of a lifetime';
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
neasy pred: select t2.weekly_rank from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.episode  =  'a love of a lifetime';
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:301
easy pred: select t2.weekly_rank from tv_series as t1 join tv_series as t2 on t1.episode  =  t2.episode where title  =  'a love of a lifetime';
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:302
medium pred: select t2.series_name from tv_serie as t1 join tv_channel as t2 on t1.channel  =  t2.id where t1.episode  =  'a love of a lifetime';
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:303
medium pred: select t2.series_name from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.episode  =  'a love of a lifetime';
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:304
medium pred: select t2.episode from tv_serie as t1 join tv_channel as t2 on t1.channel  =  t2.id where t1.series_name  = 'sky radio';
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:305
medium pred: select t2.episode from tv_serie as t1 join tv_series as t2 on t1.id  =  t2.id where t1.series_name  = 'sky radio';
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:306
medium pred: select count(*),  t2.director from cartoon as t1 join tv_show_crew as t2 on t1.directed_by  =  t2.person where t2.position like "%director%";
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
neval_err_num:307
medium pred: select t2.production_code,  t3.channel from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id join tv_series as t3 on t1.id  =  t3.channel order by air_date desc limit 1;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
neval_err_num:308
medium pred: select production_code,  t2.channel from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id order by air_date desc limit 1;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
neval_err_num:309
medium pred: select t2.package_choice,  t3.series_name from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel intersect select t3.series_name from tv_channel as t1 join tv_series as t2 on t1.id
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:310
medium pred: select t2.package_option,  t3.series_name from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel intersect select t2.package_option,  t3.series_name from tv_channel as t1 join tv_series
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:311
medium pred: select t2.country from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.directed_by where t2.written_by  =  "todd";
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:312
medium pred: select country from tb2 as tv_channel where directed_by  =   "todd casey";
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:313
hard pred: select country from tb_tv_channel except select country from tb_tv_channel where directed_by  =  "todd casey";
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:314
hard pred: select country from tb2 where directed_by!= "todd casey";
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:315
extra pred: select t2.series_name,  t3.country from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel join cartoon as t3 on t3.channel  =  t1.id where t3.directed_by like "%ben
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:316
extra pred: select t2.series_name,  t3.country from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel join tv_channel as t3 on t2.directed_by  =  "ben jones" or t2.directed_
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:317
medium pred: select t2.pixel_aspect_ratio_par,  t3.nation from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel join country as t3 on t1.country  =  t3.id where language!= '
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neval_err_num:318
medium pred: select t2.pixel_aspect_ratio_par,  t2.country from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t1.language!= 'english';
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neasy pred: select t2.id from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by country having count(*)  >  2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neasy pred: select id from tv_channel where count(*)  >  2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
nhard pred: select t2.id from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel where t2.directed_by  =  "ben jones";
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
nhard pred: select t2.id from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel where t2.directed_by  =  "ben jones";|
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
neval_err_num:319
hard pred: select t2.package_option from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t1.directed_by like "%ben%jones";
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neval_err_num:320
hard pred: select t2.package_option from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t1.directed_by!= "ben jones";
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neasy pred: select money_rank,  sum(earnings) from poker_player group by best_finish order by sum(earnings) desc;
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
neasy pred: select sum(t2.earnings) from poker_player as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc;
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
neval_err_num:321
medium pred: select t1.final_table_made,  t2.best_finish from poker_player as t1 join poker_tournament as t2 on t1.poker_tournament_id  =  t2.poker_tournament_id;
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neval_err_num:322
medium pred: select t1.final_table_made,  t2.best_finish from poker_player as t1 join poker_tournament as t2 on t1.poker_tournament_id  =  t2.poker_tournament_id;
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neasy pred: select avg(t1.earnings) from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id;
easy gold: SELECT avg(Earnings) FROM poker_player
neasy pred: select avg(t1.earnings) from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id;
easy gold: SELECT avg(Earnings) FROM poker_player
nmedium pred: select money_rank from poker_player order by best_finish desc limit 1;
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
nmedium pred: select money_rank from poker_player order by best_finish desc limit 1;
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
neval_err_num:323
easy pred: select max(t1.final_table_made) from poker_player as t1 join earning as t2 on t1.people_id  =  t2.people_id where t2.earnings  <  200000;
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
neval_err_num:324
easy pred: select max(t1.final_table_made) from poker_player as t1 join earning as t2 on t1.people_id  =  t2.people_id where t2.earnings  <  200000;
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
neval_err_num:325
medium pred: select t1.name from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id where t1.earnings  >  300000;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:326
medium pred: select t1.name from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id order by best_finish;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
nmedium pred: select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by sum(t2.final_table_made) desc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:327
hard pred: select best_finish from poker_player order by height desc limit 1;
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:328
hard pred: select t2.money_rank from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1;
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:329
medium pred: select name from poker_player order by money_rank desc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
neval_err_num:330
medium pred: select t1.name from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id order by t1.earnings desc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
nmedium pred: select distinct t1.nationality,  count(*) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id group by t1.nationality;
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neasy pred: select distinct t1.nationality from people as t1 join people as t2 on t1.people_id  =  t2.people_id group by t1.nationality having count(*)  >=  2;
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
neasy pred: select t1.nationality from people as t1 join people as t2 on t1.people_id!= t2.people_id group by t1.nationality having count(*)  >=  2;
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
neval_err_num:331
medium pred: select t1.name,  t2.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.name;
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
nmedium pred: select t1.contestant_number,  t2.contestant_name from contestants as t1 join contestants as t2 on t1.contestant_number  =  t2.contestant_number order by t2.contestant_name desc;
medium gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
neval_err_num:332
medium pred: select t1.vote_id,  t2.phone_number,  t3.state from votes as t1 join contestants as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t1.state  =
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes
neval_err_num:333
medium pred: select max(t1.area_code),  min(t2.area_code) from area_code as t1 join area_code_state as t2 on t1.area_code_id  =  t2.area_code;
medium gold: SELECT max(area_code) ,  min(area_code) FROM area_code_state
neval_err_num:334
easy pred: select max(t1.created) from area_code_state as t1 join votes as t2 on t1.state  =  t2.state where t2.state  =  "ca";
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'
neasy pred: select t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name!= "jessie alloway";
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
nmedium pred: select state,  created from votes group by state;
medium gold: SELECT DISTINCT state ,  created FROM votes
neval_err_num:335
medium pred: select t1.contestant_number,  t2.contestant_name from contests as t1 join contestants as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number having count(*)  >=  2
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
neval_err_num:336
extra pred: select t1.contestant_number,  t2.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
nmedium pred: select count(*) from votes where state  =  "ny" union select count(*) from votes where state  =  "ca";
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
nextra pred: select count(*) from contestants where contestant_number not in (select distinct contestant_number from votes);
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
neval_err_num:337
medium pred: select created,  state,  phone_number from votes where contestant_name  =  "tabatha gehling";
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
neval_err_num:338
extra pred: select t1.area_code from area_code_state as t1 join votes as t2 on t1.area_code  =  t2.state where t2.contestant_number  =  "tabatha gehling" intersect select t1.area_code from area_code_
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
nmedium pred: select t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name like '%al%';
medium gold: select contestant_name from contestants where contestant_name like "%al%"
neasy pred: select name from country where indepyear >= 1950;
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950
neasy pred: select name from country where indepyear >= 1950;
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950
neasy pred: select sum(surfacearea) from country where continent  =  "caribbean" and region  =  "caribbean";
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neasy pred: select sum(surfacearea) from country where continent  =  "caribbean";
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neasy pred: select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "anguilla";
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
neval_err_num:339
easy pred: select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.isofullname  =  "anguilla";
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
nmedium pred: select t1.region from country as t1 join city as t2 on t1.code  =  t2.countrycode where name  =  "kabul";
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
nmedium pred: select region from country where name  =  "kabul";
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
neval_err_num:340
extra pred: select t1.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  >  0 group by t1.language order by count(*) desc limit 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
neval_err_num:341
extra pred: select t1.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  >  0.75;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
neval_err_num:342
medium pred: select t1.population,  t3.lifeexpectancy from country as t1 join countrylanguage as t2 on t1.code  =  t2.code intersect select t4.lifeexpectancy from country as t3;
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
neval_err_num:343
medium pred: select t1.population,  t3.lifeexpectancy from country as t1 join countrylanguage as t2 on t1.code  =  t2.code intersect select t4.lifeexpectancy from country as t1 join countrylanguage as t2 on t1.code  =  t2.code
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
neval_err_num:344
medium pred: select t1.region,  t1.population from country as t1 join district as t2 on t1.district  =  t2.id where t1.name  =  "angola";
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
neval_err_num:345
medium pred: select t1.region,  count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code where t2.language  =  "portuguese" group by t1.region;
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
neasy pred: select avg(t1.lifeexpectancy) from country as t1 join country as t2 on t1.continent  =  "central africa" group by t1.continent;
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
neasy pred: select avg(t1.lifeexpectancy) from country as t1 join country as t2 on t1.continent  =  "central africa" intersect select t3.lifeexpectancy from country as t3 where t3.continent  =  "central africa";
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
nhard pred: select t1.name from country as t1 join country as t2 on t1.continent  =  "asia" where t2.lifeexpectancy  <= (select min(t3.lifeexpectancy) from country as t3 where continent  =  "asia");
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
nhard pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where continent  =  "asia" order by lifeexpectancy limit 1;
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
nmedium pred: select sum(t1.population),  max(t3.gnp) from country as t1 join country as t2 on t1.continent  =  "asia" join country as t3 on t1.code  =  t3.code where continent  =  'asia';
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
neval_err_num:346
medium pred: select sum(t1.population),  max(t3.gnp) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code group by continent having count(*)  >  0 intersect select max(t3.gnp) from country as t1 join
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
neval_err_num:347
medium pred: select avg(t1.lifeexpectancy) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code where continent  =  "africa" and governmentform  =  "republic";
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
nmedium pred: select avg(t1.lifeexpectancy) from country as t1 join country as t2 on t1.continent  =  "africa" where t2.governmentform  = 'republic';
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
nmedium pred: select sum(t1.surfacearea) from country as t1 join country as t2 on t1.continent  =  "asia" intersect select sum(t3.surfacearea) from country as t3 join country as t4 on t3.continent  =  "europe";
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
nmedium pred: select sum(surfacearea) from country where continent  =  "asia" intersect select sum(surfacearea) from country where continent  =  "europe";
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neasy pred: select count(*) from city where name  =  "gelderland";
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
neval_err_num:348
easy pred: select sum(t1.population) from city as t1 join country as t2 on t1.countrycode  =  t2.code where t2.district  =  "gelderland";
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
neval_err_num:349
medium pred: select avg(t1.gnp),  sum(t3.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code where t2.isoterminal  =   "us" union select avg(t1.gnp),
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:350
medium pred: select avg(t1.gnp),  sum(t3.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code where t2.isousa  =  1 group by t1.code;
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:351
easy pred: select count(*) from governmentform where continent  =  "africa";
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
neval_err_num:352
medium pred: select sum(t1.percentage) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.countrycode  =  "aruba";
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: select count(*) from countrylanguage where countrycode  =  "aruba";
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
neval_err_num:353
medium pred: select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.isoficial  =  "yes" and t1.name  =  'afghanistan';
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
nmedium pred: select count(*) from countrylanguage where language  =  "afghani";
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t2.countrycode order by count(*) desc limit 1;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by sum(t2.percentage) desc limit 1;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:354
easy pred: select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =  "english" intersect select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:355
easy pred: select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =  'english' intersect select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =  "english" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =  "english" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language  =  "english" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:356
extra pred: select t1.name from country language  join country on (t1.countrycode  =  t2.code) where isofficial  =  "english" intersect select t1.name from country language  join country on (t1.countrycode  =  t2.code) where isofficial
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:357
medium pred: select count(distinct continent) from countrylanguage where language  =  "chinese";
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:358
medium pred: select count(*) from country where language  =  "chinese";
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:359
hard pred: select region from country where language  =  'english' intersect select region from country where language  =  'dutch';
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:360
hard pred: select region from country where language  =  "english" intersect select region from country where language  =  "dutch";
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:361
extra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where percentage  >  0.5 intersect select name from country where language  =  "english" union select name from country where language  =  "dutch";
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
neval_err_num:362
extra pred: select t1.name from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code where t1.official  =  "english" union all select t1.name from countrylanguage as t1 join country as t2 on t1.countrycode  =
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
neval_err_num:363
hard pred: select t1.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.govtype  =   "republic" group by t1.language having count(*)  =  1;
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:364
hard pred: select language from countrylanguage where code  = 'republic' group by language having count(*)  =  1;
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:365
extra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where language  =  "english" order by poplimit desc limit 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
nextra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where language  =  "english" order by population desc limit 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
neval_err_num:366
hard pred: select t1.name,  t1.population,  t3.lifeexpectancy from country as t1 join country as t2 on t1.continent!= "asia" except select t4.name,  t4.population,  t5.lifeexpectancy from country as t1 join country
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:367
hard pred: select t1.name,  t1.population,  t3.lifeexpectancy from country as t1 join country as t2 on t1.continent  =  "asia" union all select t4.name,  t4.population,  t5.lifeexpectancy from country as t
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:368
extra pred: select avg(t1.lifeexpectancy) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode except select avg(t1.lifeexpectancy);
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
nextra pred: select avg(t1.lifeexpectancy) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.isofficial!= "english";
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
nextra pred: select sum(t1.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language!= 'english';
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:369
extra pred: select count(*) from country where language!= 'english';
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:370
medium pred: select t1.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.headofstate  =  "beatrix";
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:371
medium pred: select t1.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.headofstate  =  "beatrix";
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:372
medium pred: select count(distinct language) from countrylanguage where indepyear <=  1930;
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:373
medium pred: select count(distinct language) from countrylanguage where indepyear <  1930;
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
nhard pred: select t1.name from country as t1 join country as t2 on t1.continent!= "europe" intersect select name from country where continent  =  'europe';
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
nhard pred: select t1.name from country as t1 join country as t2 on t1.continent!= "europe" intersect select name from country where continent  =  'europe';
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
nextra pred: select t1.name from country as t1 join country as t2 on t1.code!= t2.code where t1.continent  =  "africa" intersect select name from country except select name from country where continent  =  "asia";
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
nextra pred: select t1.name from country as t1 join country as t2 on t1.code!= t2.code where t1.continent  =  "africa" intersect select name from country except select name from country where continent  =  "asia";
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
nextra pred: select t1.name from country as t1 join country as t2 on t1.code!= t2.code where t1.population  >  (select max(t3.population) from country as t3);
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
nextra pred: select t1.name from country as t1 join country as t2 on t1.code!= t2.code where t1.population  >  (select max(t3.population) from country as t3);
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
nhard pred: select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language!= 'english';
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
nhard pred: select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language!= 'english';
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neasy pred: select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t2.language having count(*) >  0;
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neasy pred: select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where language!= 'english';
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neval_err_num:374
hard pred: select code from country where language!= 'english' intersect select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode except select distinct capital from country;
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:375
hard pred: select code from country where language!= 'english' except select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language == "english"; select distinct t3.code from country as t1 join countrylanguage as t2
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:376
extra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode except select name from city where district!= "europe" intersect select name from countrylanguage where percentage <> 'english';
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:377
extra pred: select name from city where district != "europe" except select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.langofficial !=  'english';
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:378
hard pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  "chinese" intersect select name from city where continent  =  'asia';
hard gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
neval_err_num:379
hard pred: select distinct name from city where district  =  "asia" intersect select t1.name from countrylanguage as t1 join city as t2 on t1.countrycode  =  t2.countrycode except select distinct name from city;
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
neval_err_num:380
medium pred: select t1.name,  t1.indepyear,  t1.surfacearea from country as t1 order by poplimit desc limit 1;
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
neval_err_num:381
medium pred: select t1.name,  t3.indepyear,  t4.surfacearea from country as t1 join countrylanguage as t2 on t1.code  =  t2.code join country as t3 on t1.code  =  t3.code where t3.population
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
neval_err_num:382
medium pred: select t1.population,  t1.name,  t3.leader from country as t1 join country as t2 on t1.code2  =  t2.code where t2.surfacearea  >  (select max(t4.surfacearea) from country as t4
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:383
medium pred: select t1.name,  t1.population,  t3.headofstate from country as t1 join countrylanguage as t2 on t1.code  =  t2.code join country as t3 on t1.code  =  t3.code where surfacearea  =  (select
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
nmedium pred: select t1.name, count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*) >=  3;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:384
medium pred: select t1.name,  count(*) from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code group by t1.countriespeaks having count(*)  >  2;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:385
extra pred: select count(*),  t1.district from city as t1 join (select avg(population),  district from city group by district ) as t2 on t1.district  =  t2.t1;
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:386
extra pred: select count(*),  t1.district from city as t1 join (select avg(population),  district from city group by district ) as t2 on t1.district!= t2.district where t1.population > t2.avg;
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:387
medium pred: select t1.govtform,  sum(t3.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code group by t1.govtform having avg(t4.lifeexpectancy)  >  72;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:388
medium pred: select distinct t1.governmentform,  sum(t3.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code group by t1.governmentform having avg(t3.lifeexpectancy)  >  72;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:389
medium pred: select avg(t1.lifeexpectancy),  sum(t3.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code group by t1.continent having avg(t1.lifeexpectancy) <  72;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:390
medium pred: select t1.continent,  sum(t3.population),  avg(t4.lifeexpectancy) from country as t1 join countrylanguage as t2 on t1.code  =  t2.code group by t1.continent having avg(t4.lifeexpectancy
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
nmedium pred: select name,  surfacearea from country order by population desc limit 5;
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
nmedium pred: select name from country order by population desc limit 3;
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
neval_err_num:391
medium pred: select name from country where continent  =  "europe" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.population  =  80000;
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
neval_err_num:392
medium pred: select name from country where continent  =  "europe" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.population  =  80000;
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
nhard pred: select sum(t1.population),  avg(t1.surfacearea) from country as t1 join country as t2 on t1.continent  =  "north america" where t2.surfacearea  >  3000;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
nhard pred: select sum(t1.population),  avg(t2.surfacearea) from country as t1 join country as t2 on t1.code  =  t2.code where continent  =  "north america" and t2.surfacearea  >  3000
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
nhard pred: select t1.language from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code group by t1.language order by count(*) desc limit 1;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
neval_err_num:393
hard pred: select t1.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.language order by count(*) desc limit 1;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
nmedium pred: select t1.language,  count(*) from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code group by t1.language order by count(*) desc limit 5;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:394
medium pred: select t1.code,  t3.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.code order by count(*) desc limit 5;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:395
extra pred: select count(*) from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code where language  =  "spanish" group by percentageget answer from (select sum(t3.count) from countrylanguage as t1 join country as t2 on t1.
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nextra pred: select count(*) from countrylanguage where percentage  >  0.5;
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nmedium pred: select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t2.countrycode order by count(*) desc limit 1;
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nmedium pred: select t1.code from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where percentage  >  0.75;
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neasy pred: select distinct t1.record_company from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t1.record_company order by year_of_founded;
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
neasy pred: select distinct t1.record_company from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id order by year_of_founded desc;
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
neval_err_num:396
easy pred: select avg(t1.attendence) from show as t1 join performance as t2 on t1.performance_id  =  t2.performance_id;
easy gold: SELECT avg(Attendance) FROM SHOW
neval_err_num:397
easy pred: select avg(t1.attendence) from show as t1 join performance as t2 on t1.performance_id  =  t2.performance_id;
easy gold: SELECT avg(Attendance) FROM SHOW
neval_err_num:398
medium pred: select max(t2.share),  min(t1.share) from performance as t1 join show as t2 on t1.performance_id  =  t2.performance_id where t1.type!= 'live final';
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:399
medium pred: select max(t2.share),  min(t1.share) from performance as t1 join show as t2 on t1.performance_id  =  t2.performance_id where t1.type!= 'live final';
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:400
medium pred: select t1.name from conductor as t1 join (select distinct name from conductor order by year_of_work desc limit 1) as t2 on t1.name  =  t2.name;
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
neval_err_num:401
medium pred: select t1.name from conductor as t1 join (select distinct conductor_id,  max(year_of_work) from conductor group by conductor_id ) as t2 on t1.conductor_id  =  t2.conductor_id;
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
nmedium pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t1.name having count(*)  >  1;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
neval_err_num:402
medium pred: select t1.name from conductor as t1 join performance as t2 on t1.conductor_id  =  t2.conductor_id group by t1.name having count(*)  >  1;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
nextra pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
nmedium pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_work >  2008;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
nmedium pred: select distinct t1.record_company,  count(*) from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t1.record_company;
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
neval_err_num:403
medium pred: select count(*),  t1.record_company from orchestra as t1 join recording_companies as t2 on t1.record_company  =  t2.recording_company group by t2.recording_company;
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
nmedium pred: select major_record_format from orchestra group by major_record_format order by count(*) desc;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
nmedium pred: select major_record_format from orchestra group by major_record_format order by count(*) desc;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:404
hard pred: select t1.orchestra from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id where not exists (select * from performance);
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:405
hard pred: select t1.orchestra from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id where t2.orchestra_id is null;
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:406
hard pred: select distinct t1.record_company from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id where year_of_founded <  2003 intersect select distinct t1.record_company from orchestra as t1 join performance as
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
neval_err_num:407
hard pred: select distinct t1.record_company from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id where year_of_founded <  2003 intersect select distinct t1.record_company from orchestra as t1 join performance as
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
nmedium pred: select count(*) from orchestra where major_record_format  =  'cd' union select count(*) from orchestra where major_record_format  =  'dvd';
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
nmedium pred: select count(*) from orchestra where major_record_format  =  'cd' intersect select count(*) from orchestra where major_record_format  =  'dvd';
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
nmedium pred: select year_of_founded from orchestra where major_record_format != "cd" group by year_of_founded having count(*)  >  1;
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
nmedium pred: select year_of_founded from orchestra where count(*)  >  1;
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
neasy pred: select t1.grade from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id where name  =  "kyle";
easy gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
neasy pred: select t1.id from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id where name  =  "kyle";
easy gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
neval_err_num:408
easy pred: select t1.id from student as t1 join highschooler as t2 on t1.id  =  t2.student_id where name  =  "kyle";
easy gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
neval_err_num:409
medium pred: select count(*) from highschooler where grade  =   "9" union all select count(*) from highschooler where grade  =   "10";
medium gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
neval_err_num:410
medium pred: select count(*) from highschooler where grade  =   "9" union all select count(*) from highschooler where grade  =   "10";
medium gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
nhard pred: select max(grade) from highschooler;
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
nmedium pred: select t1.student_id,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
nmedium pred: select count(*),  t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t2.id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
nmedium pred: select name,  count(*) from highschooler group by id;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
nmedium pred: select name,  count(*) from highschooler group by name;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
nextra pred: select t1.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nmedium pred: select name from highschooler where count(*) >= 3;
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
nmedium pred: select name from highschooler where count(*) >= 3;
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
neval_err_num:411
hard pred: select name from student as t1 join friend as t2 on t1.id  =  t2.student_id where t1.name  =  "kyle";
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
nhard pred: select t1.name from highschooler as t1 join friend as t2 on t1.id  =  t2.friend_id where t1.name  =  "kyle";
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
neval_err_num:412
medium pred: select count(*) from friend where name  =  "kyle";
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
nmedium pred: select count(*) from friend where student_id  =  1;
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
neval_err_num:413
hard pred: select student_id from highschooler where id not in (select t1.student_id from highschooler as t1 join friend as t2 on t1.id  =  t2.friend_id);
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
neval_err_num:414
hard pred: select id from highschooler where student_id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.friend_id  =  t2.id);
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
nhard pred: select name from highschooler where id not in (select student_id from friend);
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
nhard pred: select name from highschooler where id not in (select student_id from friend);
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
neval_err_num:415
hard pred: select id from highschooler where student_id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.friend_id  =  t2.id) intersect select t3.student_id from like as t1 join highschooler as t2 on t
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:416
hard pred: select t1.id from student as t1 join like as t2 on t1.id  =  t2.student_id intersect select id from friend;
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:417
hard pred: select t1.name from student as t1 join highschooler as t2 on t1.id  =  t2.student_id where exists (select * from like as t3 join highschooler as t4 on t3.student_id  =  t4.id where t4.id!=
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
neval_err_num:418
hard pred: select name from highschooler where id in (select t1.student_id from like as t2 join highschooler as t1 on t2.student_id  =  t1.id);
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
nmedium pred: select t1.student_id,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
nmedium pred: select count(*) from likes;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
nmedium pred: select name,  count(*) from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
nmedium pred: select t1.name,  count(*) from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id group by name;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
nextra pred: select t1.name from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.name from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:419
medium pred: select name from highschooler where id in (select t1.student_id from like as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2);
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
neval_err_num:420
medium pred: select name from highschooler where id in (select t1.student_id from like as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2);
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
nhard pred: select name from highschooler where grade  >  5 intersect select t1.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name having count(*)  >=  2;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
nhard pred: select name from highschooler where grade  >  5 intersect select t1.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name having count(*)  >=  2;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
nmedium pred: select count(*) from likes where liked_id  =  1;
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
neval_err_num:421
hard pred: select avg(t1.grade) from student as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.id having count(*) >  0;
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
nhard pred: select avg(t1.grade) from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id;
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:422
extra pred: select min(t1.grade) from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id where t2.friend_id is null;
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:423
extra pred: select min(t1.grade) from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id where t2.friend_id is null;
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:424
hard pred: select state from owners as t1 join professionals as t2 on t1.owner_id  =  t2.owner_id;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
neval_err_num:425
hard pred: select state from owners as t1 join professionals as t2 on t1.owner_id  =  t2.owner_id;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
nhard pred: select avg(t1.age) from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id;
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
nhard pred: select avg(t1.age) from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id;
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
neval_err_num:426
extra pred: select professional_id,  last_name,  home_phone from professionals where first_name!= "admin" intersect select t1.professional_id,  t3.last_name,  t4.home_phone from treats as t1 join professionals as t2 on t1.professional
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
neval_err_num:427
extra pred: select professional_id,  last_name,  home_phone from professionals where street like '%indiana%' intersect select t1.professional_id,  last_name,  home_phone from professionals as t1 join treatments as t2 on t1.professional_id  =  t2
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
neval_err_num:428
hard pred: select name from dogs where cost_of_treatment <= (select sum(cost_of_treatment) from treats as t2 join dogs as t1 on t1.dog_id  =  t2.dog_id group by t1.dog_id);
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
neval_err_num:429
hard pred: select name from dogs where cost_of_treatment < 1000;
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
nhard pred: select t1.first_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id except select distinct(t3.first_name) from professionals as t3;
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:430
hard pred: select distinct t1.first_name from owners as t1 join professionals as t2 on t1.owner_id  =  t2.owner_id except select distinct t3.first_name from dogs as t4 join owners as t5 on t4.owner_id  =  t5
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:431
extra pred: select t1.professional_id,  t2.role_code,  t3.email_address from professionals as t1 join roles as t2 on t1.role_code  =  t2.role_code join emails as t3 on t1.email_address  =  t3
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:432
extra pred: select professional_id,  last_name from professionals where professional_id not in (select t1.professional_id from treats as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id);
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:433
extra pred: select t1.owner_id,  t2.first_name,  t2.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1;
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:434
extra pred: select t1.owner_id,  t2.first_name,  t2.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1;
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:435
medium pred: select t1.professional_id,  t2.role_code,  t3.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join owners as t3 on t2.owner_id
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
nmedium pred: select professional_id,  role_code,  first_name from professionals group by professional_id having count(*)  >=  2;
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:436
extra pred: select t1.owner_id,  t2.last_name from owners as t1 join treats as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment) desc limit
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:437
extra pred: select t1.owner_id,  t2.last_name from owners as t1 join treats as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t2.cost_of_treatment) desc limit
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:438
extra pred: select t1.treatment_type_description from treatment_types as t1 join treats as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by cost_of_treatment order by sum(t2.cost_of_
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
neval_err_num:439
extra pred: select t1.treatment_type_description from treatment_types as t1 join treats as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
neval_err_num:440
extra pred: select t1.owner_id,  t2.zip_code from owners as t1 join charges as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t2.charge_amount) desc limit 1;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:441
extra pred: select t1.owner_id,  t2.zip_code from charges as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t1.charge_amount) desc limit 1;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:442
medium pred: select t1.professional_id,  t2.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:443
medium pred: select professional_id,  max(cell_number) from professionals group by professional_id having count(*) >=2;
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:444
extra pred: select t1.first_name,  t2.last_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id where cost_of_treatment < (select avg(cost_of_treatment) from
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
neval_err_num:445
extra pred: select t1.first_name,  t1.last_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id where cost_of_treatment < (select avg(cost_of_treatment) from
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
neval_err_num:446
medium pred: select t1.date_of_treatment,  t2.first_name from treats as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id;
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:447
medium pred: select t1.date_of_treatment,  t2.first_name from treats as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id;
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:448
medium pred: select t1.cost_of_treatment,  t2.treatment_type_description from treats as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code;
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
neval_err_num:449
medium pred: select sum(t1.cost_of_treatment),  t2.treatment_type_description from treats as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code;
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
neval_err_num:450
medium pred: select t1.first_name,  t1.last_name,  t2.size_description from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id;
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:451
extra pred: select t1.name,  date_of_treatment from dogs as t1 join treats as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code in (select breed_code from breeds group by breed_code order by count
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:452
extra pred: select t1.name,  date_of_treatment from dogs as t1 join treats as t2 on t1.dog_id  =  t2.dog_id where t2.treatment_type_code  =  'rare' order by count(*) desc limit 1;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:453
medium pred: select t1.date_arrived,  t2.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id;
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:454
medium pred: select t1.date_arrived,  t2.date_departed from dogs as t1 join treats as t2 on t1.dog_id  =  t2.dog_id;
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:455
extra pred: select t2.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id order by date_of_birth limit 1;
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
nextra pred: select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id order by age asc limit 1;
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
neval_err_num:456
medium pred: select t1.email_address from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where first_name like '%hawai%' intersect select email_address from professionals except select email_address from professionals where state like 'wi%';
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
neval_err_num:457
medium pred: select t1.email_address from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where first_name like '%hawai%' intersect select email_address from professionals except select email_address from professionals where state like 'wi%';
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
neval_err_num:458
medium pred: select t1.date_arrived,  t2.date_departed from dogs as t1 join treats as t2 on t1.dog_id  =  t2.dog_id;
medium gold: SELECT date_arrived ,  date_departed FROM Dogs
neval_err_num:459
medium pred: select t1.date_arrived,  t2.date_departed from dogs as t1 join treats as t2 on t1.dog_id  =  t2.dog_id;
medium gold: SELECT date_arrived ,  date_departed FROM Dogs
neasy pred: select count(*) from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id group by t1.dog_id having count(*) >  0;
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neasy pred: select count(*) from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id;
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neval_err_num:460
easy pred: select count(*) from professionals as t1 join treats as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having sum(t2.treatment_id)!= 0;
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments
neval_err_num:461
easy pred: select count(*) from professionals as t1 join treats as t2 on t1.professional_id  =  t2.professional_id group by professional_id having count(*) >  0;
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments
neval_err_num:462
medium pred: select t1.role,  t2.street,  t3.city,  t4.state from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id join cities as t3 on t2.city  =  t3.city
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
neval_err_num:463
medium pred: select t1.role_code,  t2.street,  t3.city,  t4.state from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id join cities as t3 on t2.city  =  t3
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
nmedium pred: select t1.first_name,  t1.last_name,  t2.email_address from owners as t1 join professionals as t2 on t1.owner_id  =  t2.professional_id where t2.state like '% north';
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
nmedium pred: select t1.first_name,  t1.last_name,  t2.state from owners as t1 join professionals as t2 on t1.owner_id  =  t2.professional_id where t2.state like '% north';
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
neval_err_num:464
medium pred: select max(t1.cost_of_treatment) from treats as t1 join treatments as t2 on t1.treatment_id  =  t2.treatment_id;
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
neval_err_num:465
medium pred: select max(t1.cost_of_treatment) from treats as t1 join treatments as t2 on t1.treatment_id  =  t2.treatment_id order by date_of_treatment desc limit 1;
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
neval_err_num:466
extra pred: select count(*) from dogs where dog_id not in (select t1.dog_id from treats as t1 join dogs as t2 on t1.dog_id  =  t2.dog_id);
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
neval_err_num:467
extra pred: select count(*) from dogs where dog_id not in (select t1.dog_id from treats as t1 join dogs as t2 on t1.dog_id  =  t2.dog_id);
extra gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
nextra pred: select count(*) from owners except select owner_id from dogs;
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
nextra pred: select count(*) from owners except select owner_id from dogs;
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
neval_err_num:468
extra pred: select count(*) from professionals as t1 join treats as t2 on t1.professional_id  =  t2.professional_id except select distinct professional_id from treats;
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
neval_err_num:469
extra pred: select count(*) from professionals as t1 join treats as t2 on t1.professional_id  =  t2.professional_id where t2.dog_id is null;
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
neval_err_num:470
medium pred: select t2.name,  t3.age,  t4.weight from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id join size_codes as t3 on t1.size_code  =  t3.size_code join
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
neval_err_num:471
medium pred: select t2.name,  t3.age,  t4.weight from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where t1.abandoned_yn!= "1" union all select t2.name,  t3
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
neasy pred: select avg(t1.age) from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id;
easy gold: SELECT avg(age) FROM Dogs
neasy pred: select avg(t1.age) from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id;
easy gold: SELECT avg(age) FROM Dogs
neasy pred: select max(t1.age) from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id;
easy gold: SELECT max(age) FROM Dogs
neasy pred: select max(t1.age) from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id;
easy gold: SELECT max(age) FROM Dogs
nmedium pred: select t1.charge_type,  sum(t2.charge_amount) from charges as t1 join charges as t2 on t1.charge_id  =  t2.charge_id group by t1.charge_type;
medium gold: SELECT charge_type ,  charge_amount FROM Charges
nmedium pred: select t1.charge_type,  sum(t2.charge_amount) from charges as t1 join charges as t2 on t1.charge_id  =  t2.charge_id group by t1.charge_type;
medium gold: SELECT charge_type ,  charge_amount FROM Charges
neval_err_num:472
easy pred: select max(t1.cost_of_treatment) from treats as t1 join charges as t2 on t1.treatment_id  =  t2.charge_id group by t2.charge_type;
easy gold: SELECT max(charge_amount) FROM Charges
neval_err_num:473
easy pred: select max(t1.charge_amount) from charges as t1 join dog_charges as t2 on t1.charge_id  =  t2.charge_id group by t1.charge_type;
easy gold: SELECT max(charge_amount) FROM Charges
neval_err_num:474
medium pred: select t1.email_address,  t2.cell_number,  t3.home_phone from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id join professionals as t3 on t1.professional_id  =
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals
neval_err_num:475
medium pred: select t1.email_address,  t2.cell_number,  t3.home_phone from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id join professionals as t3 on t1.professional_id  =
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals
nmedium pred: select distinct t1.breed_name,  t2.size_description from breeds as t1 join sizes as t2 on t1.breed_code  =  t2.size_code;
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
nmedium pred: select distinct t1.breed_name,  t2.size_description from breeds as t1 join sizes as t2 on t1.breed_code  =  t2.size_code;
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
neval_err_num:476
medium pred: select t1.first_name,  t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id;
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
neval_err_num:477
medium pred: select t1.first_name,  t2.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id;
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
neasy pred: select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id order by t1.net_worth_millions;
easy gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC
neval_err_num:478
medium pred: select t1.birth_year,  t2.citizenship from singer as t1 join citizen as t2 on t1.citizen_id  =  t2.citizen_id;
medium gold: SELECT Birth_Year ,  Citizenship FROM singer
neval_err_num:479
medium pred: select t1.birth_year,  t2.citizenship from singer as t1 join citizen as t2 on t1.citizen_id  =  t2.citizen_id;
medium gold: SELECT Birth_Year ,  Citizenship FROM singer
neval_err_num:480
easy pred: select t1.name from singer as t1 join citizen as t2 on t1.citizenship  =  t2.country where country!= 'france';
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"
neval_err_num:481
medium pred: select t2.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t1.birth_year in (1948,  1949);
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
neval_err_num:482
medium pred: select name from singer where birth_year in (1948,  1949);
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
nmedium pred: select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id order by t1.net_worth_millions desc limit 1;
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
neval_err_num:483
medium pred: select t1.name from singer as t1 join (select max(net_worth_millions),  name from singer group by name) as t2 on t1.name  =  t2.name;
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
nmedium pred: select distinct t1.citizenship,  count(*) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.citizenship;
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
neval_err_num:484
hard pred: select t1.citizenship from singer as t1 join (select distinct citizenship from singer) as t2 on t1.citizenship  =  t2.citizenship group by t2.citizenship order by count(*) desc limit 1;
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:485
medium pred: select t1.citizenship,  max(t2.net_worth_millions) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.citizenship;
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
nmedium pred: select title from song union select name from singer;
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
neval_err_num:486
medium pred: select title,  name from song; unnest(distinct title) intersect distinct name;
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
neval_err_num:487
medium pred: select name from singer where sales  >  300000;
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
nmedium pred: select name from singer where count(*)  >  1;
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
nmedium pred: select name from singer where count(*)  >  1;
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
neval_err_num:488
hard pred: select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.song_id is null;
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
nhard pred: select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id except select name from singer;
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
neval_err_num:489
hard pred: select t2.citizenship from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t1.birth_year <  1945 intersect select t2.citizenship from singer as t1 join song as t
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
neval_err_num:490
hard pred: select t2.citizenship from singer as t1 join citizen as t2 on t1.citizenship  =  t2.citizen_id where t1.birth_year <  1945 intersect select t2.citizenship from singer as t1 join citizen
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
neval_err_num:491
medium pred: select t1.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code  =  t2.property_type_code;
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
neval_err_num:492
hard pred: select property_name from properties where (property_type_code) in ('house','apartment') group by property_type_code having count(*)  >  1;
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
nn                    easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.504                0.193                0.213                0.163                0.266               
====================== EXACT MATCHING ACCURACY =====================
exact match          0.500                0.175                0.098                0.157                0.237               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.949                0.851                0.877                0.891                0.895               
select(no AGG)       0.964                0.861                0.926                0.906                0.913               
where                0.697                0.461                0.311                0.294                0.498               
where(no OP)         0.737                0.483                0.556                0.353                0.573               
group(no Having)     0.619                0.781                0.952                0.750                0.774               
group                0.619                0.699                0.952                0.682                0.717               
order                0.833                0.519                1.000                0.930                0.829               
and/or               1.000                0.904                0.902                0.880                0.922               
IUEN                 0.000                0.000                0.071                0.000                0.026               
keywords             0.876                0.772                0.733                0.774                0.793               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.750                0.383                0.408                0.343                0.469               
select(no AGG)       0.762                0.388                0.431                0.349                0.479               
where                0.491                0.225                0.149                0.053                0.236               
where(no OP)         0.519                0.236                0.266                0.064                0.272               
group(no Having)     0.650                0.429                0.513                0.418                0.454               
group                0.650                0.383                0.513                0.380                0.421               
order                0.682                0.187                0.418                0.506                0.398               
and/or               0.988                1.000                1.000                1.000                0.997               
IUEN                 0.000                0.000                0.024                0.000                0.013               
keywords             0.660                0.368                0.316                0.289                0.393               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.838                0.529                0.557                0.496                0.615               
select(no AGG)       0.851                0.535                0.588                0.504                0.628               
where                0.576                0.303                0.201                0.090                0.321               
where(no OP)         0.609                0.317                0.360                0.108                0.369               
group(no Having)     0.634                0.553                0.667                0.537                0.572               
group                0.634                0.495                0.667                0.488                0.530               
order                0.750                0.275                0.590                0.656                0.538               
and/or               0.994                0.949                0.949                0.936                0.958               
IUEN                 1.000                1.000                0.036                1.000                0.018               
keywords             0.753                0.498                0.442                0.421                0.525               
