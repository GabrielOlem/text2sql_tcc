
eval_err_num:1
medium pred: select t2.name,  t2.country,  t2.age from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id order by t1.age asc;
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
nmedium pred: select name,  country,  age from singer;
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
neval_err_num:2
medium pred: select t2.name,  t2.release_year from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where t1.age  =  (select min(age) from singer);
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:3
medium pred: select t2.name,  t2.release_year from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where t1.age  =   0;
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:4
medium pred: select t2.location,  t2.name from stadium as t1 join stadium_in_concert as t2 on t1.stadium_id  =  t2.stadium_id where t1.capacity  >=  5000 and t1.capacity  <=  10000;
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
nmedium pred: select location,  name from stadium where capacity  >=  5000 and capacity  <=  10000;
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
nmedium pred: select max(highest),  avg(lowest) from stadium;
medium gold: select max(capacity), average from stadium
neval_err_num:5
medium pred: select name,  avg(capacity) from stadium order by avg(attendance);
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
neval_err_num:6
medium pred: select name,  avg(capacity) from stadium order by avg(attendance) desc limit 1;
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
neval_err_num:7
medium pred: select t2.name,  count(*) from stadium as t1 join singer_in_concert as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
nmedium pred: select count(*) from stadium as t1 join concert as t2 on t1.stadium_id  =  t2.stadium_id;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:8
extra pred: select t2.name,  t2.capacity from stadium as t1 join singer_in_concert as t2 on t1.stadium_id  =  t2.stadium_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:9
extra pred: select t2.name,  t2.capacity from stadium as t1 join singer_in_concert as t2 on t1.stadium_id  =  t2.stadium_id order by t1.year desc limit 1;
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
nhard pred: select year from concert order by count(*) desc limit 1;
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
nhard pred: select name from stadium where capacity  >  0;
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
nhard pred: select name from stadium where capacity  =  0;
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
nhard pred: select name from stadium where highest !=  2014;
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
nhard pred: select name from stadium where capacity !=  highest  except select name from stadium where capacity  =  highest;
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:10
medium pred: select t1.concert_name,  t2.theme from concert as t1 join singer as t2 on t1.concert_id  =  t2.concert_id;
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
neval_err_num:11
medium pred: select t1.concert_name,  t2.theme,  count(*) from concert as t1 join singer as t2 on t1.concert_id  =  t2.concert_id group by t1.concert_id;
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
nmedium pred: select t1.name,  count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
nmedium pred: select t1.name,  count(*) from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:12
hard pred: select t2.name from concert as t1 join singer_in_concert as t2 on t1.concert_id  =  t2.concert_id where t1.year  =  2014;
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:13
hard pred: select name from singer where year  =  2014;
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:14
medium pred: select t2.name,  t1.country from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where t1.name like '%hey%';
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:15
medium pred: select t2.name,  t1.country from singer as t1 join singer_in_concert as t2 on t1.singer_id  =  t2.singer_id where t1.name like "%hey%";
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:16
extra pred: select t2.name,  t1.location from stadium as t1 join singer_in_concert as t2 on t1.stadium_id  =  t2.concert_id where t1.year  >=  2014 intersect select t2.name,  t1.location from
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
neval_err_num:17
extra pred: select name,  location from stadium where year  =  2014 intersect select stadium_id,  location from stadium where year  =  2015;
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
nhard pred: select count(*) from stadium where highest  =  (select max(capacity) from stadium);
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neval_err_num:18
hard pred: select count(*) from stadium where highest  =  max(capacity);
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neval_err_num:19
medium pred: select t1.weight from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where t2.pettype  =  "dog" order by t2.petid asc limit 1;
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
nmedium pred: select weight from pets where pet_age  =  (select min(pet_age) from pets);
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:20
medium pred: select max(weight),  pet_type from pets group by pet_type;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
neval_err_num:21
medium pred: select max(weight),  pet_type from pets group by pet_type;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
nmedium pred: select count(*) from student as t1 join pets as t2 on t1.stuid  =  t2.petid where t1.age  >  20;
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:22
medium pred: select count(*) from student as t1 join pets as t2 on t1.stuid  =  t2.stuid where t1.age  >  20;
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:23
hard pred: select count(*) from pets as t1 join student as t2 on t1.petid  =  t2.petid where t2.sex  =  'f';
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:24
hard pred: select count(*) from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where t1.sex  =  'female' and t2.pettype  =  'dog';
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:25
easy pred: select count(distinct pet_type) from pets;
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:26
easy pred: select count(distinct pet_type) from pets;
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:27
extra pred: select fname from student where pettype  =  'cat' or pettype  =  'dog';
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:28
extra pred: select t1.fname from student as t1 join pets as t2 on t1.stuid  =  t2.petid where t2.pettype  =  "cat" intersect select t1.fname from student as t1 join pets as t2 on t1.stuid  =
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:29
extra pred: select fname from student where pettype  =  'cat' intersect select fname from student where pettype  =  'dog';
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
neval_err_num:30
extra pred: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.petid in ( select petid from pets where pettype  =  "cat" intersect select petid from pets where pettype  =  "
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
neval_err_num:31
extra pred: select t1.major,  t1.age from student as t1 join pets as t2 on t1.stuid  =  t2.stuid where t2.petid !=  100;
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
nextra pred: select t1.major,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.petid !=  100;
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:32
hard pred: select stuid from student except select t1.stuid from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where t2.pettype  =  'cat';
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:33
hard pred: select stuid from student except select t1.stuid from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where pettype  =  'cat';
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:34
extra pred: select fname,  age from student where pettype  =  'dog' and pet_age !=  4;
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:35
extra pred: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.petid  =  4 except select t1.fname from student as t1 join has_pet as t2 on t1.stuid
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:36
medium pred: select pet_type,  pet_weight from pets order by pet_age desc limit 1;
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
nmedium pred: select pettype,  weight from pets where pet_age  =  0 order by pettype asc limit 1;
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:37
medium pred: select petid,  weight from pets where age  >  1;
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
neval_err_num:38
medium pred: select t2.petid,  t2.weight from pets as t1 join has_pet as t2 on t1.petid  =  t2.petid where t1.stuid  >  1;
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
nmedium pred: select avg(pet_age),  max(pet_age) from pets group by pet_age;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
nmedium pred: select pet_age,  avg(pet_age),  max(pet_age) from pets group by pet_age;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:39
medium pred: select avg(weight),  pet_type from pets group by pet_type;
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:40
medium pred: select fname,  age from student where pet_id in (select petid from pets);
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
nmedium pred: select distinct t1.fname,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t2.petid  =  pets.petid;
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:41
medium pred: select petid from pets where stuid  =  "smith";
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
neval_err_num:42
medium pred: select pet_id from pets where lname  =  "smith";
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
neval_err_num:43
medium pred: select count(*) from pets as t1 join student as t2 on t1.petid  =  t2.petid where t2.stuid in (select stuid from has_pet);
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
neval_err_num:44
medium pred: select count(*),  stuid from pets group by stuid;
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
nmedium pred: select fname,  lname from student group by fname having count(*)  >  1;
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
nmedium pred: select t1.fname,  t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1;
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:45
hard pred: select lname from student where pet_age  =  3 and pettype  =  'cat';
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:46
hard pred: select lname from student where pet_age  =  3 and pettype  =  "cat";
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:47
extra pred: select avg(t2.age) from student as t1 join pets as t2 on t1.stuid  =  t2.petid where t1.sex != 'm' and t1.major !=  'a';
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)
neval_err_num:48
extra pred: select avg(t2.age) from student as t1 join pets as t2 on t1.stuid  =  t2.petid where t1.sex != 'm' and t1.stuid !=  'pets.stuid';
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)
neval_err_num:49
medium pred: select t2.continent,  t1.continentname,  count(*) from continents as t1 join model_list as t2 on t1.continent  =  t2.continentid group by t1.continentname;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:50
medium pred: select t2.continent,  t1.countryname,  count(*) from continents as t1 join model_list as t2 on t1.continent  =  t2.continent group by t1.continent;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
nmedium pred: select t1.maker,  count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.maker group by t1.maker;
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
nmedium pred: select t1.fullname,  count(*) from car_makers as t1 join model_list as t2 on t1.maker  =  t2.maker group by t1.maker;
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:51
hard pred: select t1.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.horsepower  =  min(t1.horsepower);
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:52
hard pred: select t1.model from car_names as t1 join cars_data as t2 on t1.make  =  t2.make where t2.horsepower  < (select max(t3.horsepower) from car_names as t3 join cars_data as t4 on t3.
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:53
extra pred: select t1.model from car_names as t1 join weights as t2 on t1.weight  =  t2.weight group by t1.model order by avg(t2.weight) desc limit 1;
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:54
extra pred: select model from cars_data where weight  <  (select avg(weight) from cars_data);
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:55
extra pred: select t2.maker from car_makers as t1 join cars_data as t2 on t1.make  =  t2.make intersect select t1.maker from car_makers as t1 join car_names as t2 on t1.make  =  t2.maker where t1.year
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:56
extra pred: select t2.maker from car_makers as t1 join car_names as t2 on t1.make  =  t2.makeid where t1.year  =  1970;
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:57
extra pred: select t1.maker,  t2.year from car_names as t1 join model_list as t2 on t1.maker  =  t2.maker where t2.continent  =  "EARTH" and t2.year  =  (select min(year) from model
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
neval_err_num:58
extra pred: select t1.maker,  t1.year from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.year  =  (select min(year) from model_list);
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
neval_err_num:59
hard pred: select distinct model from car_names where year  >  1980;
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
neval_err_num:60
hard pred: select distinct model from car_names where year  >  1980;
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
nhard pred: select continent,  count(*) from continents group by continent;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:61
hard pred: select t1.continent,  count(*) from continents as t1 join model_list as t2 on t1.continent  =  t2.continent group by t1.continent;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:62
extra pred: select t2.country from countries as t1 join model_list as t2 on t1.continent  =  t2.continent group by t1.continent order by count(*) desc limit 1;
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:63
extra pred: select t2.country from countries as t1 join model_list as t2 on t1.country  =  t2.continent order by count(*) desc limit 1;
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:64
medium pred: select count(*),  make,  fullname from car_names group by make;
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
neval_err_num:65
medium pred: select count(*),  t1.maker,  t2.fullname from car_makers as t1 join model_list as t2 on t1.maker  =  t2.maker where t1.country  =  'usa' group by t1.maker;
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
neval_err_num:66
medium pred: select accelerate from car_names where make  =  "amc hornet sportabout";
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
neval_err_num:67
medium pred: select t1.accelerate from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.maker  =  "amc hornet sportabout";
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
nmedium pred: select count(*) from car_makers where fullname  =  "france";
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
nmedium pred: select count(*) from car_makers where country  =  'france';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
neval_err_num:68
hard pred: select count(*) from model_list where country  =  "usa";
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:69
hard pred: select count(*) from model_list where country  =  'united states';
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:70
easy pred: select avg(mpg) from cars where cylinders  =  4;
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
neval_err_num:71
medium pred: select t1.weight from car_names as t1 join cars_data as t2 on t1.make  =  t2.make where t2.year  =  1974 group by t1.make order by min(t2.weight) desc limit 1;
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
neval_err_num:72
medium pred: select min(t1.horsepower) from cars_data as t1 join model_list as t2 on t1.model  =  t2.model where t2.maker  =  "Dodge" and t1.year  =  1974;
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
neval_err_num:73
medium pred: select maker,  model from car_makers;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
neval_err_num:74
medium pred: select maker,  model from car_makers;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
neval_err_num:75
medium pred: select countryname,  count(*) from model_list group by countryname having count(*)  >=  1;
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:76
medium pred: select t1.countryname,  t1.country from countries as t1 join model_list as t2 on t1.continent  =  t2.continent where t2.maker  >  0;
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:77
easy pred: select count(*) from cars where horsepower  >  150;
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
neval_err_num:78
easy pred: select count(*) from cars where horsepower  >  150;
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
neval_err_num:79
medium pred: select avg(t1.weight) from (select t2.year,  t1.weight from cars_data as t1 join model_list as t2 on t1.model  =  t2.model where t2.continent  =  "world" and t2.year  =
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:80
extra pred: select country from car_makers where continent  =  'Europe' group by country having count(*)  >=  3;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:81
extra pred: select t2.country from countries as t1 join model_list as t2 on t1.continent  =  t2.continent where t1.continent  =  'Europe' and count(*)  >=  3;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:82
extra pred: select max(horsepower),  maker from car_names where cylinders  =  3;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:83
extra pred: select max(t1.horsepower) from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.cylinders  =  3;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:84
hard pred: select t1.model from car_names as t1 join cars_data as t2 on t1.make  =  t2.make where t2.edispl  =  t2.mpg;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
neval_err_num:85
hard pred: select t1.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.mpg  =  max(t2.mpg);
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
neval_err_num:86
easy pred: select avg(horsepower) from cars where year  <  1980;
easy gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
neval_err_num:87
medium pred: select avg(edispl) from car_names where model  =  "volvo";
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
neval_err_num:88
medium pred: select avg(edispl) from cars_data where make  =  "volvo";
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
neval_err_num:89
medium pred: select max(accelerate) from (select t1.accelerate from cars_data as t1 join model_list as t2 on t1.model  =  t2.model where t2.number  =  4 group by t1.accelerate order by t1.acceler
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
nmedium pred: select max(accelerate) from cars_data where cylinders !=  'v6';
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
neval_err_num:90
hard pred: select t1.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.maker  =  (select max(t3.maker) from model_list as t3 join cars_data as t4 on t3.model
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
nhard pred: select model from model_list group by model order by count(*) desc limit 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neval_err_num:91
easy pred: select count(*) from cars where cylinders  >  4;
easy gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
neval_err_num:92
easy pred: select count(*) from cars where cylinders  >  4;
easy gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
neval_err_num:93
easy pred: select count(*) from car_names where year  =  1980;
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
neval_err_num:94
easy pred: select count(*) from car_names where year  =  1980;
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
nmedium pred: select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.maker where t2.country  =  "american motor company";
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
nmedium pred: select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.maker where t2.country  =  'american motor company';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
neval_err_num:95
medium pred: select t1.fullname,  t1.id from car_makers as t1 join model_list as t2 on t1.maker  =  t2.maker where t2.model count(*)  >  3;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
nmedium pred: select t1.maker,  t1.id from car_makers as t1 join model_list as t2 on t1.maker  =  t2.maker where count(*)  >  3;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:96
extra pred: select distinct model from car_names where maker  =  "general motors" intersect select distinct model from car_names where maker  =  "weight greater than 3500";
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:97
extra pred: select distinct model from car_names where maker  =  "general motors" intersect select distinct model from car_names where weight  >  3500;
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:98
easy pred: select t1.year from car_names as t1 join cars_data as t2 on t1.make  =  t2.make where t2.weight between 3000 and 4000;
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neval_err_num:99
easy pred: select distinct year from car_names where weight  <  4000 intersect select distinct year from car_names where weight  >  3000;
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neval_err_num:100
medium pred: select t1.horsepower from cars_data as t1 join model_list as t2 on t1.model  =  t2.model where t2.accelerate  =  max(t2.accelerate);
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
neval_err_num:101
medium pred: select t1.horsepower from cars_data as t1 join model_list as t2 on t1.model  =  t2.model where t2.accelerate  =  max(t1.accelerate);
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
neval_err_num:102
extra pred: select t1.cylinder from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.maker  =  'volvo' order by t1.cylinder limit 1;
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
neval_err_num:103
extra pred: select t1.cylinders from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.maker  =  "volvo" group by t1.cylinders order by count(*) desc limit 1;
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
nhard pred: select count(*) from cars_data where accelerate  > (select max(accelerate) from cars_data);
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
neval_err_num:104
hard pred: select count(*) from cars_data where accelerate  >  max(horsepower);
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
neval_err_num:105
medium pred: select count(*) from countries group by continent having count(distinct maker)  >  2;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
nmedium pred: select count(*) from countries where continent  =  "multiple";
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:106
easy pred: select count(*) from cars where cylinders  >  6;
easy gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
neval_err_num:107
extra pred: select t1.horsepower from car_names as t1 join models as t2 on t1.model  =  t2.model where t1.cylinders  =  4;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:108
extra pred: select t1.model from car_names as t1 join cars_data as t2 on t1.make  =  t2.make where t2.edispl  >  150;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:109
extra pred: select t1.make,  t1.makeid from car_names as t1 join cars_data as t2 on t1.make  =  t2.make where t2.edispl  >  3;
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
neval_err_num:110
extra pred: select t1.make,  t1.make,  t2.make from cars as t1 join model_list as t2 on t1.make  =  t2.maker where t1.hp  <  4;
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
nmedium pred: select max(mpg) from cars_data where cylinders  =  8 and year  <  1980;
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:111
medium pred: select max(mpg) from cars where cylinders  =   8 or year  <  1980;
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:112
extra pred: select model from model_list where model  <  3500 except select t1.model from model_list as t1 join cars_data as t2 on t1.make  =  t2.make intersect select model from model_list as t3 join cars_data as t4 on t3.make
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
neval_err_num:113
extra pred: select distinct model from car_names except select t1.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model where t2.maker  =  "ford" except select t3.model from car_names as t3 join model_list as
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
neval_err_num:114
hard pred: select country from countries where count(*) !=  1;
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
neval_err_num:115
hard pred: select country from countries where continent  = ''.not exists(select t1.country from countries as t1 join model_list as t2 on t1.continent  =  t2.continent where t2.maker  = ''.not exists(select t3.maker from model_
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
nextra pred: select t1.maker,  t1.fullname from car_makers as t1 join model_list as t2 on t1.maker  =  t2.maker where t2.model  >  3 group by t1.maker having count(*)  >=  2;
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
neval_err_num:116
extra pred: select t1.id,  t1.maker from car_makers as t1 join model_list as t2 on t1.maker  =  t2.maker where t1.makeid  >  3 group by t1.maker;
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:117
extra pred: select t1.country,  t2.countryname from countries as t1 join model_list as t2 on t1.continent  =  t2.continent group by t1.country where count(*)  >  3 intersect select t1.country,  t2.countryname from
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
neval_err_num:118
extra pred: select t1.continent,  t2.country from continents as t1 join model_list as t2 on t1.continent  =  t2.continent group by t1.continent having count(*)  >  3 intersect select t1.continent,  t2.country
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
neasy pred: select t2.country from airlines as t1 join airports as t2 on t1.country  =  t2.country where t1.airline  =  "jetblue airways";
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neasy pred: select t2.country from airlines as t1 join airlines as t2 on t1.airline  =  t2.airline where t1.country  =  'jetblue airways';
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neasy pred: select t2.abbreviation from airlines as t1 join airlines as t2 on t1.airline  =  t2.airline where t1.country  =  'us';
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:119
easy pred: select t2.abbreviation from airlines as t1 join airlines as t2 on t1.airline  =  t2.airline where t1.country  =  'us' intersect select t3.abbreviation from airlines as t3 join airports as t4 on t3.airportcode
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:120
medium pred: select distinct t1.airline,  t2.abbreviation from airlines as t1 join airports as t2 on t1.airportcode  =  t2.airportcode;
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:121
medium pred: select t1.airline,  t1.abbreviation from airlines as t1 join airports as t2 on t1.airportcode  =  t2.airportcode where t2.country  =  'usa';
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:122
medium pred: select t2.airportcode,  t2.airportname from airports as t1 join cities as t2 on t1.city  =  t2.city where t1.country  =  'usa' and t2.city  =  'anthony';
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
neval_err_num:123
medium pred: select t2.airportcode,  t2.airportname from airports as t1 join cities as t2 on t1.city  =  t2.city where t1.city  =  'anthony';
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
neasy pred: select t1.abbreviation from airlines as t1 join airports as t2 on t1.airline  =  t2.airportcode where t2.country  =  'usa';
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
neasy pred: select t1.abbreviation from airlines as t1 join airports as t2 on t1.airline  =  t2.airportcode where t2.country  =  'usa';
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
neval_err_num:124
medium pred: select t1.city,  t2.country from airports as t1 join airlines as t2 on t1.airportcode  =  t2.airportcode where t1.city  =  'alton' and t2.country  =  'usa';
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
neval_err_num:125
easy pred: select t2.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t1.city  =  'ako';
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
neval_err_num:126
easy pred: select t2.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport;
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
neval_err_num:127
easy pred: select t2.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t1.city  =  'aberdeen';
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
neasy pred: select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode;
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
neasy pred: select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode;
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
nmedium pred: select count(*) from flights where sourceairport  =  'aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where sourceairport  =  'aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where destairport  =  "aberdeen";
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: select count(*) from flights where destairport  =  'aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:128
hard pred: select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  'aberdeen' and t1.destination  =  'ashley';
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
nhard pred: select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t1.destairport  =  'ashley';
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
nmedium pred: select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where t2.country  =  'us' and t1.sourceairport  =  'jfk';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
nmedium pred: select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where t2.country  =  'united' and t1.sourceairport  =  'asy';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
nmedium pred: select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where t2.country  =  'united' and t1.sourceairport  =  'asy';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
nmedium pred: select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where t2.country  =  'united' and t1.sourceairport  =  'ahd';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
nmedium pred: select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where t2.country  =  'ahd' and t1.sourceairport  =  'ahd';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
nhard pred: select count(*) from airlines as t1 join flights as t2 on t1.airline  =  t2.airline where t2.destairport  =  'aberdeen';
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
nhard pred: select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.airline where t2.country  =  'united' and t1.sourceairport  =  'aberdeen';
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
nextra pred: select city from airports group by city order by count(*) desc limit 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
nextra pred: select city from airports group by city order by count(*) desc limit 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
nextra pred: select city from airports group by city order by count(*) desc limit 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
nextra pred: select city from airports group by city order by count(*) desc limit 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:129
extra pred: select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode group by t1.airportcode order by count(*) desc limit 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
neval_err_num:130
extra pred: select t2.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode group by t1.airportcode order by count(*) desc limit 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
nextra pred: select airportcode from airports order by count(*) desc limit 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:131
extra pred: select t1.abbreviation,  t2.country from airlines as t1 join flights as t2 on t1.airline  =  t2.airline group by t1.abbreviation order by count(*) desc limit 1;
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:132
extra pred: select t1.abbreviation,  t2.country from airlines as t1 join flights as t2 on t1.airline  =  t2.airportcode group by t1.abbreviation order by count(*) desc limit 1;
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:133
medium pred: select distinct t1.airline from airlines as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t2.sourceairport  =  'ahd';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:134
medium pred: select distinct t1.airline from airlines as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t2.sourceairport  =  'ahd';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:135
extra pred: select distinct t1.airline from airlines as t1 join flights as t2 on t1.airline  =  t2.airline where t2.sourceairport  =  'apg' intersect select distinct t1.airline from airlines as t1 join flights as t2 on t1.air
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:136
extra pred: select t1.airline from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport where t2.destairport  =  "apg" intersect select t1.airline from airports as t1 join flights as t2 on t1.air
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:137
extra pred: select distinct t1.airline from airlines as t1 join flights as t2 on t1.airline  =  t2.airline where t2.destairport  =  'cvo' except select t1.airline from airlines as t1 join flights as t2 on t1.airline
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:138
extra pred: select distinct t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport !=  apg and t2.destination  =  cvo;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
nmedium pred: select distinct t1.airline from airlines as t1 join flights as t2 on t1.airline  =  t2.airline group by t1.airline having count(*)  >=  10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
nmedium pred: select t1.airline from airlines as t1 join flights as t2 on t1.airline  =  t2.airline group by t1.airline having count(*)  >=  10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
neval_err_num:139
medium pred: select t1.flightno from airlines as t1 join flights as t2 on t1.airline  =  t2.airline where t2.sourceairport  =  "united airlines";
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
neval_err_num:140
medium pred: select t1.flightno from airlines as t1 join flights as t2 on t1.airline  =  t2.airline where t2.sourceairport  =  'united';
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  "apg";
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode;
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  "apg";
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neasy pred: select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.country  =  'apg';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neval_err_num:141
medium pred: select t1.flightno from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t2.sourceairport  =  "aberdeen";
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:142
medium pred: select t1.flightno from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t2.sourceairport  =  "aberdeen";
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:143
hard pred: select count(*) from flights where city  =  "aberdeen" or city  =  "abilene";
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
nhard pred: select count(*) from flights where destairport  =  'abilene' or destairport  =  'aberdeen';
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
neval_err_num:144
hard pred: select t1.airportname from airports as t1 join flights as t2 on t1.airportcode  =  t2.airportcode where t2.sourceairport is not empty and t2.destairport is not empty;
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
nhard pred: select airportname from airports where airportcode not in (select sourceairport from flights);
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
nmedium pred: select city from employee group by city having count(*)  >  1;
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
nmedium pred: select city from employee group by city having count(*)  >  1;
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
nmedium pred: select district,  count(*) from shop group by district;
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
nmedium pred: select count(*),  district from shop where location  =  'location';
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
neval_err_num:145
medium pred: select t2.manager_name,  t2.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:146
medium pred: select t2.manager_name,  t2.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:147
medium pred: select t1.name,  t1.location,  t2.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id order by t2.number_products desc;
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
nmedium pred: select t1.name,  t1.location,  t1.district from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc;
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
neval_err_num:148
hard pred: select name from shop group by name having count(*)  >  (avg(number_products) );
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
nhard pred: select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by sum(t2.bonus) desc limit 1;
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
nhard pred: select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by sum(t2.bonus) desc limit 1;
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
neval_err_num:149
hard pred: select name from employee where name not in (select name from evaluation);
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
neval_err_num:150
extra pred: select name from shop where number_products  =  (select max(number_products) from hiring);
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:151
extra pred: select t2.name from shop as t1 join hiring as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
nhard pred: select name from shop where number_products  =  0;
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
nhard pred: select name from shop where number_products  =  0;
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
neval_err_num:152
medium pred: select count(*),  t1.shop_name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.shop_id;
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
nmedium pred: select count(*),  name from shop;
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
nmedium pred: select distinct t1.document_id,  t1.document_name,  t1.document_description from documents as t1 join documents as t2 on t1.document_id  =  t2.document_id;
medium gold: SELECT document_id ,  document_name ,  document_description FROM Documents
neval_err_num:153
medium pred: select t1.document_name,  t2.document_id from documents as t1 join ref_template_types as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  "paragraph_type_letter_w";
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
nmedium pred: select document_name,  document_id from documents where document_description like '%w%';
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
neval_err_num:154
medium pred: select t1.document_id,  t2.document_name,  t3.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id join ref_template_types as t3 on t2.paragraph_id
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
neval_err_num:155
medium pred: select t1.document_id,  t2.document_name,  t3.document_description from documents as t1 join ref_template_types as t2 on t1.template_id  =  t2.template_type_code join templates as t3 on t2.template_
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
neasy pred: select count(distinct template_id) from documents where document_id in (select distinct template_id from templates);
easy gold: SELECT count(DISTINCT template_id) FROM Documents
neval_err_num:156
medium pred: select count(*) from documents where template_type_code  =  'ppt';
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
neval_err_num:157
medium pred: select count(*) from documents where template_type_code  =  'ppt';
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
nmedium pred: select t1.template_id,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_id;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
neval_err_num:158
medium pred: select distinct t1.template_id,  count(*) from documents as t1 join ref_template_types as t2 on t1.template_id  =  t2.template_id group by t2.template_id;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
neval_err_num:159
extra pred: select t1.template_id,  t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code group by t2.template_type_code order by count(*) desc limit
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neasy pred: select template_id from templates group by template_id having count(*)  >  1;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:160
easy pred: select t1.template_id from documents as t1 join ref_template_types as t2 on t1.template_id  =  t2.template_id group by t2.template_id having count(*)  >  1;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:161
hard pred: select template_id from templates where template_type_code not in (select template_type_code from documents);
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:162
hard pred: select template_id from templates where template_type_code not in (select template_type_code from documents);
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:163
medium pred: select t1.template_id,  t2.version_number,  t3.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code join documents as t3 on t
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
nmedium pred: select t1.template_id,  t1.version_number,  t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code;
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neasy pred: select distinct t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code;
easy gold: SELECT DISTINCT template_type_code FROM Templates
neasy pred: select distinct template_type_code from ref_template_types;
easy gold: SELECT DISTINCT template_type_code FROM Templates
neval_err_num:164
medium pred: select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_code  =  'pp' or t2.template_type_code  =
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
neval_err_num:165
medium pred: select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_type_code  =  'pp' or t2.template_type_code  =
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
nmedium pred: select t1.version_number,  t2.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t1.version_number  >  5;
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
nmedium pred: select template_type_code,  count(*) from ref_template_types group by template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
nmedium pred: select distinct(template_type_code),  count(*) from ref_template_types;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
nhard pred: select template_type_code from ref_template_types group by template_type_code order by count(*) desc limit 1;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
nhard pred: select t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_type_code group by t1.template_type_code order by count(*) desc limit 1;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neasy pred: select template_type_code from ref_template_types group by template_type_code having count(*)  <  3;
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neasy pred: select template_type_code from ref_template_types where template_type_code  <  (select count(*) from templates);
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
nmedium pred: select min(version_number),  t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code;
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
nmedium pred: select min(version_number),  t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id;
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
neval_err_num:166
medium pred: select t1.template_type_code from ref_template_types as t1 join documents as t2 on t1.template_type_code  =  t2.template_id join paragraphs as t3 on t2.paragraph_id  =  t3.paragraph_id where t3.document_
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
neval_err_num:167
medium pred: select document_name from documents where template_type_code  =  'bk';
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
neval_err_num:168
medium pred: select document_name from documents where template_type_code  =  'bk';
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
nmedium pred: select template_type_code,  count(*) from templates group by template_type_code;
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:169
medium pred: select distinct(template_type_code),  count(*) from documents group by template_type_code;
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:170
extra pred: select template_type_code from documents group by template_type_code order by count(*) desc limit 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.template_type_code from ref_template_types as t1 join documents as t2 on t1.template_type_code  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
nhard pred: select template_type_code from ref_template_types except select t1.template_type_code from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code;
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:171
hard pred: select t1.template_type_code from ref_template_types as t1 join documents as t2 on t1.template_type_code  =  t2.template_id where t2.document_id is null;
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
nmedium pred: select t1.template_type_code,  t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id;
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
nmedium pred: select t1.template_type_code,  t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id;
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neasy pred: select t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id where t2.template_type_code  =  "ad";
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
neasy pred: select t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id;
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
neval_err_num:172
easy pred: select t1.template_type_code from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id where t2.template_description  =  "book";
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
neval_err_num:173
medium pred: select distinct t1.template_type_description from templates as t1 join documents as t2 on t1.template_id  =  t2.document_id where t2.document_id in (select distinct document_id from documents);
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
neval_err_num:174
medium pred: select distinct t1.document_description from documents as t1 join ref_template_types as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  "document";
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
neval_err_num:175
medium pred: select t1.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  =  t2.template_id where t2.template_type_description  =  "presentation";
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
neval_err_num:176
medium pred: select t1.template_id from templates as t1 join ref_template_types as t2 on t1.template_type_code  =  t2.template_type_code where t2.template_description  =  'presentation';
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
neval_err_num:177
medium pred: select t1.paragraph_id,  t1.paragraph_text from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t1.document_name  =  'welcome to ny';
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:178
medium pred: select paragraph_id,  paragraph_text from documents where document_name  =  'welcome to ny';
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:179
medium pred: select paragraph_text from documents where document_name  =  "customer reviews";
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:180
medium pred: select paragraph_text from documents where document_name  =  'customer reviews';
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
nmedium pred: select document_id,  count(*) from documents group by document_id;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
nmedium pred: select distinct document_id,  count(*) from documents group by document_id;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neasy pred: select distinct document_id from documents group by document_id having count(*)  >=  2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neasy pred: select document_id from documents group by document_id having count(*)  >=  2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
nextra pred: select document_id,  document_name from documents order by count(*) desc limit 1;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
nhard pred: select document_id from documents group by document_id order by count(*) desc limit 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
nhard pred: select document_id from documents order by other_details desc limit 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neasy pred: select document_id from documents where document_id  >=  1 intersect select document_id from documents where document_id  <=  2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:181
easy pred: select document_id from documents where document_id in (1,2);
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:182
hard pred: select t1.document_id from documents as t1 join paragraphs as t2 on t1.document_id  =  t2.document_id where t2.paragraph_text  =  "brazil" intersect select t1.document_id from documents as t1 join paragraphs as t2 on t1
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
nhard pred: select document_id from documents where document_description like '%brazil%' intersect select document_id from documents where document_description like '%ireland%';
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
neval_err_num:183
medium pred: select t2.age,  t2.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id;
medium gold: SELECT Age ,  Hometown FROM teacher
neval_err_num:184
medium pred: select t2.age,  t2.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id;
medium gold: SELECT Age ,  Hometown FROM teacher
nmedium pred: select hometown from teacher where age  = (select min(age) from teacher);
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:185
medium pred: select t2.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id order by t1.age desc limit 1;
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:186
medium pred: select count(*) from teacher where hometown in  (select hometown from course_arrange group by hometown);
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:187
easy pred: select t2.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id group by t1.teacher_id having count(*)  >=  2;
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:188
easy pred: select t2.hometown from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id group by t1.teacher_id having count(*)  >=  2;
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:189
medium pred: select t2.name,  t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id;
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:190
medium pred: select t2.name,  t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id;
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:191
hard pred: select t2.name,  t1.course from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id;
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
neval_err_num:192
hard pred: select t2.name,  t1.name from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id;
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
neval_err_num:193
hard pred: select t2.name from course as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id where t1.course_name  = 'math';
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:194
hard pred: select name from teacher where subject  = 'math';
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:195
medium pred: select t2.name,  count(*) from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id group by t1.name;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:196
medium pred: select t2.name,  count(*) from teacher as t1 join course_arrange as t2 on t1.teacher_id  =  t2.teacher_id group by t1.name;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
nmedium pred: select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t1.teacher_id having count(*)  >=  2;
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
nmedium pred: select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t1.teacher_id having count(*)  >=  2;
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:197
medium pred: select t2.name from visit as t1 join visitor as t2 on t1.visitor_id  =  t2.id group by t1.id order by t1.level;
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
neasy pred: select avg(age) from visitor where level_of_membership !=  4;
easy gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
nmedium pred: select t2.name,  t2.level_of_membership from visit as t1 join visitor as t2 on t1.visitor_id  =  t2.id group by t2.level_of_membership order by t2.age asc;
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
nmedium pred: select t1.museum_id,  t1.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id group by t1.museum_id order by count(*) desc limit 1;
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
nmedium pred: select open_year,  count(*) from museum where name  =  "plaza museum";
medium gold: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
nhard pred: select name from museum where num_of_staff  >  (select min(num_of_staff) from museum);
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
neval_err_num:198
medium pred: select t1.id,  t1.name,  t1.age from visit as t1 join museum as t2 on t1.museum_id  =  t2.museum_id group by t1.id having count(*)  >  1;
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
neval_err_num:199
extra pred: select t1.id,  t1.name,  t1.level_of_membership from visit as t1 join museum as t2 on t1.museum_id  =  t2.museum_id group by t1.id order by sum(t2.total_sp
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
neval_err_num:200
extra pred: select t1.museum_id,  t1.name from visit as t1 join museum as t2 on t1.museum_id  =  t2.museum_id group by t2.museum_id order by count(*) desc limit 1;
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:201
hard pred: select t1.name,  t1.age from visit as t1 join visitor as t2 on t1.visitor_id  =  t2.id group by t1.visitor_id order by count(*) desc limit 1;
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
nmedium pred: select avg(total_spent),  max(total_spent) from visit;
medium gold: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
neval_err_num:202
medium pred: select sum(total_spent) from visit where level_of_membership  =  1;
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
neval_err_num:203
extra pred: select t2.name from visit as t1 join museum as t2 on t1.museum_id  =  t2.museum_id where t1.open_year  <  2009 intersect select t2.name from visit as t1 join museum as t2 on t1.museum
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
neval_err_num:204
extra pred: select count(*) from visitor where level_of_membership !=  1 and open_year  <  2010;
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
nmedium pred: select avg(loser_age) from matches union select avg(winner_age) from matches;
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches
neval_err_num:205
easy pred: select avg(t1.player_rank_points) from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id where t1.loser_id  =  'winner';
easy gold: SELECT avg(winner_rank) FROM matches
neval_err_num:206
easy pred: select avg(t1.player_rank_points) from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id where t1.winner_rank  =  "winner";
easy gold: SELECT avg(winner_rank) FROM matches
neasy pred: select max(loser_rank) from matches group by loser_id;
easy gold: SELECT min(loser_rank) FROM matches
neasy pred: select winner_rank from matches group by winner_id order by sum(loser_rank_points) desc limit 1;
easy gold: SELECT min(loser_rank) FROM matches
neasy pred: select count(distinct winner_name) from matches;
easy gold: SELECT count(DISTINCT loser_name) FROM matches
neasy pred: select count(distinct winner_name) from matches;
easy gold: SELECT count(DISTINCT loser_name) FROM matches
neval_err_num:207
easy pred: select t1.tourney_name from matches as t1 join tournaments as t2 on t1.tourney_id  =  t2.tourney_id group by t2.tourney_id having count(*)  >  10;
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:208
easy pred: select t1.tourney_name from matches as t1 join rankings as t2 on t1.tourney_id  =  t2.tourney_id group by t2.tourney_name having count(*)  >  10;
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
nhard pred: select t1.winner_name from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id where t1.year  =  2013 intersect select t2.first_name,  t2.last_name from players as t2 join matches
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:209
hard pred: select t1.first_name,  t1.last_name from players as t1 join matches as t2 on t1.player_id  =  t2.player_id where t2.year  =  2013 intersect select t1.first_name,  t1.last
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:210
extra pred: select t1.country_code,  t1.first_name from matches as t1 join players as t2 on t1.player_id  =  t2.player_id where t1.loser_id  =  0 and t1.winner_id  =  1;
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
neval_err_num:211
extra pred: select t1.first_name,  t1.country_code from players as t1 join matches as t2 on t1.player_id  =  t2.player_id group by t1.player_id having count(*)  =  2;
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
nmedium pred: select first_name,  country_code from players order by birth_date desc limit 1;
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:212
medium pred: select first_name,  country_code from players order by winner_id desc limit 1;
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
nmedium pred: select first_name,  last_name from players where hand  =  "left";
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
nmedium pred: select first_name,  last_name from players order by birth_date;
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
neval_err_num:213
hard pred: select t1.first_name,  t1.country_code from players as t1 join matches as t2 on t1.player_id  =  t2.player_id group by t1.player_id order by count(*) desc limit 1;
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
neval_err_num:214
hard pred: select first_name,  country_code from players order by tourney_num desc limit 1;
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
nhard pred: select winner_name,  winner_rank_points from matches group by winner_id order by winner_rank_points desc limit 1;
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:215
hard pred: select t2.winner_name,  sum(t1.rank_points) from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id group by t2.player_id order by sum(t1.rank_points) desc limit 1
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:216
hard pred: select winner_name from matches where winner_rank  =  max(winner_rank_points) and tournament_name  =  "australian_open";
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:217
hard pred: select t2.winner_name from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id join rankings as t3 on t1.loser_id  =  t3.player_id where t3.tournament_name  =  "
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:218
medium pred: select t1.loser_name,  t2.winner_name from matches as t1 join players as t2 on t1.loser_id  =  t2.player_id order by t1.minutes desc limit 1;
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:219
medium pred: select t1.winner_name,  t2.loser_name from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id order by t1.match_num limit 1;
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:220
medium pred: select avg(t1.ranking),  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id where t1.first_name  =  'player1' group by t1.first_name;
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
nmedium pred: select t1.first_name,  avg(t2.ranking) from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.player_id;
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:221
medium pred: select t1.ranking,  t2.ranking_points from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id where t1.first_name  =  'player1' group by t1.first_name;
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
nmedium pred: select t1.first_name,  sum(t2.ranking_points) from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.player_id;
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
nmedium pred: select sum(tours) from rankings group by ranking_date;
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
nmedium pred: select sum(tours) from rankings group by ranking;
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
nmedium pred: select winner_name,  winner_rank from matches where winner_age  <  25 order by winner_id;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
neval_err_num:222
medium pred: select t1.winner_name,  t1.winner_rank from matches as t1 join players as t2 on t1.winner_id  =  t2.player_id join rankings as t3 on t2.player_id  =  t3.player_id where t3.ranking
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
nmedium pred: select count(distinct winner_id) from matches where winner_hand  =  'left' intersect select count(distinct winner_id) from matches where winner_hand  =  'wta';
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
nmedium pred: select count(*) from matches where winner_hand  =  'left';
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:223
hard pred: select t1.first_name,  t1.country_code,  t1.birth_date from winners as t1 join matches as t2 on t1.player_id  =  t2.player_id group by t1.player_id order by t1.rank_points desc
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:224
hard pred: select t1.first_name,  t1.country_code,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.player_id group by t1.player_id order by sum(t2.winner_
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:225
medium pred: select count(*),  t1.player_id from players as t1 join matches as t2 on t1.player_id  =  t2.player_id group by t1.player_id;
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
neval_err_num:226
medium pred: select count(distinct hand),  t1.player_id from players as t1 join matches as t2 on t1.player_id  =  t2.player_id group by t1.player_id;
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
nmedium pred: select name,  tonnage from ship order by tonnage desc;
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC
nmedium pred: select name,  date,  result from battle;
medium gold: SELECT name ,  date FROM battle
neval_err_num:227
medium pred: select max(t1.killed),  min(t2.killed) from death as t1 join battle as t2 on t1.id  =  t2.id group by t1.id;
medium gold: SELECT max(killed) ,  min(killed) FROM death
neval_err_num:228
medium pred: select t1.note,  t2.injured from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id where t2.tonnage  =  't';
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
neval_err_num:229
medium pred: select distinct id,  name from battle where ship_type  =  "brig";
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
nhard pred: select t1.id,  t1.name from battle as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id group by t1.id having count(*)  >  10;
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
nextra pred: select t1.id,  t1.name from ship as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id group by t1.id order by sum(t2.injured) desc limit 1;
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
neval_err_num:230
medium pred: select distinct name from battle where bulgarian_commander  >=   kaloyan and latin_commander  <=  baldwin i;
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
neasy pred: select count(*) from battle;
easy gold: SELECT count(DISTINCT RESULT) FROM battle
nextra pred: select count(*) from battle where id not in (select id from death where caused_by_ship_id  =  225);
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
neval_err_num:231
extra pred: select t1.name,  t1.date from battle as t1 join death as t2 on t1.id  =  t2.caused_by_ship_id where t2.name  =  'lettice' intersect select t1.name,  t1.date from battle
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
nextra pred: select name,  result from battle where id not in (select id from ship where location  =  'english channel');
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
nmedium pred: select note from death where caused_by_ship_id  =  "east";
medium gold: SELECT note FROM death WHERE note LIKE '%East%'
nmedium pred: select address_id from addresses where line_1  =  "line 1" intersect select address_id from addresses where line_2  =  "line 1";
medium gold: SELECT line_1 ,  line_2 FROM addresses
neval_err_num:232
easy pred: select t1.course_name from degree_programs as t1 join courses as t2 on t1.degree_program_id  =  t2.degree_program_id where t2.course_name  =  "math";
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:233
easy pred: select t2.zip_postcode from addresses as t1 join cities as t2 on t1.city  =  t2.city where t1.city  =  'port chelsea';
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
neval_err_num:234
easy pred: select zip_postcode from cities where name  =  "port chelsea";
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
nextra pred: select department_name,  department_id from departments order by count(*) desc limit 1;
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
nextra pred: select department_name,  department_id from departments order by count(*) desc limit 1;
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
neasy pred: select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id group by t1.department_id;
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
neval_err_num:235
easy pred: select count(distinct degree_program_name) from degree_programs;
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
neasy pred: select count(*) from degree_programs;
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
neval_err_num:236
medium pred: select count(*) from degree_programs where department_name  =  "engineering";
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
neval_err_num:237
medium pred: select course_name,  course_id from courses where number_of_sections  <=  2;
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
neval_err_num:238
medium pred: select t1.course_name,  t1.course_id from courses as t1 join student_enrolment as t2 on t1.course_id  =  t2.course_id where t2.section_count  <  2;
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
neval_err_num:239
easy pred: select section_name from sections order by reverse(section_name);
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC
neval_err_num:240
easy pred: select section_name from sections reversed order;
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC
neval_err_num:241
extra pred: select t2.semester_name,  t2.semester_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t2.semester_id order by count(*) desc limit 1;
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:242
extra pred: select t2.semester_name,  t2.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:243
medium pred: select t2.department_description from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name like "%computer%";
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
neval_err_num:244
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.first_name,  t1
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
nmedium pred: select t1.first_name,  t1.last_name,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.semester_id  =  2
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:245
hard pred: select t1.first_name,  t1.middle_name,  t1.last_name from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id  =  t2.degree_program_id;
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:246
hard pred: select first_name,  middle_name,  last_name from students where current_address_id  =  addresses.address_id and degree_program_id  =  4;
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:247
extra pred: select t1.degree_program_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_name order by count(*) desc limit 1;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
nextra pred: select degree_summary_name from degree_programs group by degree_summary_name order by count(*) desc limit 1;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:248
extra pred: select t1.program_id,  t1.program_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.program_id order by count(*) desc limit
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:249
extra pred: select t2.degree_program_id,  t2.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:250
extra pred: select t1.student_id,  t1.first_name,  t1.middle_name,  t1.last_name,  count(*) from student_enrolment as t1 join degree_programs as t2 on t1.degree_program_id  =
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:251
extra pred: select t1.first_name,  t1.last_name,  t1.first_name,  t1.last_name,  count(*) from students as t1 join degree_programs as t2 on t1.degree_program_id  =  t2.degree
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:252
hard pred: select semesters from students group by semesters order by semesters asc;
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:253
hard pred: select semester_name from semesters where semester_id not in (select semester_id from students);
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:254
easy pred: select course_name from student_enrolment where student_enrolment_id  =  student_enrolment_courses.student_enrolment_id;
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
neval_err_num:255
easy pred: select course_name from courses where student_enrolment_id in (select student_enrolment_id from student_enrolment);
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
neval_err_num:256
extra pred: select course_name from student_enrolment group by course_id order by count(*) desc limit 1;
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:257
extra pred: select course_name from student_enrolment group by course_id order by count(*) desc limit 1;
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:258
extra pred: select t2.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t1.current_address_state  =  "north carolina" and t1.current_address_city !=  "ch
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:259
extra pred: select t2.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t1.current_address_state  =  "north" and t1.current_address_city  =  "charlotte
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
nmedium pred: select transcript_date,  transcript_id from transcripts where transcript_date  >= (select max(transcript_date) from transcripts);
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
nmedium pred: select transcript_date,  transcript_id from transcripts where transcript_date  >= (select max(transcript_date) from transcripts group by transcript_date having count(*)  >  2);
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
neval_err_num:260
medium pred: select t2.cell_mobile_number from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t1.first_name  =  "timothy" and t1.last_name  =  "ward";
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
neval_err_num:261
medium pred: select t2.cell_mobile_number from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t1.first_name  =  "timothy" and t1.last_name  =  "ward";
medium gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
neval_err_num:262
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.first_name,  t1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:263
medium pred: select t1.first_name,  t1.last_name,  t1.first_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by t1.
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:264
medium pred: select t1.first_name,  t1.middle_name,  t1.last_name from graduates as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:265
medium pred: select t1.first_name,  t1.last_name,  t1.first_name,  t1.last_name from graduates as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t2.
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:266
easy pred: select t1.first_name from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.student_enrolment_id join students as t3 on t2.student_id  =  t3.student_id where t3.current_
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
neval_err_num:267
easy pred: select t1.first_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t1.permanent_address_id !=  t2.permanent_address_id;
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
nextra pred: select t1.address_id,  count(*) from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.student_enrolment_id group by t1.address_id order by count(*) desc limit 1;
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:268
extra pred: select t1.address_id,  t1.line_1,  t1.line_2 from addresses as t1 join student_enrolment as t2 on t1.address_id  =  t2.address_id group by t1.address_id order by count(*) desc
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:269
easy pred: select avg(transcript_date) from transcript_contents;
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:270
medium pred: select date_left from transcripts where transcript_date  =  (select min(transcript_date) from transcripts);
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
nmedium pred: select t1.transcript_date from transcripts as t1 join student_enrolment_courses as t2 on t1.transcript_id  =  t2.student_course_id;
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:271
easy pred: select count(*) from transcripts as t1 join student_enrolment as t2 on t1.student_enrolment_id  =  t2.student_enrolment_id;
easy gold: SELECT count(*) FROM Transcripts
neval_err_num:272
medium pred: select max(transcript_date) from transcripts as t1 join student_enrolment as t2 on t1.student_enrolment_id  =  t2.student_enrolment_id;
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:273
medium pred: select date_left from transcripts where transcript_date  =  (select max(t1.transcript_date) from transcripts as t1 join student_enrolment as t2 on t1.student_enrolment_id  =  t2.student_id join degree_programs as t3 on
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:274
hard pred: select count(*) from transcripts as t1 join student_enrolment as t2 on t1.student_enrolment_id  =  t2.student_enrolment_id group by t1.student_enrolment_id;
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:275
hard pred: select t1.transcript_id,  t2.transcript_id from transcripts as t1 join student_enrolment as t2 on t1.transcript_id  =  t2.student_course_id group by t1.transcript_id having count(*)  >=  2
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:276
extra pred: select transcript_date from transcript_contents order by transcript_date desc limit 1;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
nextra pred: select transcript_date,  transcript_id from transcripts order by transcript_date desc limit 1;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:277
extra pred: select t2.semester_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id where t1.major_code  =  'bachelor' intersect select t2.semester_id from students as t1 join student
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:278
extra pred: select semester_id from student_enrolment where student_enrolment_id  = (select semester_id from student_enrolment where student_enrolment_id  =  1) intersect select semester_id from student_enrolment where student_enrolment_id  =
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neasy pred: select count(distinct address_id) from addresses;
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neasy pred: select distinct address_id from addresses where city  =  "new york";
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neval_err_num:279
easy pred: select t1.student_first_name,  t1.student_last_name,  t1.student_middle_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id order by t2.student_
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:280
easy pred: select distinct t2.first_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id order by t1.first_name;
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:281
easy pred: select section_name from sections as h join semesters as t on h.section_id  =  t.section_id where t.semester_name  =  'h';
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neasy pred: select section_name from sections where section_name  =  "h";
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neval_err_num:282
hard pred: select first_name from students where permanent_address_id  =  09700166582 or cell_phone_number  =  '09700166582';
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neval_err_num:283
hard pred: select first_name from students where permanent_address_id  =  09700166582 or cell_phone_number  =  '09700166582';
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neasy pred: select title from cartoon;
easy gold: SELECT Title FROM Cartoon ORDER BY title
neval_err_num:284
easy pred: select t1.title from cartoon as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.directed_by  =  "ben jones";
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
neval_err_num:285
easy pred: select t1.title from cartoon as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.directed_by  =  'ben jones';
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
neval_err_num:286
easy pred: select count(*) from cartoon as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.directed_by  =  "joseph kuhr";
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
neval_err_num:287
easy pred: select count(*) from cartoon as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.directed_by  =  'joseph kuhr';
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
neval_err_num:288
medium pred: select t1.title,  t2.directed_by,  t3.written_by from cartoon as t1 join tv_series as t2 on t1.id  =  t2.id join tv_channel as t3 on t2.channel  =  t3.id order by
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
neval_err_num:289
medium pred: select t1.title from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id where t2.directed_by  =  "ben jones" or t2.directed_by  =  "brandon vietti";
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:290
medium pred: select t1.title from cartoon as t1 join tv_channel as t2 on t1.channel  =  t2.id where t2.directed_by  =  'ben jones' intersect select t1.title from cartoon as t1 join tv_channel as t2 on t1.channel
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:291
hard pred: select t2.country,  count(*) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t1.country order by count(*) desc limit 1;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
nmedium pred: select count(distinct series_name),  sum(t1.content) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t1.series_name;
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:292
medium pred: select count(distinct series),  count(distinct content) from tv_channel;
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:293
easy pred: select t2.content from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t1.series_name  =  "sky radio";
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:294
easy pred: select content from tv_series where series_name  = 'sky radio';
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:295
easy pred: select package_option from tv_series where series_name  =  "sky radio";
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
nhard pred: select language,  count(*) from tv_channel group by language order by count(*) desc limit 1;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:296
hard pred: select t2.language from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t2.language order by count(*) desc limit 1;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:297
medium pred: select t2.country,  count(*) from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t1.country;
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:298
medium pred: select series_name from tv_series where title  =  "the rise of the blue beetle!";
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
nmedium pred: select t2.series_name from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.id where t1.channel  =  "the rise of the blue beetle";
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
neval_err_num:299
medium pred: select t1.title from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.channel where t2.series_name  =  "sky radio";
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:300
medium pred: select t1.title from tv_series as t1 join cartoon as t2 on t1.id  =  t2.channel where t2.series_name  =  "sky radio";
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:301
easy pred: select ep from tv_series order by rating;
easy gold: SELECT Episode FROM TV_series ORDER BY rating
nmedium pred: select t1.episode,  t1.rating from tv_series as t1 join tv_channel as t2 on t1.channel  =  t2.id group by t1.episode order by t1.rating desc limit 3;
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
nmedium pred: select t1.episode,  t2.rating from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id group by t1.episode order by count(*) desc limit 3;
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
neval_err_num:302
easy pred: select t2.air_date from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.title  =  "a love of a lifetime" and t2.air_date  =  "2021-01-01";
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:303
easy pred: select t2.air_date from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.id where t1.title  =  "a love of a lifetime";
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:304
easy pred: select t2.weekly_rank from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.air_date  =  '2021-01-01' and t1.title  =  "a love of a lifetime";
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
neasy pred: select t2.weekly_rank from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.air_date  =  '2021-01-01' and t2.episode  =  "a love of a lifetime";
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:305
medium pred: select t2.series_name from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.channel where t1.episode  =  "a love of a lifetime";
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:306
medium pred: select t2.series_name from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.air_date  =  '2021-01-01';
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:307
medium pred: select ep from tv_series where series_name  =  "sky radio";
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:308
medium pred: select ep from tv_series as t1 join tv_series as t2 on t1.id  =  t2.id where t1.series_name  =  "sky radio";
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:309
medium pred: select count(*),  director from cartoon group by director;
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
neval_err_num:310
medium pred: select t1.production_code,  t2.channel from tv_series as t1 join cartoon as t2 on t1.id  =  t2.channel group by t1.id order by t1.air_date desc limit 1;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
neval_err_num:311
medium pred: select t1.package_option,  t2.series_name from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.high_definition_tv;
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:312
medium pred: select package_option,  t1.title from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.high_definition_tv;
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:313
medium pred: select t2.country from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel where t1.written_by  =  'todd casey';
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:314
medium pred: select country from cartoon where written_by  =  'todd casey';
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:315
hard pred: select country from tv_channel where series_name  =  "todd casey" except select t1.series_name from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.channel where t2.written_by  =  "todd casey
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
nhard pred: select country from tv_channel where series_name !=  "todd casey cartoon";
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:316
extra pred: select t2.series_name,  t1.country from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.channel where t1.director_by  =  'ben jones' intersect select t2.series_name,  t1
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:317
extra pred: select t1.series_name,  t2.country from tv_series as t1 join tv_channel as t2 on t1.id  =  t2.channel where directed_by  =  'ben jones' intersect select t1.series_name,  t2.country from
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:318
medium pred: select t1.pixel_aspect_ratio_par,  t2.country from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.language !=  'english';
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neval_err_num:319
medium pred: select t1.pixel_aspect_ratio_par,  t2.country from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.language !=  'english';
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neasy pred: select t1.id from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t1.id having count(*)  >  2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neasy pred: select t1.id from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel group by t1.id having count(*)  >  2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neval_err_num:320
hard pred: select t1.id from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where directed_by !=  'ben jones';
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
nhard pred: select t1.id from tv_channel as t1 join cartoon as t2 on t1.id  =  t2.channel where t2.directed_by  =  'ben jones';
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
neval_err_num:321
hard pred: select t2.package_option from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t1.directed_by  =  'ben jones';
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neval_err_num:322
hard pred: select t1.package_option from tv_channel as t1 join tv_series as t2 on t1.id  =  t2.channel where t2.directed_by !=  'ben jones';
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neasy pred: select count(*) from people;
easy gold: SELECT count(*) FROM poker_player
neasy pred: select count(*) from people;
easy gold: SELECT count(*) FROM poker_player
neval_err_num:323
medium pred: select t1.final_table_made,  t2.best_finish from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id;
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neval_err_num:324
medium pred: select t2.money_rank from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc limit 1;
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
nmedium pred: select max(money_rank) from poker_player;
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
neval_err_num:325
easy pred: select name from poker_player;
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
neval_err_num:326
easy pred: select name from poker_player;
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
neval_err_num:327
medium pred: select name from poker_player where earnings  >  300000;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:328
medium pred: select name from poker_player where earnings  >  300000;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:329
medium pred: select name from poker_player order by final_table_made asc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:330
medium pred: select name from poker_player order by best_finish desc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:331
hard pred: select t2.birth_date from poker_player as t1 join people as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc limit 1;
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
nhard pred: select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc limit 1;
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
neval_err_num:332
hard pred: select best_finish from poker_player order by height desc limit 1;
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:333
hard pred: select max(money_rank) from poker_player group by height order by money_rank desc;
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:334
medium pred: select avg(earnings) from poker_player where height  >  200;
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
neval_err_num:335
medium pred: select avg(earnings) from people where height  >  200;
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
neval_err_num:336
medium pred: select name from poker_player order by earnings desc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
neval_err_num:337
medium pred: select name from poker_player order by earnings desc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
nhard pred: select name from people where nationality !=  'poker_player';
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
neval_err_num:338
medium pred: select contestant_number,  contant_name from contestants order by contestant_number desc;
medium gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
neval_err_num:339
medium pred: select t1.vote_id,  t2.phone_number,  t3.state from votes as t1 join contestants as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t1.state
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes
neval_err_num:340
easy pred: select t2.created from votes as t1 join area_code_state as t2 on t1.state  =  t2.state where t1.contestant_number  =  1;
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'
neval_err_num:341
easy pred: select t2.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name!= 'jessie alloway';
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
nmedium pred: select distinct state,  min(created) from votes group by state;
medium gold: SELECT DISTINCT state ,  created FROM votes
nextra pred: select t1.contestant_number,  t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) desc limit 1
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
nextra pred: select count(*) from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t2.vote_id !=  0;
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
neval_err_num:342
extra pred: select area_code from contestants group by area_code order by count(*) desc limit 1;
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:343
medium pred: select t1.create_date,  t1.state,  t2.phone_number from votes as t1 join contestants as t2 on t1.contestant_number  =  t2.contestant_number where t2.contestant_name  =  'tabatha
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
neval_err_num:344
extra pred: select distinct t1.area_code from area_code_state as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t2.contestant_number  =  'tabatha gehling' intersect select distinct t1.area
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
neval_err_num:345
medium pred: select t2.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name like '%al%';
medium gold: select contestant_name from contestants where contestant_name like "%al%"
neval_err_num:346
easy pred: select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.is_independent  =  'true' and t1.continent !=  'america' and t1.continent !=  'euro
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950
neval_err_num:347
easy pred: select name from country where continent !=  'america' and year  >  1950;
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950
neasy pred: select sum(surfacearea) from country where continent  =  "the americas" and region  =  "the caribbean";
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neasy pred: select sum(surfacearea) from country where continent  =  "america";
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neasy pred: select continent from country where continent  =  "anguilla";
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
neasy pred: select continent from country where continent  =  "anguilla";
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
neval_err_num:348
medium pred: select t1.region from city as t1 join country as t2 on t1.countrycode  =  t2.code where t1.name  =  "kabul";
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
nmedium pred: select t1.name from city as t1 join country as t2 on t1.countrycode  =  t2.code where t2.name  =  "kabul";
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
nextra pred: select isofficial from countrylanguage where countrycode  =  "aruba";
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
nextra pred: select isofficial from countrylanguage where countrycode  =  "aruba";
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
nmedium pred: select t1.population,  t2.lifeexpectancy from city as t1 join country as t2 on t1.countrycode  =  t2.code where t1.name  =  "brazil";
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
nmedium pred: select t1.population,  t2.lifeexpectancy from city as t1 join country as t2 on t1.countrycode  =  t2.code where t1.name  =  "Brazil";
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
neval_err_num:349
medium pred: select region,  population from city where countrycode  =  "angola";
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
neval_err_num:350
medium pred: select t3.region,  t3.population from city as t1 join country as t2 on t1.countrycode  =  t2.code join countrylanguage as t3 on t2.code  =  t3.countrycode where t1.name  =  'angola' and t
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
neasy pred: select avg(lifeexpectancy) from country where continent  =  "central africa";
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
neasy pred: select avg(lifeexpectancy) from country where continent  =  "central africa";
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
nhard pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  <  0.05 order by t2.percentage limit 1;
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
neval_err_num:351
hard pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  < (select avg(percentage) from countrylanguage where continent  =  "asia");
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
nmedium pred: select sum(surfacearea) from country where continent  =  "asia" intersect select sum(surfacearea) from country where continent  =  "europe";
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
nmedium pred: select sum(surfacearea) from country where continent  =  'asia' intersect select sum(surfacearea) from country where continent  =  'europe';
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neasy pred: select count(*) from city where district  =  "gelderland";
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
neval_err_num:352
medium pred: select avg(gross domestic product),  sum(population) from country where governmentform  =  'us territory';
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:353
medium pred: select avg(gross_national_product),  sum(population) from country where continent  =  'us';
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:354
easy pred: select count(distinct language) from sqlite_sequence;
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
neasy pred: select count(*) from country where continent  =  "africa";
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
nmedium pred: select sum(t1.isofficial) from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code where t2.name  =  "aruba";
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: select count(*) from countrylanguage where countrycode  =  "aruba";
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: select count(*) from countrylanguage where isofficial  =  "afghanistan";
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
neval_err_num:355
medium pred: select count(*) from countrylanguage where code  =  "afghanistan";
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.code order by count(*) desc limit 1;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.code order by sum(t2.percentage) desc limit 1;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:356
extra pred: select continent from countrylanguage group by continent order by count(*) desc limit 1;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:357
extra pred: select continent from countrylanguage group by continent order by count(*) desc limit 1;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:358
easy pred: select count(distinct t1.countrycode) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' intersect select count(distinct t1.countrycode) from countrylanguage as t2 join country as
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:359
easy pred: select count(*) from country where language  =  "english" intersect select count(*) from country where language  =  "dutch";
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:360
extra pred: select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' intersect select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code  =
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:361
extra pred: select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  'english' intersect select distinct t1.name from country as t1 join countrylanguage as t2 on t1.code  =
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:362
extra pred: select distinct t1.name from country as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.isofficial  =  'english' intersect select distinct t1.name from countrylanguage as t2 join country as t1 on t2.countrycode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:363
extra pred: select name from country where isofficial  =  'english' intersect select name from country where isofficial  =  'french';
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:364
medium pred: select count(distinct continent) from country where language  =  "chinese";
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:365
medium pred: select count(*) from country where continent  =  "china" and language  =  "chinese";
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:366
hard pred: select region from country where language  =  "english" intersect select region from country where language  =  "dutch";
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:367
hard pred: select region,  case when language  =  "dutch" then "dutch" else "english" end as language from countrylanguage where code  =  "dutch" intersect select region,  case when language  =  "english" then "english" else "d
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:368
extra pred: select country from countrylanguage group by countrycode having count(*)  >=  2;
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
neval_err_num:369
extra pred: select country from countrylanguage where isofficial  =  'english' or isofficial  =  'dutch';
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
nextra pred: select isofficial from countrylanguage group by isofficial order by count(*) desc limit 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
nextra pred: select isofficial from countrylanguage group by isofficial order by count(*) desc limit 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
neval_err_num:370
hard pred: select t1.language from country as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.governmentform  = 'republic';
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:371
hard pred: select language from country where governmentform  =  'Republic';
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
nextra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  'english' order by t2.percentage desc limit 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
neval_err_num:372
hard pred: select t1.name,  t1.population,  t2.expectedlife from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  "asia" order by t2.surfacearea desc limit 1;
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:373
extra pred: select avg(lifeexpectancy) from country where language !=  "en";
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
nextra pred: select avg(lifeexpectancy) from country where governmentform !=  'english';
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
nextra pred: select sum(district) from city where countrycode!= "en";
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:374
extra pred: select count(*) from country where continent !=  'america' and language !=  'english';
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:375
medium pred: select isofficial from countrylanguage where headofstate  =  "beatrix";
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:376
medium pred: select isofficial from countrylanguage where headofstate  =  "beatrix";
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:377
medium pred: select sum(t2.percentage) from countrylanguage as t1 join sqlite_sequence as t2 on t1.code  =  t2.name where t1.seq  <  1930;
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:378
medium pred: select sum(distinct isofficial) from countrylanguage where headofstate  = 'soviet';
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:379
hard pred: select t1.countrycode from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  >  sum(t1.surfacearea) group by t1.countrycode;
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
neval_err_num:380
hard pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  >  sum(t2.percentage) over (select avg(percentage) from countrylanguage);
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  <  0.5 order by t1.name;
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  <  0.5 order by t1.population desc limit 1;
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
nextra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.percentage  >  0.5 group by t1.name having count(*)  >=  1;
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
nextra pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  >  0.001 order by t1.name;
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
neval_err_num:381
hard pred: select countrycode from country where isofficial !=  'english';
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:382
hard pred: select countrycode from country where language !=  'english';
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:383
easy pred: select t1.countrycode from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language !=  'english';
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neval_err_num:384
hard pred: select t1.code from country as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.percentage  <  0.5 group by t1.code having count(*)  =  0;
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:385
hard pred: select t1.countrycode from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language !=  'english' and t2.governmentform != 'republic';
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
nextra pred: select t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.isofficial !=  'english';
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:386
extra pred: select name from city where language !=  "en";
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
nhard pred: select distinct t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.isofficial  =  'chinese';
hard gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
nhard pred: select distinct t1.name from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.isofficial  =  'chinese';
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
neval_err_num:387
medium pred: select name,  independenceyear,  surfacearea from country where population  <  ( select min(population) from country );
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
neval_err_num:388
medium pred: select t1.name,  t1.year,  t2.surfacearea from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.population  < ( select max(t3.population) from country as t3 join city
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
neval_err_num:389
medium pred: select t1.population,  t1.name,  t2.leader from city as t1 join country as t2 on t1.countrycode  =  t2.code group by t1.countrycode order by surfacearea desc limit 1;
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
nmedium pred: select name,  population,  headofstate from country where surfacearea  =  (select max(surfacearea) from country);
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:390
medium pred: select t1.name,  sum(t2.language) from country as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode group by t1.countrycode having count(*)  >=  3;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:391
medium pred: select t1.name,  count(*) from countrylanguage as t1 join sqlite_sequence as t2 on t1.countrycode  =  t2.name group by t1.countrycode having count(*)  >  2;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
nextra pred: select district,  count(*) from city group by district having avg(population)  >  district;
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:392
extra pred: select districnty,  count(*) from city group by districnty having sum(population)  >  (select sum(population) from city);
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:393
medium pred: select t1.governmentform,  sum(t2.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.governmentform;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
nmedium pred: select distinct t1.governmentform,  sum(t1.population) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.code having avg(t2.percentage)  >  72;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
nmedium pred: select avg(lifeexpectancy),  sum(population) from country where surfacearea  <  72 group by continent;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
nmedium pred: select continent,  sum(population),  avg(lifeexpectancy) from country where continent !=  'Europe' group by continent having sum(lifeexpectancy)  <  72;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
nmedium pred: select name from city order by population desc limit 3;
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
nmedium pred: select name from country where population  < (select min(population) from country);
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
nmedium pred: select name from country where population  < (select min(population) from country);
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
nmedium pred: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.percentage  >  0.8 group by t1.name;
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
nhard pred: select sum(population),  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000 group by continent;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
nhard pred: select sum(population),  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000 group by continent;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
nhard pred: select t3.isofficial from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code join countrylanguage as t3 on t1.language  =  t3.isofficial group by t3.isofficial order by count(*) desc limit 1;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
nhard pred: select isofficial from countrylanguage group by isofficial order by count(*) desc limit 1;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
neval_err_num:394
medium pred: select t1.language,  max(t2.percentage) from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code group by t1.countrycode order by t1.percentage desc limit 1;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:395
medium pred: select t1.countrycode,  t2.language from country as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode group by t1.countrycode order by sum(t2.percentage) desc limit 1;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
nextra pred: select sum(t1.percentage) from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.code group by t2.code order by t1.percentage desc limit 1;
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:396
extra pred: select count(*) from sqlite_sequence where isofficial  =  "spanish";
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:397
medium pred: select t1.countrycode from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.countrycode order by percentagelocale desc limit 1;
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:398
medium pred: select t1.countrycode from countrylanguage as t1 join country as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  'español';
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neasy pred: select name from conductor order by age desc;
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
neasy pred: select name from conductor order by age desc;
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
nmedium pred: select name from conductor order by age asc limit 1;
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
nmedium pred: select name from conductor where age  >  0 order by age desc limit 1;
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
nmedium pred: select name,  conductor_id from conductor;
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
neval_err_num:399
medium pred: select t1.name,  t2.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id;
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
nmedium pred: select name from conductor where conductor_id not in (select conductor_id from orchestra);
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
nmedium pred: select name from conductor where conductor_id not in (select conductor_id from orchestra);
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
nextra pred: select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t1.name order by count(*) desc limit 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: select name from conductor order by count(*) desc limit 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:400
medium pred: select t2.name from orchestra as t1 join conductor as t2 on t1.orchestra_id  =  t2.orchestra_id where t1.year_of_founded  >  2008;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
neval_err_num:401
medium pred: select name from orchestra where year_of_founded  >  2008;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
neval_err_num:402
medium pred: select count(*),  t2.record_company from orchestra as t1 join record_company as t2 on t1.record_company  =  t2.record_company group by t1.record_company;
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
nmedium pred: select major_record_format from orchestra order by count(*) asc;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
nmedium pred: select major_record_format from orchestra order by count(*) desc;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:403
hard pred: select name from orchestra where orchestra_id not in (select orchestra_id from performance);
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:404
medium pred: select count(*) from orchestra where record_format  =  'cd' or record_format  =  'dvd';
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
nmedium pred: select year_of_founded from orchestra where major_record_format  = 'multiple';
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
nmedium pred: select year_of_founded from orchestra where record_company !=  'all';
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
neval_err_num:405
easy pred: select t2.grade from highschooler as t1 join student as t2 on t1.student_id  =  t2.id where t1.name  =  "kyle";
easy gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
neval_err_num:406
easy pred: select t2.grade from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id where t1.name  =  'kyle';
easy gold: SELECT grade FROM Highschooler WHERE name  =  "Kyle"
neasy pred: select t1.student_id from friend as t1 join highschooler as t2 on t1.friend_id  =  t2.id where t2.name  =  "kyle";
easy gold: SELECT ID FROM Highschooler WHERE name  =  "Kyle"
neval_err_num:407
hard pred: select t2.grade from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.id order by count(*) desc limit 1;
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
neval_err_num:408
easy pred: select t2.grade from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t2.grade having count(*)  >=  4;
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
neval_err_num:409
easy pred: select t2.grade from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.grade having count(*)  >=  4;
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
nmedium pred: select t1.student_id,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
nmedium pred: select count(*),  t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
neval_err_num:410
medium pred: select t2.name,  count(*) from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:411
medium pred: select t2.name,  count(*) from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:412
extra pred: select t2.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:413
extra pred: select t2.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:414
medium pred: select t2.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.name having count(*)  >=  3;
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
neval_err_num:415
medium pred: select t2.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id group by t1.id having count(*)  >=  3;
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
nhard pred: select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t1.friend_id  =  1;
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
nhard pred: select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t1.friend_id  =   highschooler.id and t1.student_id  =   highschooler.id where t2.student
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
nmedium pred: select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t1.friend_id  =   t2.id and t2.grade  =  'kyle';
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
nmedium pred: select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t1.friend_id  =  1;
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
neval_err_num:416
hard pred: select student_id from highschooler except select t2.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.student_id;
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
neval_err_num:417
hard pred: select t2.id from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id where t1.id !=  select t1.id from highschooler;
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
nhard pred: select name from highschooler where id not in (select student_id from friend);
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
neval_err_num:418
hard pred: select name from student where id not in (select student_id from friend);
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
neval_err_num:419
hard pred: select t1.id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join likes as t3 on t2.id  =  t3.student_id where t3.liked_id  =  (select id from likes where liked_
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:420
hard pred: select t1.id from friend as t1 join likes as t2 on t1.liked_id  =  t2.liked_id where t1.friend_id  =  highschooler;
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:421
hard pred: select t2.name from friend as t1 join likes as t2 on t1.liked_id  =  t2.liked_id where t1.friend_id  =  highschooler;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
neval_err_num:422
hard pred: select t2.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id join likes as t3 on t2.liked_id  =  t3.student_id;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
nmedium pred: select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
nmedium pred: select count(*),  t1.student_id from likes as t1 join friend as t2 on t1.liked_id  =  t2.student_id group by t1.student_id;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
neval_err_num:423
medium pred: select t2.name,  count(*) from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:424
medium pred: select t2.name,  count(*) from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.name;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:425
extra pred: select t2.name from highschooler as t1 join likes as t2 on t1.id  =  t2.student_id order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nextra pred: select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id order by count(*) desc limit 1;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:426
medium pred: select t1.name from friend as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.name having count(*)  >=  2;
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
neval_err_num:427
medium pred: select t1.name from friend as t1 join likes as t2 on t1.id  =  t2.student_id group by t1.id having count(*)  >=  2;
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
neval_err_num:428
hard pred: select t1.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.name having count(*)  >=  2;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
neval_err_num:429
hard pred: select t1.name from highschooler as t1 join friend as t2 on t1.id  =  t2.student_id where t2.grade  >  5 group by t1.name having count(*)  >=  2;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
nhard pred: select avg(grade) from highschooler where id not in (select student_id from friend);
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
nhard pred: select avg(grade) from highschooler;
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:430
extra pred: select min(grade) from student where id not in (select student_id from friend);
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:431
extra pred: select t1.grade from highschooler as t1 join student as t2 on t1.id  =  t2.id where t2.grade  =  'no friends';
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
nhard pred: select city from owners intersect select city from professionals;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
nhard pred: select distinct state from owners intersect select distinct professional_id from professionals;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
neval_err_num:432
extra pred: select t1.professional_id,  t1.last_name,  t1.cell_number from professionals as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.professional_id having count(*)
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
neval_err_num:433
extra pred: select t1.professional_id,  t1.last_name,  t1.cell_number from professionals as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.professional_id having count(*)
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
nhard pred: select t1.name from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t2.cost_of_treatment  >  1000;
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
nhard pred: select name from dogs where dog_id not in (select dog_id from treatments where cost_of_treatment  >  1000);
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
neval_err_num:434
hard pred: select first_name from professionals except select t1.first_name from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where t2.first_name !=  'dog';
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:435
hard pred: select first_name from professionals except select t1.first_name from professionals as t1 join owners as t2 on t1.owner_id  =  t2.owner_id;
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:436
extra pred: select t2.professional_id,  t2.role_code,  t2.email_address from professionals as t1 join treatment_types as t2 on t1.role_code  =  t2.treatment_type_code group by t1.role_code having count(*)  =
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
nextra pred: select professional_id,  role_code from professionals where role_code !=  'dog_professional';
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:437
extra pred: select t1.owner_id,  t1.first_name,  t1.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1;
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:438
extra pred: select t1.breed_name from dogs as t1 join breeds as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1;
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:439
extra pred: select t1.breed_name from dogs as t1 join breeds as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1;
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:440
extra pred: select t1.owner_id,  t1.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t2.payment_amount) desc limit 1;
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:441
extra pred: select t1.owner_id,  t1.first_name,  t1.last_name from owners as t1 join treatments as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t2.cost_
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
nextra pred: select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost_of_treatment) desc limit 1
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
nextra pred: select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(t2.cost_of_treatment) desc limit 1
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
neval_err_num:442
extra pred: select t1.owner_id,  t1.zip_code from dogs as t1 join payments as t2 on t1.dog_id  =  t2.dog_id group by t1.owner_id order by sum(t2.charge_amount) desc limit 1;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:443
extra pred: select t1.owner_id,  t1.zip_code from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by sum(t2.total_cost) desc limit 1;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:444
medium pred: select t1.professional_id,  t1.cell_number from professionals as t1 join treatment_types as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:445
medium pred: select t1.professional_id,  t2.cell_number from professionals as t1 join treatment_types as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:446
extra pred: select first_name,  last_name from professionals where cost_of_treatment  <  (select avg(cost_of_treatment) from treatment_types);
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
neval_err_num:447
extra pred: select first_name,  last_name from professionals where cost_of_treatment  <  (select avg(cost_of_treatment) from treatments);
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
neval_err_num:448
medium pred: select t1.first_name,  t1.last_name,  t2.size_code from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id;
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:449
medium pred: select t1.first_name,  t1.last_name,  t1.size_code from owners as t1 join dogs as t2 on t1.dog_id  =  t2.dog_id;
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:450
medium pred: select t1.first_name,  t2.name from owners as t1 join dogs as t2 on t1.dog_id  =  t2.dog_id;
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:451
extra pred: select t1.name,  t2.date_of_treatment from dogs as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.breed_code order by count(*) desc limit 1;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:452
extra pred: select t1.name,  t1.date_of_treatment from dogs as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.breed_code order by count(*) desc limit 1;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:453
medium pred: select t1.first_name,  t2.name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where t2.state  =  "Virginia";
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
neval_err_num:454
medium pred: select t1.first_name,  t2.name from owners as t1 join dogs as t2 on t1.dog_id  =  t2.dog_id where t1.state  =  "virginia";
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
neval_err_num:455
medium pred: select date_of_birth,  date_departed from dogs where date_arrived  =  t1.date_arrived and date_departed  =  t2.date_departed;
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:456
medium pred: select date_of_treatment,  date_arrived from treatments where treatment_type_code  =  "treatment";
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:457
extra pred: select t2.first_name,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where t1.dog_id  =  dogs.dog_id order by t1.dog_id desc limit
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
nextra pred: select t2.first_name,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id order by t1.dog_id limit 1;
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
nmedium pred: select date_of_birth,  date_departed from dogs;
medium gold: SELECT date_arrived ,  date_departed FROM Dogs
nmedium pred: select date_of_birth,  date_departed from dogs;
medium gold: SELECT date_arrived ,  date_departed FROM Dogs
neasy pred: select count(*) from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id group by t1.dog_id having count(*)  =  0;
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neval_err_num:458
easy pred: select count(*) from treatment_types as t1 join dogs as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code;
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neval_err_num:459
easy pred: select count(*) from professionals as t1 join treatment_types as t2 on t1.role_code  =  t2.role_code group by t1.role_code;
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments
neval_err_num:460
easy pred: select count(*) from professionals as t1 join dogs as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id;
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments
neval_err_num:461
medium pred: select t2.role_code,  t1.street,  t1.city,  t1.state from professionals as t1 join owners as t2 on t1.professional_id  =  t2.professional_id where t1.street like '%west%';
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
neval_err_num:462
medium pred: select t1.role_code,  t1.street,  t1.city,  t1.state from professionals as t1 join cities as t2 on t1.city  =  t2.city where t2.name like '%west%';
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
nmedium pred: select first_name,  last_name,  email_address from owners where state  =  "north";
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
neval_err_num:463
extra pred: select count(*) from dogs where size_code not in (select size_code from treatments);
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
neval_err_num:464
extra pred: select count(*) from dogs where size_code not in (select size_code from treatments);
extra gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
nextra pred: select count(*) from owners where owner_id not in (select dog_id from dogs);
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
neval_err_num:465
extra pred: select count(*) from owners where dog_id is null;
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
nextra pred: select count(*) from professionals where role_code !=  "d";
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
nextra pred: select count(*) from professionals where role_code !=  "dog_professional";
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
neval_err_num:466
medium pred: select t2.name,  t2.age,  t2.weight from dogs as t1 join dogs as t2 on t1.dog_id  =  t2.dog_id where abandon_yn  =  '1';
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
neval_err_num:467
medium pred: select t2.name,  t2.age,  t2.weight from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id where t1.abandoned_yn  =  1;
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
neasy pred: select age from dogs order by dog_id desc limit 1;
easy gold: SELECT max(age) FROM Dogs
neasy pred: select date_of_birth from dogs order by age asc limit 1;
easy gold: SELECT max(age) FROM Dogs
neval_err_num:468
medium pred: select t1.charge_type,  t1.charge_amount from charges as t1 join treatment_types as t2 on t1.charge_type_code  =  t2.treatment_type_code;
medium gold: SELECT charge_type ,  charge_amount FROM Charges
nmedium pred: select charge_type,  sum(charge_amount) from charges group by charge_type;
medium gold: SELECT charge_type ,  charge_amount FROM Charges
neval_err_num:469
easy pred: select cost_of_treatment from treatment_types order by cost_of_treatment desc limit 1;
easy gold: SELECT max(charge_amount) FROM Charges
neasy pred: select charge_amount from charges order by charge_amount desc limit 1;
easy gold: SELECT max(charge_amount) FROM Charges
neval_err_num:470
medium pred: select distinct(t1.breed_code),  distinct(t2.size_code) from dogs as t1 join sizes as t2 on t1.size_code  =  t2.size_code;
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
neval_err_num:471
medium pred: select distinct t1.breed_code,  t2.size_code from dogs as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code;
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
neval_err_num:472
medium pred: select t1.first_name,  t2.treatment_description from professionals as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code;
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
neval_err_num:473
medium pred: select t1.first_name,  t1.description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id where t2.treatment_type_code  =  "treatment_type_code";
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
nmedium pred: select name from singer where birth_year between 1948 and 1949;
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
nmedium pred: select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id order by t2.sales desc limit 1;
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
neval_err_num:474
medium pred: select t2.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id order by net_worth_millions desc limit 1;
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
nmedium pred: select max(net_worth_millions) from singer where citizenship  =  'american';
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
neval_err_num:475
medium pred: select title,  name from song intersect select t1.title,  t2.name from song as t1 join singer as t2 on t1.singer_id  =  t2.singer_id;
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
neval_err_num:476
medium pred: select title,  name from song;
medium gold: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID
neval_err_num:477
medium pred: select distinct t1.name from song as t1 join singer as t2 on t1.singer_id  =  t2.singer_id where t2.net_worth_millions  >  300000;
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
neval_err_num:478
medium pred: select distinct t1.name from song as t1 join singer as t2 on t1.singer_id  =  t2.singer_id where t2.net_worth_millions  >  300000;
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
nmedium pred: select name from singer group by name having count(*)  >  1;
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
nmedium pred: select sum(sales) from song as t1 join singer as t2 on t1.singer_id  =  t2.singer_id;
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
nhard pred: select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.title != 'song';
hard gold: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)
neval_err_num:479
hard pred: select t2.citizenship from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t1.birth_year  <  1945 intersect select t2.citizenship from singer as t1 join song as t2 on t
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
nhard pred: select citizenship from singer where birth_year between 1945 and 1955;
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
neval_err_num:480
medium pred: select t2.feature_type_name from other_available_features as t1 join ref_property_types as t2 on t1.feature_type_code  =  t2.property_type_code;
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
nmedium pred: select t2.property_type_description from other_property_features as t1 join ref_property_types as t2 on t1.property_id  =  t2.property_type_code;
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
neval_err_num:481
hard pred: select t1.property_name from other_property_features as t1 join properties as t2 on t1.property_id  =  t2.property_id where t2.property_type_code  =  'house' intersect select t1.property_name from other_property_features as t
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
nn                    easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.431                0.256                0.247                0.042                0.262               
====================== EXACT MATCHING ACCURACY =====================
exact match          0.500                0.240                0.201                0.048                0.265               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.899                0.826                0.965                0.759                0.864               
select(no AGG)       0.921                0.843                0.965                0.759                0.879               
where                0.725                0.481                0.442                0.100                0.510               
where(no OP)         0.739                0.490                0.558                0.200                0.551               
group(no Having)     0.571                0.686                0.759                0.750                0.702               
group                0.571                0.629                0.724                0.714                0.660               
order                0.700                0.519                0.733                0.632                0.643               
and/or               1.000                0.946                0.919                0.880                0.944               
IUEN                 0.000                0.000                0.455                0.000                0.294               
keywords             0.892                0.733                0.718                0.407                0.727               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.645                0.435                0.477                0.247                0.462               
select(no AGG)       0.661                0.444                0.477                0.247                0.470               
where                0.463                0.275                0.245                0.021                0.262               
where(no OP)         0.472                0.280                0.309                0.043                0.282               
group(no Having)     0.400                0.361                0.564                0.266                0.365               
group                0.400                0.331                0.538                0.253                0.343               
order                0.636                0.187                0.400                0.304                0.320               
and/or               0.992                0.991                0.994                1.000                0.993               
IUEN                 0.000                0.000                0.119                0.000                0.066               
keywords             0.607                0.370                0.351                0.133                0.362               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.751                0.570                0.638                0.373                0.602               
select(no AGG)       0.770                0.581                0.638                0.373                0.612               
where                0.565                0.350                0.315                0.035                0.346               
where(no OP)         0.576                0.357                0.397                0.070                0.373               
group(no Having)     0.471                0.473                0.647                0.393                0.481               
group                0.471                0.433                0.618                0.374                0.451               
order                0.667                0.275                0.518                0.410                0.428               
and/or               0.996                0.968                0.955                0.936                0.968               
IUEN                 1.000                1.000                0.189                1.000                0.108               
keywords             0.722                0.492                0.471                0.200                0.483               
