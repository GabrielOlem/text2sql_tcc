
eval_err_num:1
extra pred: SELECT semester_name, semester_id FROM semesters WHERE semester_id IN (     SELECT semester_id     FROM student_enrolment     GROUP BY semester_id     HAVING COUNT(student_id) = (         SELECT MAX(num_students)         FROM (             SELECT semester_id, COUNT(student_id) AS num_students             FROM student_enrolment             GROUP BY semester_id         ) AS counts     ) )
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:2
extra pred: SELECT DISTINCT car_names.model FROM car_names JOIN car_makers ON car_names.makeid = car_makers.id JOIN model_list ON car_makers.id = model_list.maker JOIN cars_data ON car_names.makeid = cars_data.id WHERE (car_makers.fullname = 'general motors' OR cars_data.weight > 3500)
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
nextra pred: SELECT name  FROM country  WHERE code = (SELECT countrycode                FROM countrylanguage                GROUP BY countrycode                ORDER BY COUNT(language) DESC                LIMIT 1)
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: SELECT last_name FROM students  JOIN addresses ON students.current_address_id = addresses.address_id  WHERE state_province_county = 'north carolina'  AND student_id NOT IN (SELECT student_id FROM student_enrolment)
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
nextra pred: SELECT countries.countryname  FROM countries  JOIN continents ON countries.continent = continents.contid  JOIN car_makers ON countries.countryid = car_makers.country  WHERE continents.continent = 'Europe'  GROUP BY countries.countryname  HAVING COUNT(car_makers.id) >= 3
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
nextra pred: SELECT COUNT(*)  FROM visitor  WHERE id NOT IN      (SELECT visitor_id      FROM visit JOIN museum      ON visit.museum_id = museum.museum_id      WHERE museum.open_year > 2010)
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
nextra pred: SELECT visitor.id, visitor.name, visitor.level_of_membership FROM visitor JOIN visit ON visit.visitor_id = visitor.id GROUP BY visitor.id, visitor.name, visitor.level_of_membership HAVING SUM(visit.total_spent) = (     SELECT MAX(total_spent)     FROM visit )
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
neval_err_num:3
extra pred: SELECT museum_id, name FROM museum WHERE museum_id IN (     SELECT museum_id     FROM visit     GROUP BY museum_id     HAVING COUNT(*) = (         SELECT MAX(count)         FROM (             SELECT museum_id, COUNT(*) as count             FROM visit             GROUP BY museum_id         ) AS subquery     ) )
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:4
extra pred: SELECT professionals.first_name, professionals.last_name FROM professionals INNER JOIN treatments ON professionals.professional_id = treatments.professional_id WHERE treatments.cost_of_treatment < (SELECT AVG(cost_of_treatment) FROM treatments)
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
nextra pred: SELECT student.fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'cat'  AND student.stuid IN (   SELECT has_pet.stuid    FROM has_pet    JOIN pets ON has_pet.petid = pets.petid    WHERE pets.pettype = 'dog' )
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
neval_err_num:5
extra pred: SELECT abbreviation, country FROM airlines WHERE uid = (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) = (         SELECT MIN(count)         FROM (             SELECT COUNT(*) AS count             FROM flights             GROUP BY airline             ) AS subquery         )     );
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:6
extra pred: SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year IN (2014, 2015)
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
neval_err_num:7
extra pred: SELECT district, COUNT(city) AS num_cities FROM city GROUP BY district HAVING population > (SELECT AVG(population) FROM city)
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:8
extra pred: SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch') AND countrylanguage.isofficial = 1
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
neval_err_num:9
extra pred: SELECT DISTINCT c1.name  FROM country c1  JOIN countrylanguage cl1 ON c1.code = cl1.countrycode  JOIN countrylanguage cl2 ON c1.code = cl2.countrycode  WHERE cl1.language = 'English'  AND cl2.language = 'French'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
nextra pred: SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:10
extra pred: SELECT breed_name FROM breeds GROUP BY breed_name HAVING COUNT(dog_id) = (     SELECT MAX(dog_count)     FROM (         SELECT COUNT(dog_id) AS dog_count         FROM dogs         GROUP BY breed_code     ) AS count_table )
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:11
extra pred: SELECT area_code FROM area_code_state INNER JOIN votes ON area_code_state.state = votes.state GROUP BY area_code HAVING COUNT(*) = (     SELECT MAX(vote_count)     FROM (         SELECT COUNT(*) as vote_count         FROM area_code_state         INNER JOIN votes ON area_code_state.state = votes.state         GROUP BY area_code     ) AS counts )
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:12
extra pred: SELECT tv_channel.series_name, tv_channel.country FROM tv_channel JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('ben jones', 'michael chang')
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
nn                    easy                 medium               hard                 extra                all                 
count                0                    0                    0                    25                   25                  
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.360                0.360               
====================== EXACT MATCHING ACCURACY =====================
exact match          0.000                0.000                0.000                0.240                0.240               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.000                0.000                0.000                1.000                1.000               
select(no AGG)       0.000                0.000                0.000                1.000                1.000               
where                0.000                0.000                0.000                0.556                0.556               
where(no OP)         0.000                0.000                0.000                0.667                0.667               
group(no Having)     0.000                0.000                0.000                0.600                0.600               
group                0.000                0.000                0.000                0.400                0.400               
order                0.000                0.000                0.000                0.667                0.667               
and/or               0.000                0.000                0.000                0.913                0.913               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.000                0.000                0.000                0.692                0.692               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.000                0.000                0.000                0.520                0.520               
select(no AGG)       0.000                0.000                0.000                0.520                0.520               
where                0.000                0.000                0.000                0.333                0.333               
where(no OP)         0.000                0.000                0.000                0.400                0.400               
group(no Having)     0.000                0.000                0.000                0.250                0.250               
group                0.000                0.000                0.000                0.167                0.167               
order                0.000                0.000                0.000                0.200                0.200               
and/or               0.000                0.000                0.000                0.913                0.913               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.000                0.000                0.000                0.360                0.360               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.000                0.000                0.000                0.684                0.684               
select(no AGG)       0.000                0.000                0.000                0.684                0.684               
where                0.000                0.000                0.000                0.417                0.417               
where(no OP)         0.000                0.000                0.000                0.500                0.500               
group(no Having)     0.000                0.000                0.000                0.353                0.353               
group                0.000                0.000                0.000                0.235                0.235               
order                0.000                0.000                0.000                0.308                0.308               
and/or               0.000                0.000                0.000                0.913                0.913               
IUEN                 0.000                0.000                0.000                1.000                1.000               
keywords             0.000                0.000                0.000                0.474                0.474               
