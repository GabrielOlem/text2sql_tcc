
medium pred: SELECT singer.name, singer.song_release_year FROM singer WHERE singer.age = (SELECT MIN(age) FROM singer)
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
nmedium pred: SELECT song_name, song_release_year FROM singer WHERE age = (SELECT MIN(age) FROM singer)
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:1
medium pred: SELECT singer.country, COUNT(*) AS number_of_singers FROM singer GROUP BY singer.country;
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
neval_err_num:2
medium pred: SELECT country, COUNT(*) AS count FROM singer GROUP BY country;
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
nmedium pred: SELECT MAX(capacity), AVG(capacity) FROM stadium
medium gold: select max(capacity), average from stadium
nmedium pred: SELECT name, capacity  FROM stadium  WHERE average = (SELECT MAX(average) FROM stadium)
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
nmedium pred: SELECT stadium.name, stadium.capacity FROM stadium WHERE stadium.highest = (SELECT MAX(stadium.average) FROM stadium)
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
nmedium pred: SELECT COUNT(concert_id) FROM concert WHERE year = 2014 OR year = 2015
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
neval_err_num:3
medium pred: SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:4
medium pred: SELECT stadium.name, COUNT(concert.concert_id) AS num_concerts FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id GROUP BY stadium.name;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
nextra pred: SELECT stadium.name, stadium.capacity FROM stadium JOIN concert ON concert.stadium_id = stadium.stadium_id WHERE concert.year >= 2014 GROUP BY stadium.name, stadium.capacity ORDER BY COUNT(concert.concert_id) DESC LIMIT 1
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:5
extra pred: SELECT stadium.name, stadium.capacity  FROM stadium  INNER JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.year > 2013  GROUP BY stadium.name, stadium.capacity  HAVING COUNT(*) = (   SELECT MAX(concert_count)    FROM (     SELECT COUNT(*) as concert_count      FROM stadium      INNER JOIN concert ON stadium.stadium_id = concert.stadium_id      WHERE concert.year > 2013      GROUP BY stadium.stadium_id   ) as temp )
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
neval_err_num:6
hard pred: SELECT year FROM concert GROUP BY year HAVING COUNT(*) =  (SELECT MAX(count)  FROM  (SELECT year, COUNT(*) as count  FROM concert  GROUP BY year) as counts)
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:7
hard pred: SELECT year FROM concert GROUP BY year HAVING COUNT(*) = (     SELECT MAX(concert_count)     FROM (         SELECT year, COUNT(*) as concert_count         FROM concert         GROUP BY year     ) as subquery )
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:8
hard pred: SELECT stadium.name  FROM stadium  LEFT JOIN concert ON stadium.stadium_id = concert.stadium_id  WHERE concert.concert_id IS NULL
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
nhard pred: SELECT name  FROM stadium  WHERE stadium_id NOT IN      (SELECT stadium_id      FROM concert      WHERE year = 2014)
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:9
hard pred: SELECT stadium.name FROM stadium LEFT JOIN concert ON concert.stadium_id = stadium.stadium_id AND concert.year = 2014 WHERE concert.concert_id IS NULL
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
nmedium pred: SELECT concert.concert_name, concert.theme, COUNT(singer_in_concert.singer_id) FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert.concert_id;
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
neval_err_num:10
medium pred: SELECT concert_name, theme, COUNT(singer_id) AS number_of_singers FROM concert JOIN singer_in_concert ON concert.concert_id = singer_in_concert.concert_id GROUP BY concert_name, theme
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
neval_err_num:11
medium pred: SELECT singer.name, COUNT(singer_in_concert.concert_id) AS number_of_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:12
medium pred: SELECT singer.name, COUNT(singer_in_concert.concert_id) AS num_concerts FROM singer JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id GROUP BY singer.name;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:13
hard pred: SELECT singer.name FROM singer INNER JOIN singer_in_concert ON singer.singer_id = singer_in_concert.singer_id INNER JOIN concert ON concert.concert_id = singer_in_concert.concert_id WHERE concert.year = 2014
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:14
medium pred: SELECT singer.name, singer.country  FROM singer  WHERE EXISTS      (SELECT *       FROM singer_in_concert       INNER JOIN concert ON singer_in_concert.concert_id = concert.concert_id       INNER JOIN singer ON singer_in_concert.singer_id = singer.singer_id       WHERE singer_in_concert.song_name LIKE '%hey%')
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
nextra pred: SELECT stadium.name, stadium.location FROM stadium JOIN concert ON stadium.stadium_id = concert.stadium_id WHERE concert.year = 2014 AND concert.year = 2015
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
nextra pred: SELECT name, location FROM stadium WHERE stadium_id IN (     SELECT stadium_id     FROM concert     WHERE year = 2014 ) AND stadium_id IN (     SELECT stadium_id     FROM concert     WHERE year = 2015 )
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
nhard pred: SELECT COUNT(*) FROM concert  JOIN stadium ON concert.stadium_id = stadium.stadium_id  WHERE stadium.capacity = (SELECT MAX(capacity) FROM stadium)
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
nhard pred: SELECT COUNT(concert_id)  FROM concert  WHERE stadium_id = (SELECT stadium_id                      FROM stadium                      WHERE capacity = (SELECT MAX(capacity) FROM stadium))
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neasy pred: SELECT COUNT(*) FROM has_pet JOIN pets ON has_pet.petid = pets.petid WHERE pets.weight > 10
easy gold: SELECT count(*) FROM pets WHERE weight  >  10
nmedium pred: SELECT weight  FROM pets  WHERE pettype = 'dog'  ORDER BY pet_age ASC  LIMIT 1;
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:15
medium pred: SELECT MIN(p.pet_age) AS youngest_dog_age, p.weight AS youngest_dog_weight FROM pets p WHERE p.pettype = 'dog'
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:16
medium pred: SELECT p.pettype, MAX(p.weight) AS maximum_weight FROM pets p GROUP BY p.pettype
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
neval_err_num:17
medium pred: SELECT pets.pettype, MAX(pets.weight) AS max_weight  FROM pets  GROUP BY pets.pettype
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
nmedium pred: SELECT COUNT(has_pet.petid)  FROM has_pet  JOIN student ON has_pet.stuid = student.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE student.age > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:18
medium pred: SELECT COUNT(*) FROM has_pet INNER JOIN student ON has_pet.stuid = student.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE student.age > 20
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:19
easy pred: SELECT COUNT(DISTINCT pettype) AS distinct_pets FROM  pets
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:20
extra pred: SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype IN ('cat', 'dog')
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
nextra pred: SELECT student.fname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND student.stuid IN (     SELECT student.stuid     FROM student     JOIN has_pet ON student.stuid = has_pet.stuid     JOIN pets ON has_pet.petid = pets.petid     WHERE pets.pettype = 'dog' )
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
neval_err_num:21
extra pred: SELECT student.fname FROM student WHERE EXISTS(SELECT *              FROM pets              JOIN has_pet ON pets.petid = has_pet.petid              WHERE pets.pettype = 'cat'                AND has_pet.stuid = student.stuid)   AND EXISTS(SELECT *              FROM pets              JOIN has_pet ON pets.petid = has_pet.petid              WHERE pets.pettype = 'dog'                AND has_pet.stuid = student.stuid);
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
neval_err_num:22
extra pred: SELECT student.major, student.age FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:23
extra pred: SELECT student.major, student.age  FROM student  WHERE student.stuid NOT IN      (SELECT has_pet.stuid      FROM has_pet      INNER JOIN pets ON has_pet.petid = pets.petid      WHERE pets.pettype = 'cat')
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:24
hard pred: SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:25
hard pred: SELECT student.stuid FROM student LEFT JOIN has_pet ON student.stuid = has_pet.stuid LEFT JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype <> 'cat' OR pets.pettype IS NULL
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:26
extra pred: SELECT student.fname, student.age  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND has_pet.petid NOT IN (SELECT petid FROM pets WHERE pettype = 'cat')
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
nextra pred: SELECT student.fname  FROM student  JOIN has_pet ON student.stuid = has_pet.stuid  JOIN pets ON has_pet.petid = pets.petid  WHERE pets.pettype = 'dog'  AND stuid NOT IN (SELECT has_pet.stuid                    FROM has_pet                    JOIN pets ON has_pet.petid = pets.petid                    WHERE pets.pettype = 'cat')
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
nmedium pred: SELECT pettype, weight FROM pets WHERE pet_age = (   SELECT MIN(pet_age)   FROM pets )
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
nmedium pred: SELECT pettype, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets)
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:27
medium pred: SELECT pets.pettype, AVG(pets.pet_age) AS average_age, MAX(pets.pet_age) AS maximum_age FROM pets GROUP BY pets.pettype
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:28
medium pred: SELECT pettype, AVG(weight) AS average_weight FROM pets GROUP BY pettype
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:29
medium pred: SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:30
medium pred: SELECT student.fname, student.age FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
nmedium pred: SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'smith'
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
nmedium pred: SELECT pets.petid FROM pets JOIN has_pet ON pets.petid = has_pet.petid JOIN student ON has_pet.stuid = student.stuid WHERE student.lname = 'smith'
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
neval_err_num:31
medium pred: SELECT student.stuid, COUNT(*) AS num_pets FROM student JOIN has_pet ON student.stuid = has_pet.stuid GROUP BY student.stuid
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
neval_err_num:32
medium pred: SELECT student.stuid, COUNT(pets.petid) AS num_pets  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  INNER JOIN pets ON has_pet.petid = pets.petid  GROUP BY student.stuid
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
nmedium pred: SELECT student.fname, student.sex FROM student WHERE student.stuid IN (     SELECT has_pet.stuid     FROM has_pet     GROUP BY has_pet.stuid     HAVING COUNT(has_pet.petid) > 1 );
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:33
medium pred: SELECT student.fname, student.sex  FROM student  INNER JOIN has_pet ON student.stuid = has_pet.stuid  GROUP BY student.stuid  HAVING COUNT(has_pet.petid) > 1
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:34
hard pred: SELECT student.lname FROM student INNER JOIN has_pet ON student.stuid = has_pet.stuid INNER JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
nhard pred: SELECT student.lname FROM student JOIN has_pet ON student.stuid = has_pet.stuid JOIN pets ON has_pet.petid = pets.petid WHERE pets.pettype = 'cat' AND pets.pet_age = 3 LIMIT 1;
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:35
medium pred: SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents INNER JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent ORDER BY continents.contid ASC
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:36
medium pred: SELECT continents.contid, continents.continent, COUNT(countries.countryid) AS num_countries FROM continents JOIN countries ON continents.contid = countries.continent GROUP BY continents.contid, continents.continent;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neasy pred: SELECT COUNT(countryname) FROM countries
easy gold: SELECT count(*) FROM COUNTRIES;
neval_err_num:37
medium pred: SELECT car_makers.fullname, car_makers.id, COUNT(model_list.modelid) AS num_models FROM car_makers INNER JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.fullname, car_makers.id
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:38
medium pred: SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS num_models  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id, car_makers.fullname
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
nhard pred: SELECT car_names.model FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower = (SELECT MIN(horsepower) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:39
hard pred: SELECT car_names.model FROM cars_data INNER JOIN car_names ON cars_data.id = car_names.makeid WHERE cars_data.horsepower = (SELECT MIN(horsepower) FROM cars_data)
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:40
extra pred: SELECT model FROM cars_data WHERE weight < (SELECT AVG(weight) FROM cars_data)
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:41
extra pred: SELECT car_makers.fullname FROM car_makers INNER JOIN cars_data ON cars_data.id = car_makers.id WHERE cars_data.year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
nextra pred: SELECT car_makers.maker FROM car_makers JOIN cars_data ON car_makers.id = cars_data.id WHERE cars_data.year = 1970
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
nextra pred: SELECT car_makers.maker, cars_data.year FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year = (SELECT MIN(year) FROM cars_data)
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
nextra pred: SELECT car_makers.maker, MIN(cars_data.year) FROM car_makers JOIN car_names ON car_makers.id = car_names.makeid JOIN cars_data ON car_names.model = cars_data.id GROUP BY car_makers.maker ORDER BY MIN(cars_data.year) LIMIT 1;
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
nhard pred: SELECT DISTINCT car_names.model FROM car_names JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
nhard pred: SELECT DISTINCT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id WHERE cars_data.year > 1980
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
neval_err_num:42
hard pred: SELECT continents.continent, COUNT(car_makers.id) AS count_car_makers FROM car_makers  JOIN countries ON car_makers.country = countries.countryid  JOIN continents ON countries.continent = continents.contid  GROUP BY continents.continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:43
hard pred: SELECT continents.continent, COUNT(car_makers.id) as car_maker_count  FROM continents  LEFT JOIN countries ON continents.contid = countries.continent  LEFT JOIN car_makers ON countries.countryid = car_makers.country  GROUP BY continents.continent
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:44
extra pred: SELECT countryname FROM countries WHERE countryid IN (   SELECT country   FROM car_makers   GROUP BY country   HAVING COUNT(id) = (     SELECT MAX(num_makers)     FROM (       SELECT country, COUNT(id) AS num_makers       FROM car_makers       GROUP BY country     ) AS subquery   ) )
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
nextra pred: SELECT countryname FROM countries WHERE countryid = (     SELECT country     FROM car_makers     GROUP BY country     HAVING COUNT(id) = (         SELECT COUNT(id)         FROM car_makers         GROUP BY country         ORDER BY COUNT(id) DESC         LIMIT 1     ) )
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:45
medium pred: SELECT COUNT(car_names.model) AS car_model_count, car_makers.fullname AS car_maker_fullname FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model GROUP BY car_makers.fullname
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
neval_err_num:46
medium pred: SELECT car_makers.id, car_makers.fullname, COUNT(model_list.modelid) AS number_of_car_models FROM car_makers JOIN model_list ON model_list.maker = car_makers.id GROUP BY car_makers.id, car_makers.fullname
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
nmedium pred: SELECT cars_data.accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'amc'  AND model_list.model = 'hornet sportabout (sw)'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
nmedium pred: SELECT accelerate  FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_names.model = 'amc hornet sportabout (sw)'
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
nmedium pred: SELECT COUNT(DISTINCT car_makers.id) FROM car_makers JOIN countries ON car_makers.country = countries.countryid WHERE countries.countryname = 'France'
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
nhard pred: SELECT COUNT(*)  FROM car_names  JOIN model_list ON car_names.model = model_list.modelid  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'usa'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
nhard pred: SELECT COUNT(*) FROM car_names  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN countries ON car_makers.country = countries.countryid  WHERE countries.countryname = 'united states'
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
nmedium pred: SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON car_makers.id = model_list.maker JOIN car_names ON model_list.model = car_names.model
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
nmedium pred: SELECT car_makers.maker, model_list.model FROM car_makers JOIN model_list ON model_list.maker = car_makers.id
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
neval_err_num:47
medium pred: SELECT DISTINCT cm.id, cm.maker, c.countryname FROM car_makers cm JOIN countries c ON cm.country = c.countryid WHERE EXISTS (   SELECT 1   FROM car_makers cm2   WHERE cm2.country = c.countryid ) ORDER BY c.countryname;
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
nmedium pred: SELECT countries.countryname, countries.countryid FROM countries WHERE countries.countryid IN (SELECT car_makers.country                               FROM car_makers)
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:48
medium pred: SELECT year, AVG(weight) AS average_weight FROM cars_data GROUP BY year
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:49
medium pred: SELECT year, AVG(weight) AS average_weight, AVG(year) AS average_year FROM cars_data GROUP BY year
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
nextra pred: SELECT countryname  FROM countries  JOIN continents ON countries.continent = continents.contid  JOIN car_makers ON car_makers.country = countries.countryid  GROUP BY countries.countryname, continents.continent  HAVING COUNT(car_makers.id) >= 3  AND continents.continent = 'Europe'
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:50
extra pred: SELECT countryname FROM countries WHERE continent = (SELECT contid FROM continents WHERE continent = "Europe") GROUP BY countryname HAVING COUNT(DISTINCT maker) >= 3;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
nextra pred: SELECT MAX(cars_data.horsepower), car_makers.maker FROM cars_data JOIN car_names ON cars_data.id = car_names.makeid JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.cylinders = 3;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:51
extra pred: SELECT MAX(horsepower) AS largest_horsepower, maker FROM cars_data AS cd JOIN car_names AS cn ON cd.id = cn.makeid JOIN model_list AS ml ON cn.model = ml.model JOIN car_makers AS cm ON ml.maker = cm.id WHERE cd.cylinders = 3 GROUP BY maker ORDER BY largest_horsepower DESC LIMIT 1;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
nhard pred: SELECT MAX(cars_data.mpg) FROM cars_data
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
neval_err_num:52
medium pred: SELECT AVG(edispl)  FROM cars_data cd JOIN car_names cn ON cd.id = cn.makeid JOIN model_list ml ON cn.model = ml.modelid JOIN car_makers cm ON ml.maker = cm.id WHERE cm.maker = 'volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
nmedium pred: SELECT AVG(edispl) FROM cars_data  JOIN car_names ON cars_data.id = car_names.makeid  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE car_makers.maker = 'volvo'
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
nmedium pred: SELECT MAX(cars_data.accelerate) FROM cars_data GROUP BY cars_data.cylinders
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
neval_err_num:53
hard pred: SELECT car_names.model, COUNT(car_names.makeid) AS version  FROM car_names  GROUP BY car_names.model  ORDER BY version DESC  LIMIT 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neval_err_num:54
hard pred: SELECT car_names.model, COUNT(DISTINCT car_names.makeid) AS num_versions FROM car_names GROUP BY car_names.model ORDER BY num_versions DESC LIMIT 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
nmedium pred: SELECT COUNT(*)  FROM model_list  WHERE maker = (SELECT id                 FROM car_makers                 WHERE maker = 'american motor company')
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
nmedium pred: SELECT car_makers.fullname, car_makers.id FROM car_makers JOIN model_list ON car_makers.id = model_list.maker GROUP BY car_makers.id, car_makers.fullname HAVING COUNT(model_list.model) > 3;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
nmedium pred: SELECT car_makers.id, car_makers.maker  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  GROUP BY car_makers.id, car_makers.maker  HAVING COUNT(model_list.modelid) > 3
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:55
extra pred: SELECT DISTINCT model_list.model  FROM car_makers  JOIN model_list ON car_makers.id = model_list.maker  JOIN car_names ON model_list.model = car_names.model  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE (car_makers.fullname = 'general motors' OR cars_data.weight > 3500)
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:56
extra pred: SELECT car_names.model  FROM car_names  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  JOIN cars_data ON car_names.makeid = cars_data.id  WHERE (car_makers.maker = 'general motors' OR cars_data.weight > 3500)
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neasy pred: SELECT DISTINCT year  FROM cars_data  WHERE weight >= 3000 AND weight <= 4000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neasy pred: SELECT DISTINCT year  FROM cars_data  WHERE weight < 4000 OR weight > 3000
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
nmedium pred: SELECT horsepower  FROM cars_data  WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
nmedium pred: SELECT horsepower  FROM cars_data  WHERE accelerate = (SELECT MAX(accelerate) FROM cars_data)
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
nextra pred: SELECT MIN(cylinders) FROM cars_data  WHERE id IN (SELECT makeid FROM car_names               WHERE model = 'volvo')  AND accelerate = (SELECT MIN(accelerate) FROM cars_data                    WHERE id IN (SELECT makeid FROM car_names                                 WHERE model = 'volvo'))
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
neval_err_num:57
extra pred: SELECT MIN(c.accelerate) FROM cars_data c JOIN car_names cn ON c.id = cn.makeid JOIN model_list ml ON cn.model = ml.model JOIN car_makers cm ON ml.maker = cm.id WHERE cm.maker = 'volvo'
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
nhard pred: SELECT COUNT(*) FROM cars_data WHERE accelerate > (   SELECT MAX(horsepower) FROM cars_data )
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
nhard pred: SELECT COUNT(*) FROM cars_data WHERE accelerate > (SELECT MAX(horsepower) FROM cars_data)
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
nmedium pred: SELECT COUNT(DISTINCT countries.countryid) FROM countries JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.countryid HAVING COUNT(car_makers.id) > 2
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:58
medium pred: SELECT count(DISTINCT countries.countryname) FROM countries INNER JOIN car_makers ON car_makers.country = countries.countryid GROUP BY countries.continent HAVING count(DISTINCT car_makers.id) > 2;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:59
extra pred: SELECT model FROM cars_data, car_names WHERE cars_data.cylinders = 4     AND cars_data.id = car_names.makeid ORDER BY cars_data.horsepower DESC LIMIT 1
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
nmedium pred: SELECT MAX(mpg) FROM cars_data WHERE cylinders = 8 AND year < 1980
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
nextra pred: SELECT car_names.model  FROM car_names  JOIN cars_data ON car_names.makeid = cars_data.id  JOIN model_list ON car_names.model = model_list.model  JOIN car_makers ON model_list.maker = car_makers.id  WHERE cars_data.weight < 3500  AND car_makers.maker != 'ford motor company'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
nextra pred: SELECT car_names.model FROM car_names JOIN cars_data ON car_names.makeid = cars_data.id JOIN model_list ON car_names.model = model_list.model JOIN car_makers ON model_list.maker = car_makers.id WHERE cars_data.weight < 3500 AND car_makers.maker != 'Ford'
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
nhard pred: SELECT countryname FROM countries WHERE countryid NOT IN (    SELECT country    FROM car_makers )
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
nhard pred: SELECT countryname  FROM countries  WHERE countryid NOT IN (SELECT country                          FROM car_makers)
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
neval_err_num:60
extra pred: SELECT id, maker FROM car_makers WHERE id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT model) >= 2 ) GROUP BY id, maker HAVING COUNT(DISTINCT model) > 3;
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
nextra pred: SELECT id, maker FROM car_makers WHERE id IN (     SELECT maker     FROM model_list     GROUP BY maker     HAVING COUNT(DISTINCT model) >= 2 ) AND id IN (     SELECT makeid     FROM car_names     GROUP BY makeid     HAVING COUNT(*) > 3 )
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:61
extra pred: SELECT countryid, countryname FROM countries  WHERE countryid IN  (SELECT country FROM car_makers  GROUP BY country  HAVING COUNT(*) > 3) OR countryid IN  (SELECT countryid FROM car_makers  INNER JOIN model_list ON car_makers.id = model_list.maker  INNER JOIN car_names ON model_list.model = car_names.model  WHERE car_names.make = 'fiat')
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
neval_err_num:62
extra pred: SELECT countryid, countryname  FROM countries  WHERE countryid IN (SELECT country                      FROM car_makers                      GROUP BY country                      HAVING COUNT(id) > 3)  OR countryid IN (SELECT country                  FROM car_makers                    INNER JOIN model_list ON car_makers.id = model_list.maker                   INNER JOIN car_names ON model_list.model = car_names.model                   WHERE car_names.make = 'fiat')
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
nhard pred: SELECT COUNT(*) FROM flights  WHERE sourceairport IN  (SELECT airportcode FROM airports WHERE city = 'aberdeen') AND destairport IN  (SELECT airportcode FROM airports WHERE city = 'ashley')
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
nhard pred: SELECT COUNT(*)  FROM flights  WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = 'aberdeen')  AND destairport = (SELECT airportcode FROM airports WHERE airportname = 'ashley')
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
nmedium pred: SELECT COUNT(*) FROM flights WHERE airline = 'jetblue airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
nmedium pred: SELECT COUNT(*)  FROM flights  WHERE airline = 'jetblue airways'
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
nmedium pred: SELECT COUNT(*) FROM flights JOIN airlines ON flights.airline = airlines.uid JOIN airports ON flights.destairport = airports.airportcode WHERE airlines.airline = 'united airlines' AND airports.airportcode = 'asy';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
nmedium pred: SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.destairport = airports.airportcode  WHERE airlines.airline = 'united airlines'  AND airports.airportcode = 'asy';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
neval_err_num:63
medium pred: SELECT COUNT(*)  FROM flights  INNER JOIN airlines ON flights.airline = airlines.uid  INNER JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airlines.airline = 'united airlines'  AND airports.airportcode = 'ahd'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
nmedium pred: SELECT COUNT(*) FROM flights  JOIN airlines ON flights.airline = airlines.uid  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airlines.airline = 'united'  AND airports.airportcode = 'ahd'
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
neval_err_num:64
extra pred: SELECT airports.city, COUNT(flights.destairport) AS num_arriving_flights  FROM airports  JOIN flights ON flights.destairport = airports.airportcode GROUP BY airports.city ORDER BY num_arriving_flights DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:65
extra pred: SELECT airports.city, COUNT(flights.flightno) AS num_departing_flights FROM airports JOIN flights ON airports.airportcode = flights.sourceairport GROUP BY airports.city ORDER BY num_departing_flights DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:66
extra pred: SELECT airports.airportcode  FROM airports  JOIN flights ON flights.sourceairport = airports.airportcode OR flights.destairport = airports.airportcode GROUP BY airports.airportcode  ORDER BY COUNT(flights.flightid) ASC  LIMIT 1
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:67
extra pred: SELECT airports.airportcode, COUNT(flights.flightno) AS num_flights FROM airports JOIN flights ON airports.airportcode = flights.sourceairport OR airports.airportcode = flights.destairport GROUP BY airports.airportcode ORDER BY num_flights LIMIT 1;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:68
extra pred: SELECT airline, COUNT(*) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:69
extra pred: SELECT airline, COUNT(flightno) AS num_flights FROM flights GROUP BY airline ORDER BY num_flights DESC LIMIT 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:70
extra pred: SELECT abbreviation, country  FROM airlines  WHERE uid = (     SELECT airline      FROM flights      GROUP BY airline      HAVING COUNT(*) = (         SELECT MIN(count)          FROM (             SELECT COUNT(*) as count              FROM flights              GROUP BY airline         ) as c     ) )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:71
extra pred: SELECT abbreviation, country  FROM airlines  WHERE uid = (     SELECT airline      FROM flights      GROUP BY airline      HAVING COUNT(*) = (         SELECT MIN(cnt)          FROM (             SELECT COUNT(*) as cnt              FROM flights              GROUP BY airline         ) AS counts     ) )
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
nmedium pred: SELECT airlines.airline FROM airlines  JOIN flights ON airlines.uid = flights.airline  JOIN airports ON flights.sourceairport = airports.airportcode  WHERE airports.airportcode = 'ahd'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:72
medium pred: SELECT airline  FROM airlines  WHERE EXISTS (SELECT *                FROM flights                INNER JOIN airports ON flights.sourceairport = airports.airportcode                WHERE airlines.uid = flights.airline                AND airports.city = 'ahd')
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
nmedium pred: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportcode = 'ahd';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
neval_err_num:73
medium pred: SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.airportname = 'ahd'
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
neval_err_num:74
extra pred: SELECT a.airline  FROM airlines a JOIN flights f ON a.uid = f.airline JOIN airports a1 ON f.sourceairport = a1.airportcode  JOIN airports a2 ON f.destairport = a2.airportcode WHERE f.sourceairport = 'apg' AND f.destairport = 'cvo'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:75
extra pred: SELECT airlines.airline FROM airlines INNER JOIN flights ON airlines.uid = flights.airline INNER JOIN airports AS apg ON flights.sourceairport = apg.airportcode INNER JOIN airports AS cvo ON flights.sourceairport = cvo.airportcode WHERE apg.airportname = 'apg' AND cvo.airportname = 'cvo'
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
nextra pred: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode WHERE airports.airportcode = 'cvo' AND airlines.airline NOT IN (     SELECT airlines.airline     FROM airlines     JOIN flights ON airlines.uid = flights.airline     JOIN airports ON flights.sourceairport = airports.airportcode     WHERE airports.airportcode = 'apg' )
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:76
extra pred: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline JOIN airports ON flights.sourceairport = airports.airportcode LEFT JOIN airports AS apg ON flights.destairport = apg.airportcode WHERE airports.airportname = 'cvo' AND apg.airportname IS NULL
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
nmedium pred: SELECT DISTINCT airlines.airline  FROM airlines  JOIN flights ON airlines.uid = flights.airline  GROUP BY airlines.airline  HAVING COUNT(*) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
nmedium pred: SELECT airlines.airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airlines.airline HAVING COUNT(flights.flightno) >= 10
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
nmedium pred: SELECT airline FROM airlines WHERE airline IN (     SELECT airline     FROM flights     GROUP BY airline     HAVING COUNT(*) < 200 )
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
nmedium pred: SELECT airline FROM airlines JOIN flights ON airlines.uid = flights.airline GROUP BY airline HAVING COUNT(flights.flightno) < 200;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
nmedium pred: SELECT flightno FROM flights WHERE airline = 'united airlines'
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
nmedium pred: SELECT flightno FROM flights  WHERE airline IN (SELECT uid FROM airlines WHERE airline = 'united airlines')
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
neasy pred: SELECT flightno FROM flights WHERE sourceairport = (SELECT airportcode FROM airports WHERE airportname = "apg")
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: SELECT flightno  FROM flights  JOIN airports ON flights.destairport = airports.airportcode  WHERE airports.airportname = 'apg';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
nmedium pred: SELECT flightno  FROM flights  WHERE sourceairport = (SELECT airportcode FROM airports WHERE city = "aberdeen")
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: SELECT flightno  FROM flights  WHERE destairport = (SELECT airportcode FROM airports WHERE city = "aberdeen")
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
nmedium pred: SELECT flightno FROM flights WHERE destairport = (SELECT airportcode FROM airports WHERE airportname = 'aberdeen')
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:77
hard pred: SELECT COUNT(*) FROM flights INNER JOIN airports ON flights.destairport = airports.airportcode WHERE airports.city = 'aberdeen' OR airports.city = 'abilene'
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
nhard pred: SELECT airportname FROM airports WHERE airportcode NOT IN (SELECT DISTINCT sourceairport                           FROM flights                           UNION                           SELECT DISTINCT destairport                           FROM flights)
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
neval_err_num:78
medium pred: SELECT city, COUNT(*) AS number_of_employees FROM employee GROUP BY city
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city
nmedium pred: SELECT employee.city FROM employee WHERE employee.age < 30 GROUP BY employee.city HAVING COUNT(employee.employee_id) > 1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
nmedium pred: SELECT city  FROM employee  WHERE age < 30  GROUP BY city  HAVING COUNT(employee_id) > 1
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
neval_err_num:79
medium pred: SELECT shop.location, COUNT(shop.shop_id) AS num_shops FROM shop GROUP BY shop.location
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
nmedium pred: SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
nmedium pred: SELECT shop.manager_name, shop.district FROM shop WHERE shop.number_products = (SELECT MAX(number_products) FROM shop)
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:80
medium pred: SELECT MIN(number_products) AS min_products, MAX(number_products) AS max_products FROM shop;
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop
neval_err_num:81
extra pred: SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id, employee.name HAVING COUNT(evaluation.year_awarded) = (     SELECT MAX(eval_count)     FROM (         SELECT COUNT(year_awarded) as eval_count         FROM evaluation         GROUP BY employee_id     ) AS eval_counts )
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT employee.name FROM employee JOIN evaluation ON employee.employee_id = evaluation.employee_id GROUP BY employee.employee_id ORDER BY COUNT(evaluation.year_awarded) DESC LIMIT 1;
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:82
hard pred: SELECT e.name  FROM employee e  JOIN evaluation ev ON e.employee_id = ev.employee_id  WHERE ev.bonus = (SELECT MAX(bonus) FROM evaluation)
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
neval_err_num:83
extra pred: SELECT shop.name  FROM shop  WHERE shop.shop_id IN (     SELECT hiring.shop_id      FROM hiring     GROUP BY hiring.shop_id     HAVING COUNT(hiring.employee_id) = (         SELECT MAX(emp_count)          FROM (             SELECT COUNT(hiring.employee_id) AS emp_count             FROM hiring             GROUP BY hiring.shop_id         ) AS emp_count_table     ) )
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:84
extra pred: SELECT shop.name FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) = (     SELECT MAX(employee_count)     FROM (         SELECT COUNT(hiring.employee_id) as employee_count         FROM shop         JOIN hiring ON shop.shop_id = hiring.shop_id         GROUP BY shop.name     ) AS temp )
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:85
hard pred: SELECT shop.name FROM shop LEFT JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name HAVING COUNT(hiring.employee_id) = 0
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
neval_err_num:86
medium pred: SELECT shop.name, COUNT(hiring.employee_id) AS num_employees FROM shop INNER JOIN hiring ON hiring.shop_id = shop.shop_id GROUP BY shop.name
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
nmedium pred: SELECT shop.name, COUNT(hiring.employee_id) FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id GROUP BY shop.name
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
neval_err_num:87
easy pred: SELECT SUM(bonus) AS total_bonus_given FROM evaluation
easy gold: SELECT sum(bonus) FROM evaluation
nhard pred: SELECT DISTINCT shop.district FROM shop JOIN hiring ON shop.shop_id = hiring.shop_id JOIN employee ON hiring.employee_id = employee.employee_id WHERE shop.number_products < 3000 AND shop.shop_id IN (     SELECT shop_id     FROM shop     WHERE number_products > 10000 )
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
nhard pred: SELECT DISTINCT shop.district FROM shop WHERE shop.number_products < 3000 AND shop.district IN (     SELECT shop.district     FROM shop     WHERE shop.number_products > 10000 )
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
neval_err_num:88
easy pred: SELECT COUNT(DISTINCT documents.template_id) AS number_of_templates_used FROM documents
easy gold: SELECT count(DISTINCT template_id) FROM Documents
nmedium pred: SELECT COUNT(*) FROM documents WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'ppt')
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
nmedium pred: SELECT COUNT(DISTINCT document_id)  FROM documents  WHERE template_id IN (SELECT template_id FROM templates WHERE template_type_code = 'ppt')
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
neval_err_num:89
medium pred: SELECT templates.template_id, COUNT(documents.document_id) AS num_documents FROM templates LEFT JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
neval_err_num:90
medium pred: SELECT templates.template_id, COUNT(documents.template_id) AS usage_count FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
nextra pred: SELECT templates.template_id, templates.template_type_code FROM templates WHERE templates.template_id = (     SELECT documents.template_id     FROM documents     GROUP BY documents.template_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT templates.template_id, templates.template_type_code FROM templates JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id, templates.template_type_code ORDER BY COUNT(documents.document_id) DESC LIMIT 1;
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:91
easy pred: SELECT templates.template_id FROM templates INNER JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT(documents.document_id) > 1;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:92
easy pred: SELECT templates.template_id FROM templates INNER JOIN documents ON documents.template_id = templates.template_id GROUP BY templates.template_id HAVING COUNT(documents.document_id) > 1
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:93
hard pred: SELECT templates.template_id FROM templates LEFT JOIN documents ON documents.template_id = templates.template_id WHERE documents.template_id IS NULL
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:94
hard pred: SELECT templates.template_id FROM templates LEFT JOIN documents ON templates.template_id = documents.template_id WHERE documents.template_id IS NULL
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:95
medium pred: SELECT templates.template_id, templates.version_number, templates.template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neasy pred: SELECT template_type_code FROM ref_template_types;
easy gold: SELECT DISTINCT template_type_code FROM Templates
neval_err_num:96
medium pred: SELECT ref_template_types.template_type_code, COUNT(templates.template_id) AS num_of_templates FROM ref_template_types LEFT JOIN templates ON ref_template_types.template_type_code = templates.template_type_code GROUP BY ref_template_types.template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
neval_err_num:97
medium pred: SELECT template_type_code, COUNT(*) AS num_templates FROM templates GROUP BY template_type_code;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
neval_err_num:98
hard pred: SELECT template_type_code, COUNT(template_id) AS template_count FROM templates GROUP BY template_type_code ORDER BY template_count DESC LIMIT 1
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neasy pred: SELECT template_type_code  FROM ref_template_types  WHERE template_type_code IN (   SELECT template_type_code    FROM templates    GROUP BY template_type_code    HAVING COUNT(template_id) < 3 )
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neasy pred: SELECT template_type_code FROM ref_template_types WHERE template_type_code IN (     SELECT template_type_code     FROM templates     GROUP BY template_type_code     HAVING COUNT(*) < 3 )
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neval_err_num:99
medium pred: SELECT templates.version_number, templates.template_type_code FROM templates INNER JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code ORDER BY templates.version_number ASC LIMIT 1
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
nmedium pred: SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'bk'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
nmedium pred: SELECT document_name FROM documents JOIN templates ON documents.template_id = templates.template_id JOIN ref_template_types ON templates.template_type_code = ref_template_types.template_type_code WHERE ref_template_types.template_type_code = 'bk'
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
nmedium pred: SELECT ref_template_types.template_type_code, COUNT(documents.template_id) FROM ref_template_types JOIN templates ON ref_template_types.template_type_code = templates.template_type_code JOIN documents ON templates.template_id = documents.template_id GROUP BY ref_template_types.template_type_code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:100
medium pred: SELECT ref_template_types.template_type_code, COUNT(documents.template_id) AS num_documents  FROM ref_template_types  LEFT JOIN templates  ON ref_template_types.template_type_code = templates.template_type_code  LEFT JOIN documents  ON templates.template_id = documents.template_id  GROUP BY ref_template_types.template_type_code
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:101
extra pred: SELECT template_type_code, COUNT(*) AS document_count FROM documents GROUP BY template_type_code ORDER BY document_count DESC LIMIT 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT template_type_code FROM templates GROUP BY template_type_code ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN      (SELECT DISTINCT template_type_code      FROM templates      WHERE template_type_code NOT IN          (SELECT template_id          FROM documents))
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
nhard pred: SELECT template_type_code  FROM ref_template_types  WHERE template_type_code NOT IN (SELECT template_type_code FROM templates)
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:102
medium pred: SELECT distinct templates.template_type_description FROM templates JOIN documents ON documents.template_id = templates.template_id JOIN ref_template_types ON ref_template_types.template_type_code = templates.template_type_code;
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
neval_err_num:103
medium pred: SELECT template_id  FROM templates  WHERE template_id IN (   SELECT template_id    FROM ref_template_types    WHERE template_type_description = 'presentation' )
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
neval_err_num:104
easy pred: SELECT COUNT(*) as total_paragraphs FROM paragraphs;
easy gold: SELECT count(*) FROM Paragraphs
nmedium pred: SELECT *  FROM paragraphs  WHERE paragraph_text = 'korea'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
nmedium pred: SELECT * FROM paragraphs WHERE paragraph_text LIKE '%korea %'
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
nmedium pred: SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (     SELECT document_id      FROM documents      WHERE document_name = 'welcome to ny' )
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
nmedium pred: SELECT paragraph_id, paragraph_text  FROM paragraphs  WHERE document_id = (SELECT document_id                       FROM documents                       WHERE document_name = 'welcome to ny')
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:105
medium pred: SELECT paragraphs.paragraph_text FROM paragraphs INNER JOIN documents ON paragraphs.document_id = documents.document_id WHERE documents.document_name = 'customer reviews'
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:106
medium pred: SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_of_paragraphs FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id ORDER BY documents.document_id;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neval_err_num:107
medium pred: SELECT documents.document_id, COUNT(paragraphs.paragraph_id) AS num_paragraphs FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id ORDER BY documents.document_id ASC
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
nmedium pred: SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neval_err_num:108
medium pred: SELECT documents.document_id, documents.document_name, COUNT(paragraphs.paragraph_id) as paragraph_count FROM documents LEFT JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neasy pred: SELECT documents.document_id FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id HAVING COUNT(paragraphs.paragraph_id) >= 2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neval_err_num:109
easy pred: SELECT documents.document_id  FROM documents  INNER JOIN paragraphs ON documents.document_id = paragraphs.document_id  GROUP BY documents.document_id  HAVING COUNT(paragraphs.paragraph_id) >= 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
nextra pred: SELECT documents.document_id, documents.document_name FROM documents JOIN paragraphs ON paragraphs.document_id = documents.document_id GROUP BY documents.document_id, documents.document_name ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT documents.document_id, documents.document_name  FROM documents  WHERE documents.document_id = (     SELECT document_id      FROM paragraphs      GROUP BY document_id      ORDER BY COUNT(paragraph_id) DESC      LIMIT 1 )
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:110
hard pred: SELECT document_id FROM documents ORDER BY (   SELECT COUNT(*)   FROM paragraphs   WHERE paragraphs.document_id = documents.document_id ) ASC LIMIT 1;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
nhard pred: SELECT documents.document_id FROM documents JOIN paragraphs ON documents.document_id = paragraphs.document_id GROUP BY documents.document_id ORDER BY COUNT(paragraphs.paragraph_id) LIMIT 1
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neasy pred: SELECT document_id FROM documents WHERE document_id IN (     SELECT document_id     FROM paragraphs     GROUP BY document_id     HAVING COUNT(paragraph_id) BETWEEN 1 AND 2 )
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:111
easy pred: SELECT documents.document_id FROM documents WHERE (   SELECT COUNT(*)   FROM paragraphs   WHERE paragraphs.document_id = documents.document_id ) BETWEEN 1 AND 2
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:112
hard pred: SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text IN ('brazil', 'ireland')
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
nhard pred: SELECT documents.document_id  FROM documents  JOIN paragraphs ON documents.document_id = paragraphs.document_id  WHERE paragraphs.paragraph_text LIKE '%brazil%' AND paragraphs.paragraph_text LIKE '%ireland%'
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
neval_err_num:113
easy pred: SELECT teacher.name FROM teacher WHERE teacher.hometown <> 'little lever urban district'
easy gold: select name from teacher where hometown != "little lever urban district"
neval_err_num:114
medium pred: SELECT name  FROM teacher  WHERE age IN (32, 33)
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
nmedium pred: SELECT hometown FROM teacher WHERE age = (SELECT MIN(age) FROM teacher)
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
nmedium pred: SELECT hometown FROM teacher WHERE age =  (SELECT MIN(age) FROM teacher)
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:115
medium pred: SELECT teacher.hometown, COUNT(*) as num_teachers  FROM teacher  GROUP BY teacher.hometown
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:116
medium pred: SELECT hometown, COUNT(*) AS teacher_count  FROM teacher  GROUP BY hometown
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:117
hard pred: SELECT hometown, COUNT(*) AS count FROM teacher GROUP BY hometown ORDER BY count DESC LIMIT 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:118
hard pred: SELECT hometown, COUNT(hometown) AS count  FROM teacher  GROUP BY hometown  ORDER BY count DESC  LIMIT 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:119
easy pred: SELECT DISTINCT t1.hometown  FROM teacher t1  JOIN teacher t2 ON t1.hometown = t2.hometown  WHERE t1.teacher_id <> t2.teacher_id;
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:120
medium pred: SELECT teacher.name, course.course  FROM teacher  INNER JOIN course_arrange ON course_arrange.teacher_id = teacher.teacher_id  INNER JOIN course ON course.course_id = course_arrange.course_id
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:121
medium pred: SELECT teacher.name, course.course FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course.course_id = course_arrange.course_id
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:122
hard pred: SELECT teacher.name FROM teacher INNER JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id INNER JOIN course ON course_arrange.course_id = course.course_id WHERE course.course = 'math'
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:123
medium pred: SELECT teacher.name, COUNT(course_arrange.course_id) AS num_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:124
medium pred: SELECT teacher.name, COUNT(course_arrange.course_id) AS number_of_courses FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
nmedium pred: SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.name HAVING COUNT(course_arrange.course_id) >= 2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
nmedium pred: SELECT teacher.name FROM teacher JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id GROUP BY teacher.teacher_id HAVING COUNT(course_arrange.course_id) >= 2
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:125
hard pred: SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
neval_err_num:126
hard pred: SELECT teacher.name FROM teacher LEFT JOIN course_arrange ON teacher.teacher_id = course_arrange.teacher_id WHERE course_arrange.teacher_id IS NULL;
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
neval_err_num:127
easy pred: SELECT COUNT(visitor_id)  FROM visitor  WHERE age < 30
easy gold: SELECT count(*) FROM visitor WHERE age  <  30
nmedium pred: SELECT visitor.name, visitor.level_of_membership  FROM visitor  WHERE visitor.level_of_membership > 4  ORDER BY visitor.age ASC
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
nmedium pred: SELECT museum_id, name  FROM museum WHERE num_of_staff = (     SELECT MAX(num_of_staff)      FROM museum )
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
neval_err_num:128
hard pred: SELECT m.name FROM museum m WHERE m.num_of_staff > (     SELECT MIN(m2.num_of_staff)     FROM museum m2     WHERE m2.open_year > 2010 )
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
nmedium pred: SELECT visitor.id, visitor.name, visitor.age FROM visitor JOIN visit ON visitor.id = visit.visitor_id GROUP BY visitor.id, visitor.name, visitor.age HAVING COUNT(visit.museum_id) > 1
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
nextra pred: SELECT visitor.id, visitor.name, visitor.level_of_membership  FROM visitor  JOIN visit ON visitor.id = visit.visitor_id  GROUP BY visitor.id, visitor.name, visitor.level_of_membership  ORDER BY SUM(visit.total_spent) DESC  LIMIT 1
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
neval_err_num:129
extra pred: SELECT m.museum_id, m.name FROM museum m INNER JOIN visit v ON m.museum_id = v.museum_id GROUP BY m.museum_id, m.name ORDER BY COUNT(v.visit_id) DESC LIMIT 1;
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:130
hard pred: SELECT museum.name  FROM museum  LEFT JOIN visit ON museum.museum_id = visit.museum_id  WHERE visit.museum_id IS NULL
hard gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
nhard pred: SELECT visitor.name, visitor.age  FROM visitor  JOIN visit ON visit.visitor_id = visitor.id  WHERE visit.num_of_ticket = (SELECT MAX(num_of_ticket) FROM visit)
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
neval_err_num:131
medium pred: SELECT AVG(num_of_ticket) AS average_tickets, MAX(num_of_ticket) AS max_tickets  FROM visit;
medium gold: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
neval_err_num:132
extra pred: SELECT v.name  FROM visitor v WHERE v.id IN (     SELECT DISTINCT visitor_id     FROM visit vi     WHERE vi.museum_id IN (         SELECT museum_id         FROM museum         WHERE open_year < 2009     )     AND vi.museum_id IN (         SELECT museum_id         FROM museum         WHERE open_year > 2011     ) )
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
neval_err_num:133
extra pred: SELECT COUNT(visitor_id) FROM visitor WHERE visitor_id NOT IN (     SELECT visitor_id     FROM visit     INNER JOIN museum ON visit.museum_id = museum.museum_id     WHERE museum.open_year > 2010 )
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
neval_err_num:134
easy pred: SELECT COUNT(*) as total_matches FROM matches;
easy gold: SELECT count(*) FROM matches
neval_err_num:135
easy pred: SELECT COUNT(*) AS num_matches  FROM matches;
easy gold: SELECT count(*) FROM matches
neval_err_num:136
medium pred: SELECT AVG(loser_age) AS average_loser_age, AVG(winner_age) AS average_winner_age FROM matches
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches
neval_err_num:137
medium pred: SELECT AVG(loser_age) AS avg_loser_age, AVG(winner_age) AS avg_winner_age FROM matches GROUP BY NULL
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches
neasy pred: SELECT MAX(loser_rank) FROM matches
easy gold: SELECT min(loser_rank) FROM matches
neval_err_num:138
easy pred: SELECT MAX(loser_rank) AS best_rank FROM matches
easy gold: SELECT min(loser_rank) FROM matches
neval_err_num:139
hard pred: SELECT DISTINCT winner_name FROM matches WHERE year IN (2013, 2016)
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:140
hard pred: SELECT DISTINCT p1.first_name, p1.last_name FROM players p1 INNER JOIN matches m1 ON m1.winner_id = p1.player_id INNER JOIN matches m2 ON m2.winner_id = p1.player_id WHERE YEAR(m1.tourney_date) = 2013 AND YEAR(m2.tourney_date) = 2016
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:141
medium pred: SELECT COUNT(*) FROM matches WHERE year IN (2013, 2016)
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
neval_err_num:142
extra pred: SELECT players.country_code, players.first_name  FROM matches  JOIN players ON matches.winner_id = players.player_id  JOIN tournaments ON matches.tourney_id = tournaments.tourney_id  WHERE tournaments.tourney_name = 'tourney wta championships'      AND tournaments.tourney_name = 'australian open'
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
neval_err_num:143
extra pred: SELECT players.first_name, players.country_code  FROM players  INNER JOIN matches ON players.player_id = matches.winner_id  INNER JOIN tournaments ON matches.tourney_id = tournaments.tourney_id  WHERE tournaments.tourney_name = 'WTA Championships' AND tournaments.tourney_name = 'Australian Open'
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
nmedium pred: SELECT first_name, country_code  FROM players  WHERE birth_date = (SELECT MIN(birth_date) FROM players)
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:144
medium pred: SELECT CONCAT(players.first_name, ' ', players.last_name) AS full_name  FROM players  ORDER BY players.birth_date ASC
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
neval_err_num:145
medium pred: SELECT CONCAT(players.first_name, ' ', players.last_name) AS full_name FROM players WHERE players.hand = 'L' ORDER BY players.birth_date
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
nhard pred: SELECT players.first_name, players.country_code  FROM players  JOIN rankings ON players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
nhard pred: SELECT players.first_name, players.country_code  FROM players  WHERE players.player_id = rankings.player_id  GROUP BY players.player_id  ORDER BY COUNT(rankings.tours) DESC  LIMIT 1;
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
neval_err_num:146
hard pred: SELECT year, COUNT(*) AS num_matches  FROM matches  GROUP BY year  ORDER BY num_matches DESC  LIMIT 1;
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:147
hard pred: SELECT year, COUNT(*) AS matches_count FROM matches GROUP BY year ORDER BY matches_count DESC LIMIT 1
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:148
hard pred: SELECT winner_name, winner_rank_points FROM matches INNER JOIN players ON matches.winner_id = players.player_id GROUP BY winner_name, winner_rank_points HAVING COUNT(*) = (   SELECT MAX(winner_count)   FROM (SELECT winner_id, COUNT(*) AS winner_count         FROM matches         GROUP BY winner_id) AS winner_counts )
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:149
hard pred: SELECT p.winner_name, p.winner_rank_points FROM matches m JOIN players p ON m.winner_id = p.player_id GROUP BY p.winner_name, p.winner_rank_points ORDER BY COUNT(*) DESC LIMIT 1;
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT winner_name FROM matches JOIN players ON matches.winner_id = players.player_id WHERE tourney_name = 'australian open' ORDER BY winner_rank_points DESC LIMIT 1;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
nhard pred: SELECT MAX(rankings.ranking_points), players.first_name, players.last_name FROM matches JOIN players ON matches.winner_id = players.player_id JOIN rankings ON rankings.player_id = players.player_id WHERE matches.tourney_name = 'australian open' GROUP BY players.first_name, players.last_name ORDER BY rankings.ranking_points DESC LIMIT 1;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:150
medium pred: SELECT    m.winner_name,   m.loser_name FROM    matches m WHERE    m.minutes = (     SELECT        MAX(minutes)     FROM        matches   )
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
nmedium pred: SELECT matches.winner_name, matches.loser_name FROM matches WHERE matches.minutes = (SELECT MAX(minutes) FROM matches)
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:151
medium pred: SELECT players.first_name, AVG(rankings.ranking) AS average_ranking FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.first_name
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:152
medium pred: SELECT players.first_name, SUM(rankings.ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY players.player_id, players.first_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:153
medium pred: SELECT first_name, SUM(ranking_points) AS total_ranking_points FROM players JOIN rankings ON players.player_id = rankings.player_id GROUP BY first_name
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:154
medium pred: SELECT players.country_code, COUNT(*) AS player_count  FROM players  GROUP BY players.country_code
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
neval_err_num:155
medium pred: SELECT country_code, COUNT(*) AS player_count FROM players GROUP BY country_code;
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
nhard pred: SELECT players.country_code FROM players GROUP BY players.country_code ORDER BY COUNT(players.player_id) DESC LIMIT 1;
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:156
hard pred: SELECT country_code FROM players GROUP BY country_code HAVING COUNT(*) = (     SELECT MAX(player_count)     FROM (         SELECT country_code, COUNT(*) as player_count         FROM players         GROUP BY country_code     ) as counts )
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:157
medium pred: SELECT ranking_date, COUNT(tours) AS total_tours  FROM rankings  GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
neval_err_num:158
medium pred: SELECT ranking_date, COUNT(tours) AS total_tours FROM rankings GROUP BY ranking_date
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
neval_err_num:159
medium pred: SELECT year, COUNT(*) AS num_matches FROM matches GROUP BY year;
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
neval_err_num:160
medium pred: SELECT year, COUNT(*) AS matches_count FROM matches GROUP BY year;
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
neval_err_num:161
medium pred: SELECT m.winner_name, r.ranking  FROM matches m  JOIN players p ON m.winner_id = p.player_id  JOIN rankings r ON p.player_id = r.player_id  ORDER BY p.birth_date  LIMIT 3
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
nmedium pred: SELECT winner_name, winner_rank FROM matches JOIN players ON matches.winner_id = players.player_id WHERE year = (SELECT MIN(year) FROM matches) ORDER BY winner_age LIMIT 3;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
neval_err_num:162
medium pred: SELECT COUNT(DISTINCT matches.winner_id) AS winners FROM matches JOIN players ON matches.winner_id = players.player_id WHERE matches.tourney_name = 'wta championships' AND players.hand = 'left'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
nmedium pred: SELECT COUNT(*)  FROM matches  JOIN players ON players.player_id = matches.winner_id  WHERE players.hand = 'L'  AND matches.tourney_name = 'WTA Championships'
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:163
hard pred: SELECT players.first_name, players.country_code, players.birth_date  FROM matches  INNER JOIN players ON matches.winner_id = players.player_id  WHERE matches.winner_rank_points = (SELECT MAX(winner_rank_points) FROM matches)
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
nhard pred: SELECT players.first_name, players.country_code, players.birth_date FROM players JOIN matches ON matches.winner_id = players.player_id GROUP BY players.player_id HAVING MAX(matches.winner_rank_points) = (     SELECT MAX(winner_rank_points)     FROM matches )
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:164
medium pred: SELECT hand, COUNT(*) AS num_players FROM players GROUP BY hand;
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
neval_err_num:165
medium pred: SELECT hand, COUNT(*) as player_count FROM players GROUP BY hand;
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
nmedium pred: SELECT name, date, result FROM battle;
medium gold: SELECT name ,  date FROM battle
neval_err_num:166
medium pred: SELECT battle.name, MAX(death.killed) AS maximum_death_toll, MIN(death.killed) AS minimum_death_toll FROM battle JOIN death ON battle.id = death.caused_by_ship_id GROUP BY battle.name;
medium gold: SELECT max(killed) ,  min(killed) FROM death
nmedium pred: SELECT * FROM death WHERE caused_by_ship_id IN (     SELECT id     FROM ship     WHERE tonnage = 't' )
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
neval_err_num:167
medium pred: SELECT name, result FROM battle WHERE bulgarian_commander <> 'boril'
medium gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
neval_err_num:168
medium pred: SELECT battle.id, battle.name FROM battle INNER JOIN ship ON battle.id = ship.lost_in_battle WHERE ship.ship_type = 'brig'
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
nhard pred: SELECT battle.id, battle.name  FROM battle  WHERE battle.id IN (   SELECT death.caused_by_ship_id    FROM death    GROUP BY death.caused_by_ship_id    HAVING SUM(death.killed) > 10 )
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
nextra pred: SELECT ship.id, ship.name FROM ship JOIN death ON ship.id = death.caused_by_ship_id GROUP BY ship.id, ship.name ORDER BY SUM(death.injured) DESC LIMIT 1
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
neval_err_num:169
easy pred: SELECT COUNT(DISTINCT result) AS result_count FROM battle;
easy gold: SELECT count(DISTINCT RESULT) FROM battle
neval_err_num:170
extra pred: SELECT COUNT(*)  FROM battle  WHERE NOT EXISTS (SELECT * FROM ship WHERE ship.lost_in_battle = battle.id AND ship.tonnage = '225')
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
neval_err_num:171
extra pred: SELECT b.name, b.date  FROM battle b  JOIN ship s1 ON s1.lost_in_battle = b.id  JOIN ship s2 ON s2.lost_in_battle = b.id  WHERE s1.name = 'lettice' AND s2.name = 'hms atalanta'
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
neval_err_num:172
extra pred: SELECT battle.name, battle.result, battle.bulgarian_commander FROM battle LEFT JOIN ship ON ship.lost_in_battle = battle.id WHERE ship.lost_in_battle IS NULL AND ship.location = 'english channel'
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
neasy pred: SELECT course_description FROM courses WHERE course_name LIKE '%math%';
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:173
extra pred: SELECT departments.department_id, departments.department_name  FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id, departments.department_name HAVING COUNT(degree_programs.degree_program_id) =  (SELECT MAX(degree_count)  FROM (SELECT departments.department_id, COUNT(degree_programs.degree_program_id) as degree_count FROM departments JOIN degree_programs ON departments.department_id = degree_programs.department_id GROUP BY departments.department_id) as counts)
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT departments.department_id, departments.department_name  FROM departments  JOIN degree_programs ON departments.department_id = degree_programs.department_id  GROUP BY departments.department_id, departments.department_name  ORDER BY COUNT(degree_programs.degree_program_id) DESC  LIMIT 1
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
neasy pred: SELECT COUNT(*) FROM degree_programs
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
neasy pred: SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
nmedium pred: SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = 'engineering';
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
nmedium pred: SELECT COUNT(degree_program_id) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'engineering')
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
nmedium pred: SELECT course_id, course_name  FROM courses  WHERE course_id IN      (SELECT course_id      FROM sections      GROUP BY course_id      HAVING COUNT(section_id) <= 2)
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
nmedium pred: SELECT course_id, course_name FROM courses WHERE course_id IN (   SELECT course_id   FROM sections   GROUP BY course_id   HAVING COUNT(section_id) < 2 )
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
nextra pred: SELECT semesters.semester_name, semesters.semester_id FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id GROUP BY semesters.semester_name, semesters.semester_id ORDER BY COUNT(student_enrolment.student_enrolment_id) DESC LIMIT 1;
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:174
extra pred: SELECT s.semester_id, s.semester_name FROM semesters s JOIN student_enrolment se ON s.semester_id = se.semester_id GROUP BY s.semester_id, s.semester_name ORDER BY COUNT(se.student_id) DESC LIMIT 1;
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:175
medium pred: SELECT s.first_name, s.middle_name, s.last_name, s.student_id FROM students s JOIN student_enrolment se ON s.student_id = se.student_id WHERE se.degree_program_id IN (     SELECT se.degree_program_id     FROM student_enrolment se     WHERE se.semester_id = 2     GROUP BY se.degree_program_id     HAVING COUNT(DISTINCT se.semester_id) = 1     )
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:176
medium pred: SELECT students.student_id, students.first_name, students.middle_name, students.last_name  FROM students  JOIN student_enrolment ON student_enrolment.student_id = students.student_id  WHERE EXISTS (     SELECT degree_program_id      FROM student_enrolment      WHERE student_enrolment.student_id = students.student_id      AND student_enrolment.semester_id = semesters.semester_id      GROUP BY student_enrolment.student_id      HAVING COUNT(DISTINCT degree_program_id) = 2 )
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:177
extra pred: SELECT degree_programs.degree_summary_name FROM degree_programs INNER JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(*) DESC LIMIT 1;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT degree_programs.degree_program_id, degree_programs.degree_summary_name FROM degree_programs JOIN student_enrolment ON degree_programs.degree_program_id = student_enrolment.degree_program_id GROUP BY degree_programs.degree_program_id, degree_programs.degree_summary_name ORDER BY COUNT(student_enrolment.student_id) DESC LIMIT 1;
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:178
extra pred: SELECT degree_program_id, degree_summary_name, degree_summary_description  FROM degree_programs  WHERE degree_program_id IN (     SELECT degree_program_id      FROM student_enrolment      GROUP BY degree_program_id      HAVING COUNT(*) = (         SELECT MAX(enrollment_count)          FROM (             SELECT degree_program_id, COUNT(*) as enrollment_count              FROM student_enrolment              GROUP BY degree_program_id         ) AS counts     ) )
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:179
extra pred: SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_id) AS num_enrollments FROM students JOIN student_enrolment ON student_enrolment.student_id = students.student_id GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name ORDER BY num_enrollments DESC LIMIT 1;
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:180
extra pred: SELECT students.student_id, students.first_name, students.middle_name, students.last_name, COUNT(student_enrolment.student_enrolment_id) AS enrollment_count  FROM students  JOIN student_enrolment ON students.student_id = student_enrolment.student_id  GROUP BY students.student_id, students.first_name, students.middle_name, students.last_name  ORDER BY enrollment_count DESC  LIMIT 1;
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neasy pred: SELECT course_name FROM courses WHERE course_id IN (SELECT course_id FROM student_enrolment_courses)
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
nextra pred: SELECT course_name FROM courses WHERE course_id = (     SELECT course_id     FROM student_enrolment_courses     GROUP BY course_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:181
extra pred: SELECT course_name  FROM courses  WHERE course_id = (     SELECT course_id      FROM (         SELECT course_id, COUNT(*) AS num_students          FROM student_enrolment_courses          GROUP BY course_id          ORDER BY num_students DESC          LIMIT 1     ) AS subquery )
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT last_name FROM students JOIN addresses ON students.current_address_id = addresses.address_id WHERE state_province_county = 'north carolina' AND student_id NOT IN (     SELECT student_id     FROM student_enrolment     )
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:182
extra pred: SELECT last_name FROM students WHERE permanent_address_id IN (     SELECT address_id     FROM addresses     WHERE state_province_county = 'North Carolina' ) AND student_id NOT IN (     SELECT student_id     FROM student_enrolment     WHERE degree_program_id IS NULL )
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:183
medium pred: SELECT transcripts.transcript_date, transcripts.transcript_id FROM transcripts INNER JOIN transcript_contents ON transcripts.transcript_id = transcript_contents.transcript_id INNER JOIN student_enrolment_courses ON transcript_contents.student_course_id = student_enrolment_courses.student_course_id GROUP BY transcripts.transcript_date, transcripts.transcript_id HAVING COUNT(student_enrolment_courses.course_id) >= 2
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
nmedium pred: SELECT transcript_id, transcript_date FROM transcripts WHERE transcript_id IN (     SELECT transcript_id     FROM transcript_contents     GROUP BY transcript_id     HAVING COUNT(DISTINCT student_course_id) >= 2 )
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
neval_err_num:184
medium pred: SELECT first_name, middle_name, last_name FROM students WHERE student_id = (SELECT student_id FROM student_enrolment ORDER BY date_first_registered ASC LIMIT 1)
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:185
medium pred: SELECT first_name, middle_name, last_name FROM students WHERE student_id in (   SELECT student_id   FROM student_enrolment   WHERE degree_program_id in (     SELECT degree_program_id     FROM degree_programs   )   ORDER BY date_left   LIMIT 1 )
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:186
medium pred: SELECT first_name, middle_name, last_name FROM students WHERE date_left IS NULL ORDER BY date_first_registered LIMIT 1
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:187
easy pred: SELECT students.first_name FROM students JOIN addresses ON students.permanent_address_id = addresses.address_id WHERE students.permanent_address_id <> students.current_address_id
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
neval_err_num:188
easy pred: SELECT students.first_name  FROM students  JOIN addresses ON students.permanent_address_id <> addresses.address_id  WHERE students.current_address_id <> addresses.address_id
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
nextra pred: SELECT addresses.address_id, addresses.line_1, addresses.line_2, addresses.line_3 FROM addresses JOIN students ON students.current_address_id = addresses.address_id GROUP BY addresses.address_id ORDER BY COUNT(students.student_id) DESC LIMIT 1;
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT address_id, line_1, line_2  FROM addresses  WHERE address_id IN (     SELECT permanent_address_id      FROM students      GROUP BY permanent_address_id      ORDER BY COUNT(student_id) DESC      LIMIT 1 )
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:189
easy pred: SELECT AVG(transcripts.transcript_date) as average_transcript_date  FROM transcripts
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:190
medium pred: SELECT MIN(transcript_date) AS earliest_date, other_details FROM transcripts;
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
nmedium pred: SELECT MAX(transcripts.transcript_date) FROM transcripts
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
nmedium pred: SELECT MAX(transcript_date) FROM transcripts
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:191
hard pred: SELECT COUNT(DISTINCT transcript_contents.transcript_id) AS num_transcripts,         student_enrolment_courses.student_enrolment_id AS enrollment_id FROM student_enrolment_courses INNER JOIN transcript_contents ON student_enrolment_courses.student_course_id = transcript_contents.student_course_id GROUP BY student_enrolment_courses.student_enrolment_id ORDER BY num_transcripts DESC LIMIT 1
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:192
hard pred: SELECT course_id, COUNT(*) AS course_count, MAX(course_count) AS max_course_count, student_enrolment_id FROM student_enrolment_courses GROUP BY course_id HAVING course_count = max_course_count
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT transcript_id, transcript_date FROM transcripts ORDER BY transcript_date ASC LIMIT 1
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:193
extra pred: SELECT transcript_id, transcript_date  FROM transcripts  ORDER BY (SELECT COUNT(*) FROM transcript_contents WHERE transcript_contents.transcript_id = transcripts.transcript_id) ASC  LIMIT 1;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:194
extra pred: SELECT semesters.semester_name FROM semesters JOIN student_enrolment ON semesters.semester_id = student_enrolment.semester_id JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id WHERE degree_programs.degree_summary_name = 'Master'  AND EXISTS (   SELECT 1   FROM student_enrolment se   JOIN degree_programs dp ON se.degree_program_id = dp.degree_program_id   WHERE dp.degree_summary_name = 'Bachelor'   AND se.semester_id = student_enrolment.semester_id )
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:195
extra pred: SELECT semester_id FROM semesters WHERE semester_id IN (     SELECT semester_id     FROM student_enrolment     INNER JOIN degree_programs ON student_enrolment.degree_program_id = degree_programs.degree_program_id     INNER JOIN departments ON degree_programs.department_id = departments.department_id     WHERE degree_summary_name IN ('masters', 'bachelors')     GROUP BY semester_id     HAVING COUNT(DISTINCT degree_summary_name) = 2 )
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neasy pred: SELECT COUNT(DISTINCT addresses.address_id) FROM students JOIN addresses ON students.current_address_id = addresses.address_id
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neasy pred: SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details  FROM addresses  WHERE address_id IN (SELECT current_address_id FROM students UNION SELECT permanent_address_id FROM students)
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neasy pred: SELECT * FROM students ORDER BY last_name DESC, first_name DESC, middle_name DESC;
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neasy pred: SELECT * FROM students ORDER BY last_name DESC
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:196
easy pred: DESCRIBE sections;
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neasy pred: SELECT * FROM cartoon WHERE directed_by = "ben jones";
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
neval_err_num:197
hard pred: SELECT tv_channel.country, COUNT(tv_channel.id) AS num_channels FROM tv_channel GROUP BY tv_channel.country ORDER BY num_channels DESC LIMIT 1;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:198
hard pred: SELECT country, COUNT(*) AS num_channels FROM tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:199
medium pred: SELECT COUNT(DISTINCT series_name) AS number_of_series_names, COUNT(DISTINCT content) AS number_of_contents FROM tv_channel
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:200
medium pred: SELECT COUNT(DISTINCT tv_series.series_name) AS num_series, COUNT(DISTINCT tv_channel.content) AS num_contents  FROM tv_series  JOIN tv_channel ON tv_series.channel = tv_channel.id
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neasy pred: SELECT COUNT(tv_channel.id) FROM tv_channel WHERE tv_channel.language = 'english'
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
neval_err_num:201
hard pred: SELECT tv_channel.language, COUNT(*) AS num_channels  FROM tv_channel  GROUP BY tv_channel.language  ORDER BY num_channels ASC  LIMIT 1;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:202
hard pred: SELECT language, COUNT(*) AS num_channels FROM tv_channel GROUP BY language ORDER BY num_channels ASC LIMIT 1;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:203
medium pred: SELECT tv_channel.language, COUNT(tv_channel.id) AS num_channels FROM tv_channel GROUP BY tv_channel.language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:204
medium pred: SELECT language, COUNT(tv_channel.id) AS num_channels FROM tv_channel GROUP BY language
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:205
medium pred: SELECT cartoon.title  FROM cartoon  INNER JOIN tv_channel ON cartoon.channel = tv_channel.id  INNER JOIN tv_series ON tv_series.channel = tv_channel.id  WHERE tv_channel.series_name = "sky radio"
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
nmedium pred: SELECT title FROM cartoon WHERE channel IN     (SELECT id      FROM tv_channel      WHERE series_name = 'sky radio')
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neasy pred: SELECT cartoon.title, tv_series.episode, tv_series.rating  FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id ORDER BY tv_series.rating DESC;
easy gold: SELECT Episode FROM TV_series ORDER BY rating
nmedium pred: SELECT cartoon.title FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE tv_series.episode = "a love of a lifetime"
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:206
medium pred: SELECT tv_series.episode FROM tv_series INNER JOIN tv_channel ON tv_series.channel = tv_channel.id WHERE tv_channel.series_name = "sky radio"
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:207
medium pred: SELECT episode FROM tv_series WHERE series_name = "sky radio";
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:208
medium pred: SELECT directed_by, COUNT(*) AS cartoon_count FROM cartoon GROUP BY directed_by;
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
neval_err_num:209
medium pred: SELECT directed_by, COUNT(*) AS number_of_cartoons_created FROM cartoon GROUP BY directed_by
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
nmedium pred: SELECT production_code, cartoon.channel FROM cartoon JOIN tv_series ON cartoon.id = tv_series.id WHERE tv_series.air_date = (SELECT MAX(air_date) FROM tv_series) ORDER BY tv_series.air_date DESC LIMIT 1;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
nmedium pred: SELECT production_code, channel  FROM cartoon  WHERE original_air_date = (SELECT MAX(original_air_date) FROM cartoon)
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
neval_err_num:210
medium pred: SELECT package_option, series_name  FROM tv_channel  JOIN tv_series ON tv_channel.id = tv_series.channel  WHERE tv_channel.hight_definition_tv = true
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:211
hard pred: SELECT DISTINCT tv_channel.country FROM tv_channel LEFT JOIN cartoon ON cartoon.channel = tv_channel.id AND cartoon.written_by = 'todd casey' WHERE cartoon.id IS NULL
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
nhard pred: SELECT DISTINCT country FROM tv_channel WHERE id NOT IN (     SELECT channel     FROM cartoon     WHERE written_by = 'todd casey' )
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:212
extra pred: SELECT tv_channel.series_name, tv_channel.country FROM tv_channel INNER JOIN cartoon ON cartoon.channel = tv_channel.id WHERE cartoon.directed_by IN ('ben jones', 'michael chang')
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:213
extra pred: SELECT tv_channel.series_name, tv_channel.country FROM tv_channel WHERE tv_channel.id IN (SELECT cartoon.channel                         FROM cartoon                         WHERE (cartoon.directed_by = 'ben jones' OR cartoon.directed_by = 'michael chang'));
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:214
medium pred: SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country  FROM tv_channel  WHERE tv_channel.language <> 'English'
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neval_err_num:215
medium pred: SELECT tv_channel.pixel_aspect_ratio_par, tv_channel.country  FROM tv_channel  WHERE tv_channel.language <> 'English'
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neasy pred: SELECT tv_channel.id FROM tv_channel WHERE tv_channel.country IN (     SELECT tv_channel.country     FROM tv_channel     GROUP BY tv_channel.country     HAVING COUNT(*) > 2 )
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neasy pred: SELECT id FROM tv_channel GROUP BY id HAVING COUNT(id) > 2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
nhard pred: SELECT tv_channel.id FROM tv_channel WHERE tv_channel.id NOT IN (   SELECT cartoon.channel   FROM cartoon   WHERE cartoon.directed_by = 'ben jones' )
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
neval_err_num:216
hard pred: SELECT tv_channel.id FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones' OR cartoon.directed_by IS NULL
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
neval_err_num:217
hard pred: SELECT tv_channel.package_option FROM tv_channel LEFT JOIN cartoon ON tv_channel.id = cartoon.channel WHERE cartoon.directed_by != 'Ben Jones'    OR cartoon.directed_by IS NULL
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neval_err_num:218
easy pred: SELECT COUNT(*) AS num_poker_players FROM poker_player
easy gold: SELECT count(*) FROM poker_player
nmedium pred: SELECT final_table_made, best_finish FROM poker_player WHERE poker_player_id = people.people_id
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neval_err_num:219
easy pred: SELECT AVG(earnings) AS average_earnings FROM poker_player
easy gold: SELECT avg(Earnings) FROM poker_player
nmedium pred: SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player)
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
nmedium pred: SELECT money_rank FROM poker_player WHERE earnings = (SELECT MAX(earnings) FROM poker_player)
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
neval_err_num:220
easy pred: SELECT name FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
neval_err_num:221
medium pred: SELECT people.name  FROM people  INNER JOIN poker_player ON people.people_id = poker_player.people_id  WHERE poker_player.earnings > 300000
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:222
medium pred: SELECT people.name  FROM people INNER JOIN poker_player ON people.people_id = poker_player.people_id WHERE poker_player.earnings > 300000
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:223
medium pred: SELECT p.name FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.final_table_made ASC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:224
medium pred: SELECT p.name  FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.final_table_made ASC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
nhard pred: SELECT birth_date  FROM people  WHERE people_id = (     SELECT people_id      FROM poker_player      WHERE earnings = (         SELECT MIN(earnings)          FROM poker_player     ) )
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
nhard pred: SELECT money_rank  FROM people  JOIN poker_player ON people.people_id = poker_player.people_id  WHERE height = (SELECT MAX(height) FROM people)
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:225
medium pred: SELECT p.name  FROM people p  JOIN poker_player pp ON p.people_id = pp.people_id  ORDER BY pp.earnings DESC;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
neval_err_num:226
medium pred: SELECT p.name FROM people p JOIN poker_player pp ON p.people_id = pp.people_id ORDER BY pp.earnings DESC
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
neval_err_num:227
medium pred: SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neval_err_num:228
medium pred: SELECT nationality, COUNT(*) AS count FROM people GROUP BY nationality;
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neval_err_num:229
hard pred: SELECT nationality, COUNT(nationality) AS count FROM people GROUP BY nationality ORDER BY count DESC LIMIT 1
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:230
easy pred: SELECT name FROM people WHERE nationality <> "russia";
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"
neval_err_num:231
easy pred: SELECT name FROM people WHERE nationality <> 'russia'
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"
nhard pred: SELECT name  FROM people  WHERE people_id NOT IN (SELECT DISTINCT people_id FROM poker_player)
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
neval_err_num:232
easy pred: SELECT COUNT(DISTINCT nationality) AS number_of_nationalities FROM people
easy gold: SELECT count(DISTINCT Nationality) FROM people
neval_err_num:233
easy pred: SELECT COUNT(DISTINCT state) AS num_states FROM area_code_state
easy gold: SELECT count(*) FROM area_code_state
neval_err_num:234
medium pred: SELECT MAX(area_code) AS max_area_code, MIN(area_code) AS min_area_code FROM area_code_state;
medium gold: SELECT max(area_code) ,  min(area_code) FROM area_code_state
nmedium pred: SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number IN (   SELECT contestant_number   FROM votes   GROUP BY contestant_number   HAVING COUNT(*) >= 2 )
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
nextra pred: SELECT contestant_number, contestant_name FROM contestants WHERE contestant_number = (     SELECT contestant_number     FROM votes     GROUP BY contestant_number     ORDER BY COUNT(*) ASC     LIMIT 1 )
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
nextra pred: SELECT COUNT(*)  FROM contestants  WHERE contestant_number NOT IN      (SELECT DISTINCT contestant_number      FROM votes)
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
nextra pred: SELECT area_code_state.area_code FROM area_code_state JOIN votes ON area_code_state.state = votes.state GROUP BY area_code_state.area_code ORDER BY COUNT(votes.vote_id) DESC LIMIT 1
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:235
extra pred: SELECT area_code_state.area_code FROM area_code_state INNER JOIN votes ON area_code_state.state = votes.state INNER JOIN contestants ON contestants.contestant_number = votes.contestant_number WHERE contestants.contestant_name = 'tabatha gehling' OR contestants.contestant_name = 'kelly clauss' GROUP BY area_code_state.area_code HAVING COUNT(DISTINCT contestants.contestant_name) = 2
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
neasy pred: SELECT SUM(surfacearea)  FROM country  WHERE continent = 'Caribbean';
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neasy pred: SELECT continent FROM country WHERE code = (SELECT countrycode FROM city WHERE name = 'Anguilla')
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
nmedium pred: SELECT region FROM country WHERE name = 'kabul';
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
nextra pred: SELECT language FROM countrylanguage  WHERE countrycode = 'ABW'  ORDER BY percentage DESC  LIMIT 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
nextra pred: SELECT language FROM countrylanguage WHERE countrycode = (     SELECT code     FROM country     WHERE name = 'Aruba' ) AND isofficial = 'T' ORDER BY percentage DESC LIMIT 1;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
neasy pred: SELECT AVG(lifeexpectancy)  FROM country  WHERE continent = 'Africa' AND region = 'Central Africa'
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
neval_err_num:236
medium pred: SELECT SUM(country.population) AS total_population, MAX(country.gnp) AS maximum_gnp FROM country WHERE country.continent = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
neval_err_num:237
medium pred: SELECT SUM(city.population) AS total_population, MAX(country.gnp) AS largest_gnp FROM city JOIN country ON city.countrycode = country.code WHERE country.continent = 'Asia'
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
neval_err_num:238
medium pred: SELECT SUM(surfacearea) FROM country WHERE continent IN ('Asia', 'Europe')
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neval_err_num:239
medium pred: SELECT SUM(surfacearea) AS total_surface_area FROM country WHERE continent IN ('Asia', 'Europe')
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neval_err_num:240
medium pred: SELECT AVG(country.gnp) AS mean_gnp, SUM(country.population) AS total_population  FROM country  WHERE country.continent = 'North America'  AND country.region = 'US Territory'
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
nmedium pred: SELECT COUNT(language) FROM countrylanguage WHERE countrycode = 'ABW'
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: SELECT COUNT(*)  FROM countrylanguage WHERE countrycode = 'AFG' AND isofficial = 'T';
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
nmedium pred: SELECT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.code ORDER BY COUNT(countrylanguage.language) DESC LIMIT 1;
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
neval_err_num:241
extra pred: SELECT country.name FROM country JOIN (     SELECT countrycode, COUNT(DISTINCT language) AS num_languages     FROM countrylanguage     GROUP BY countrycode     ORDER BY num_languages DESC     LIMIT 1 ) AS lang_count ON country.code = lang_count.countrycode
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:242
extra pred: SELECT continent, COUNT(DISTINCT language) AS num_languages FROM countrylanguage JOIN country ON countrylanguage.countrycode = country.code GROUP BY continent ORDER BY num_languages DESC LIMIT 1;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:243
extra pred: SELECT country.continent, COUNT(DISTINCT countrylanguage.language) AS num_languages FROM country INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.continent ORDER BY num_languages DESC LIMIT 1;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:244
extra pred: SELECT COUNT(DISTINCT c1.name) AS num_countries FROM countrylanguage cl1 JOIN countrylanguage cl2 ON cl1.countrycode = cl2.countrycode JOIN country c1 ON cl1.countrycode = c1.code JOIN country c2 ON cl2.countrycode = c2.code WHERE cl1.language = 'English' AND cl2.language = 'Dutch'
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:245
easy pred: SELECT COUNT(DISTINCT country.code) AS number_of_nations FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language IN ('English', 'Dutch') AND countrylanguage.isofficial = 1
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:246
easy pred: SELECT c.name FROM country c JOIN countrylanguage cl1 ON c.code = cl1.countrycode JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl2.language = 'French' AND cl1.isofficial = 1 AND cl2.isofficial = 1
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:247
extra pred: SELECT DISTINCT country.name  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'English' AND countrylanguage.isofficial = 1 AND EXISTS (   SELECT *    FROM countrylanguage    WHERE country.code = countrylanguage.countrycode    AND countrylanguage.language = 'French'    AND countrylanguage.isofficial = 1 )
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:248
extra pred: SELECT DISTINCT c.name FROM country c INNER JOIN countrylanguage cl1 ON c.code = cl1.countrycode INNER JOIN countrylanguage cl2 ON c.code = cl2.countrycode WHERE cl1.language = 'English' AND cl1.isofficial = 'T'  AND cl2.language = 'French' AND cl2.isofficial = 'T'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:249
extra pred: SELECT DISTINCT country.name FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE (countrylanguage.language = 'English' AND countrylanguage.isofficial = 'T') AND (countrylanguage.language = 'French' AND countrylanguage.isofficial = 'T')
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:250
extra pred: SELECT COUNT(DISTINCT country.continent) FROM country LEFT JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:251
medium pred: SELECT COUNT(DISTINCT country.continent) as num_continents  FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Chinese'
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:252
medium pred: SELECT DISTINCT region  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (language = 'English' OR language = 'Dutch')
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:253
hard pred: SELECT DISTINCT country.region  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language IN ('Dutch', 'English')
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:254
hard pred: SELECT country.name  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 'T'
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:255
extra pred: SELECT country.name  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE (countrylanguage.language = 'English' OR countrylanguage.language = 'Dutch')  AND countrylanguage.isofficial = 'T'
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
nextra pred: SELECT language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE continent = 'Asia' ORDER BY percentage DESC LIMIT 1;
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
neval_err_num:256
extra pred: SELECT c.language FROM countrylanguage c INNER JOIN country ctry ON c.countrycode = ctry.code WHERE ctry.governmentform = 'Republic' GROUP BY c.language HAVING COUNT(DISTINCT c.countrycode) = 1
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
nhard pred: SELECT language  FROM countrylanguage  WHERE isofficial = 'T'  AND countrycode IN (     SELECT code      FROM country      WHERE governmentform = 'Republic'     AND code IN (         SELECT countrycode          FROM countrylanguage          GROUP BY countrycode          HAVING COUNT(*) = 1     ) )
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
nhard pred: SELECT city.name  FROM city  JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode  WHERE countrylanguage.language = 'English'  ORDER BY city.population DESC  LIMIT 1
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:257
extra pred: SELECT city.name FROM city INNER JOIN countrylanguage ON city.countrycode = countrylanguage.countrycode WHERE countrylanguage.language = 'English' ORDER BY city.population DESC LIMIT 1
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
nextra pred: SELECT country.name, country.population, country.lifeexpectancy FROM country WHERE country.continent = 'Asia' ORDER BY country.surfacearea DESC LIMIT 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
nhard pred: SELECT AVG(lifeexpectancy)  FROM country  WHERE code IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English' AND isofficial = 'F' )
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
nextra pred: SELECT AVG(lifeexpectancy)  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English'      AND isofficial = 'T' )
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
nextra pred: SELECT SUM(population)  FROM country  WHERE code NOT IN (     SELECT DISTINCT countrycode      FROM countrylanguage      WHERE language = 'English'      AND isofficial = 'T' )
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
neval_err_num:258
extra pred: SELECT SUM(c.population) FROM country c LEFT JOIN countrylanguage cl ON c.code = cl.countrycode WHERE cl.language <> 'English' OR cl.language IS NULL
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
nextra pred: SELECT SUM(population)  FROM country  WHERE code NOT IN (     SELECT countrycode      FROM countrylanguage      WHERE language = 'English'      AND isofficial = 'T' )
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
nmedium pred: SELECT countrylanguage.language  FROM countrylanguage  JOIN country ON countrylanguage.countrycode = country.code  WHERE country.headofstate = 'beatrix'
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
nmedium pred: SELECT language FROM countrylanguage WHERE countrycode IN (     SELECT code     FROM country     WHERE headofstate = 'Beatrix' ) AND isofficial = 'T';
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:259
medium pred: SELECT COUNT(DISTINCT cl.language) AS total_languages FROM countrylanguage cl JOIN country c ON c.code = cl.countrycode WHERE c.indepyear < 1930 AND cl.isofficial = TRUE
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
nhard pred: SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
nhard pred: SELECT name  FROM country  WHERE surfacearea > (SELECT MAX(surfacearea) FROM country WHERE continent = 'Europe')
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
nextra pred: SELECT code, name FROM country WHERE continent = 'Africa'  AND population < (SELECT MIN(population) FROM country WHERE continent = 'Asia')
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
neval_err_num:260
extra pred: SELECT country1.name FROM country AS country1 WHERE country1.continent = 'Asia' AND country1.population > ALL (     SELECT country2.population     FROM country AS country2     WHERE country2.continent = 'Africa' )
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
nhard pred: SELECT country.code FROM country WHERE country.code NOT IN     (SELECT countrylanguage.countrycode     FROM countrylanguage     WHERE countrylanguage.language = 'English'     AND countrylanguage.isofficial = 'T')
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
nhard pred: SELECT country.code FROM country WHERE country.code NOT IN (     SELECT countrycode     FROM countrylanguage     WHERE language = 'English' )
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:261
easy pred: SELECT DISTINCT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> 'English'
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neval_err_num:262
easy pred: SELECT DISTINCT country.code  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language <> 'English'
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neval_err_num:263
hard pred: SELECT code FROM country WHERE code NOT IN (     SELECT countrycode FROM countrylanguage     WHERE language = 'English' ) AND governmentform <> 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:264
hard pred: SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language <> 'English' AND country.governmentform <> 'Republic'
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:265
extra pred: SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language != 'English' AND countrylanguage.isofficial = 'F' ```
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:266
extra pred: SELECT city.name  FROM city  JOIN country ON city.countrycode = country.code  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Europe'  AND countrylanguage.language <> 'English'  AND countrylanguage.isofficial <> 'T'
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:267
hard pred: SELECT DISTINCT city.name  FROM city  INNER JOIN country ON city.countrycode = country.code  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.continent = 'Asia'  AND countrylanguage.language = 'Chinese'  AND countrylanguage.isofficial = 'T'
hard gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
nmedium pred: SELECT country.name, country.indepyear, country.surfacearea FROM country WHERE country.population = (SELECT MIN(population) FROM country)
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
nmedium pred: SELECT population, name, headofstate FROM country WHERE surfacearea = (     SELECT MAX(surfacearea)     FROM country )
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
nmedium pred: SELECT country.name, country.population, country.headofstate  FROM country  WHERE country.surfacearea = (SELECT MAX(surfacearea) FROM country)
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:268
medium pred: SELECT country.name, COUNT(countrylanguage.language) AS number_of_languages FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) >= 3
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:269
medium pred: SELECT country.name, COUNT(countrylanguage.language) AS language_count FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode GROUP BY country.name HAVING COUNT(countrylanguage.language) > 2
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:270
extra pred: SELECT district, COUNT(*) AS num_cities FROM city WHERE population > (SELECT AVG(population) FROM city) GROUP BY district
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:271
medium pred: SELECT governmentform, SUM(population) as total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:272
medium pred: SELECT governmentform, SUM(population) AS total_population FROM country WHERE lifeexpectancy > 72 GROUP BY governmentform
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:273
medium pred: SELECT continent, AVG(lifeexpectancy) AS average_life_expectancy, SUM(population) AS total_population FROM country WHERE AVG(lifeexpectancy) < 72 GROUP BY continent
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:274
medium pred: SELECT country.continent, SUM(country.population) AS total_population, AVG(country.lifeexpectancy) AS average_life_expectancy  FROM country  GROUP BY country.continent  HAVING average_life_expectancy < 72
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:275
hard pred: SELECT SUM(country.population) AS total_population, AVG(country.surfacearea) AS average_area FROM country WHERE country.continent = 'North America' AND country.surfacearea > 3000
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
neval_err_num:276
hard pred: SELECT SUM(c.population) AS total_population, AVG(c.surfacearea) AS average_surface_area FROM country c WHERE c.continent = 'North America' AND c.surfacearea > 3000;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
neval_err_num:277
hard pred: SELECT language FROM countrylanguage GROUP BY language HAVING COUNT(DISTINCT countrycode) = (     SELECT MAX(country_count)     FROM (         SELECT COUNT(DISTINCT countrycode) AS country_count         FROM countrylanguage         GROUP BY language     ) )
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT language  FROM countrylanguage  GROUP BY language  HAVING COUNT(DISTINCT countrycode) = (SELECT COUNT(DISTINCT countrycode)                                        FROM countrylanguage                                        GROUP BY countrycode                                        ORDER BY COUNT(*) DESC                                        LIMIT 1)
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT country.name, countrylanguage.language FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.percentage = (SELECT MAX(percentage) FROM countrylanguage GROUP BY countrycode) ORDER BY country.name ASC;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:278
medium pred: SELECT country.code, countrylanguage.language  FROM country  JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE country.language_percentage = (SELECT MAX(percentage) FROM countrylanguage)  GROUP BY country.code
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
nextra pred: SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND percentage = (   SELECT MAX(percentage) FROM countrylanguage WHERE language = 'Spanish' )
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nextra pred: SELECT COUNT(*) FROM countrylanguage WHERE language = 'Spanish' AND percentage > 50
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:279
medium pred: SELECT country.code  FROM country  INNER JOIN countrylanguage ON country.code = countrylanguage.countrycode  WHERE countrylanguage.language = 'Spanish'  ORDER BY countrylanguage.percentage DESC  LIMIT 1
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nmedium pred: SELECT country.code FROM country JOIN countrylanguage ON country.code = countrylanguage.countrycode WHERE countrylanguage.language = 'Spanish' AND countrylanguage.percentage > 50
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:280
easy pred: SELECT COUNT(*) AS count FROM conductor
easy gold: SELECT count(*) FROM conductor
neval_err_num:281
easy pred: SELECT name  FROM conductor  WHERE nationality <> 'usa'
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
neval_err_num:282
easy pred: SELECT name FROM conductor WHERE nationality <> "usa"
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
neval_err_num:283
medium pred: SELECT MAX(share), MIN(share) FROM performance WHERE type <> 'live final'
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:284
medium pred: SELECT MAX(share), MIN(share)  FROM performance WHERE type <> 'live final'
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:285
medium pred: SELECT c.name  FROM conductor c  ORDER BY c.year_of_work DESC  LIMIT 1;
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
nmedium pred: SELECT conductor.name  FROM conductor  WHERE conductor.year_of_work = (     SELECT MAX(year_of_work)      FROM conductor )
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
neval_err_num:286
medium pred: SELECT c.name  FROM conductor c  JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.conductor_id  HAVING COUNT(DISTINCT o.orchestra_id) > 1
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
nmedium pred: SELECT conductor.name FROM conductor JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id GROUP BY conductor.name HAVING COUNT(DISTINCT orchestra.orchestra_id) > 1
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
neval_err_num:287
extra pred: SELECT c.name FROM conductor c JOIN orchestra o ON c.conductor_id = o.conductor_id GROUP BY c.name HAVING COUNT(DISTINCT o.orchestra_id) = (     SELECT COUNT(DISTINCT o2.orchestra_id)     FROM conductor c2     JOIN orchestra o2 ON c2.conductor_id = o2.conductor_id     GROUP BY c2.conductor_id     ORDER BY COUNT(DISTINCT o2.orchestra_id) DESC     LIMIT 1 )
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: SELECT conductor.name  FROM conductor  JOIN orchestra ON conductor.conductor_id = orchestra.conductor_id  GROUP BY conductor.name  ORDER BY COUNT(orchestra.orchestra_id) DESC  LIMIT 1
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:288
medium pred: SELECT record_company, COUNT(orchestra_id) AS number_of_orchestras FROM orchestra GROUP BY record_company
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
neval_err_num:289
medium pred: SELECT record_company, COUNT(DISTINCT orchestra_id) AS num_orchestras FROM orchestra GROUP BY record_company;
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
neval_err_num:290
medium pred: SELECT major_record_format, COUNT(*) AS count FROM orchestra GROUP BY major_record_format ORDER BY count ASC;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:291
medium pred: SELECT major_record_format, COUNT(*) AS frequency FROM orchestra GROUP BY major_record_format ORDER BY frequency DESC
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:292
hard pred: SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(*) = (     SELECT MAX(record_count)     FROM (         SELECT COUNT(*) as record_count         FROM orchestra         GROUP BY record_company     ) AS counts )
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:293
hard pred: SELECT record_company FROM orchestra GROUP BY record_company HAVING COUNT(orchestra_id) = (     SELECT MAX(num_orchestras)     FROM (         SELECT record_company, COUNT(orchestra_id) as num_orchestras         FROM orchestra         GROUP BY record_company     ) as tmp )
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:294
hard pred: SELECT orchestra.name FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:295
hard pred: SELECT orchestra.orchestra_id, orchestra.orchestra FROM orchestra LEFT JOIN performance ON orchestra.orchestra_id = performance.orchestra_id WHERE performance.performance_id IS NULL;
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
nhard pred: SELECT orchestra.record_company  FROM orchestra  WHERE orchestra.year_of_founded < 2003 OR orchestra.year_of_founded > 2003;
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
neval_err_num:296
medium pred: SELECT COUNT(DISTINCT orchestra_id)  FROM orchestra  WHERE major_record_format IN ('cd', 'dvd')
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
neval_err_num:297
medium pred: SELECT orchestra.year_of_founded FROM orchestra JOIN (     SELECT orchestra_id     FROM performance     GROUP BY orchestra_id     HAVING COUNT(*) > 1 ) AS p ON orchestra.orchestra_id = p.orchestra_id
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
neval_err_num:298
medium pred: SELECT COUNT(*)  FROM highschooler  WHERE grade IN (9, 10)
medium gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
neval_err_num:299
medium pred: SELECT grade, COUNT(*) as num_highschoolers FROM highschooler GROUP BY grade
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
neval_err_num:300
hard pred: SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(*) = (     SELECT MAX(count)     FROM (         SELECT COUNT(*) AS count         FROM highschooler         GROUP BY grade     ) AS counts )
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT grade  FROM highschooler  GROUP BY grade  ORDER BY COUNT(id) DESC  LIMIT 1
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
neval_err_num:301
easy pred: SELECT grade FROM highschooler GROUP BY grade HAVING COUNT(student_id) >= 4
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
neval_err_num:302
medium pred: SELECT highschooler.id AS student_id, COUNT(friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
neval_err_num:303
medium pred: SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
neval_err_num:304
medium pred: SELECT highschooler.name, COUNT(friend.friend_id) AS number_of_friends FROM highschooler JOIN friend ON highschooler.id = friend.student_id GROUP BY highschooler.name
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:305
medium pred: SELECT highschooler.name, COUNT(friend.friend_id) AS friend_count FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.name ORDER BY friend_count DESC;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:306
extra pred: SELECT highschooler.name FROM highschooler WHERE highschooler.id IN (   SELECT friend.student_id   FROM friend   GROUP BY friend.student_id   HAVING COUNT(friend.friend_id) = (     SELECT MAX(friendCount.count)     FROM (       SELECT friend.student_id, COUNT(friend.friend_id) AS count       FROM friend       GROUP BY friend.student_id     ) friendCount   ) )
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:307
extra pred: SELECT h.name FROM highschooler h JOIN friend f ON f.student_id = h.id GROUP BY h.name ORDER BY COUNT(f.friend_id) DESC LIMIT 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(friend.friend_id) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
nmedium pred: SELECT highschooler.name FROM highschooler JOIN friend ON friend.student_id = highschooler.id GROUP BY highschooler.id HAVING COUNT(friend.friend_id) >= 3
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
nhard pred: SELECT highschooler.name  FROM highschooler  JOIN friend ON friend.friend_id = highschooler.id  WHERE friend.student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
nhard pred: SELECT highschooler.name FROM highschooler JOIN friend ON friend.friend_id = highschooler.id WHERE highschooler.name = 'kyle'
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
nmedium pred: SELECT COUNT(*) FROM friend WHERE student_id = (     SELECT id FROM highschooler WHERE name = 'kyle' )
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
nmedium pred: SELECT COUNT(*)  FROM friend  WHERE student_id = (SELECT id FROM highschooler WHERE name = 'Kyle')
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
nhard pred: SELECT id FROM highschooler WHERE id NOT IN (SELECT student_id FROM friend)
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
neval_err_num:308
hard pred: SELECT highschooler.id FROM highschooler LEFT JOIN friend ON friend.student_id = highschooler.id WHERE friend.friend_id IS NULL
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
nhard pred: SELECT name  FROM highschooler WHERE id NOT IN (     SELECT student_id      FROM friend )
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
nhard pred: SELECT highschooler.name  FROM highschooler  WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
nhard pred: SELECT highschooler.id FROM highschooler JOIN friend ON friend.friend_id = highschooler.id AND friend.student_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.id IN (SELECT liked_id FROM likes)
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
nhard pred: SELECT highschooler.id FROM highschooler JOIN friend ON friend.student_id = highschooler.id JOIN likes ON likes.student_id = highschooler.id WHERE friend.friend_id = highschooler.id AND likes.liked_id = highschooler.id;
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:309
hard pred: SELECT highschooler.name FROM highschooler INNER JOIN friend ON friend.student_id = highschooler.id INNER JOIN likes ON likes.student_id = highschooler.id WHERE highschooler.id = friend.friend_id AND highschooler.id = likes.liked_id
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
neval_err_num:310
hard pred: SELECT h.name FROM highschooler h JOIN friend f ON f.student_id = h.id JOIN likes l ON l.student_id = h.id WHERE f.friend_id = h.id AND l.liked_id = h.id
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
neval_err_num:311
medium pred: SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
neval_err_num:312
medium pred: SELECT student_id, COUNT(*) AS num_likes FROM likes GROUP BY student_id
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
neval_err_num:313
medium pred: SELECT highschooler.name, COUNT(likes.liked_id) AS number_of_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:314
medium pred: SELECT highschooler.name, COUNT(likes.*) AS num_likes FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
nextra pred: SELECT highschooler.name FROM highschooler WHERE highschooler.id = (     SELECT student_id     FROM likes     GROUP BY student_id     ORDER BY COUNT(*) DESC     LIMIT 1 )
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT highschooler.name  FROM highschooler  WHERE highschooler.id IN(     SELECT likes.student_id      FROM likes      GROUP BY likes.student_id      ORDER BY COUNT(*) DESC      LIMIT 1 )
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT highschooler.name FROM highschooler JOIN likes ON highschooler.id = likes.student_id GROUP BY highschooler.name HAVING COUNT(likes.liked_id) >= 2;
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
nmedium pred: SELECT highschooler.name FROM highschooler JOIN likes ON likes.student_id = highschooler.id GROUP BY highschooler.name HAVING COUNT(likes.student_id) >= 2
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
nhard pred: SELECT highschooler.name FROM highschooler WHERE highschooler.grade > 5 AND highschooler.id IN (     SELECT friend.student_id     FROM friend     GROUP BY friend.student_id     HAVING COUNT(friend.friend_id) >= 2 )
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
neval_err_num:315
hard pred: SELECT highschooler.name FROM highschooler WHERE highschooler.grade > 5 AND (     SELECT COUNT(*)     FROM friend     WHERE friend.student_id = highschooler.id ) >= 2
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
nmedium pred: SELECT COUNT(*) FROM likes WHERE student_id = (SELECT id FROM highschooler WHERE name = 'kyle')
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
neval_err_num:316
hard pred: SELECT AVG(h.grade) FROM highschooler h WHERE h.id IN (     SELECT f.student_id FROM friend f     WHERE f.friend_id = h.id )
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
nhard pred: SELECT AVG(highschooler.grade) FROM highschooler WHERE highschooler.id IN (   SELECT friend.student_id   FROM friend )
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
nextra pred: SELECT MIN(grade)  FROM highschooler  WHERE id NOT IN  (SELECT student_id  FROM friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
nextra pred: SELECT MIN(highschooler.grade) FROM highschooler WHERE highschooler.id NOT IN (SELECT friend.student_id FROM friend)
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:317
hard pred: SELECT DISTINCT owners.state FROM owners INNER JOIN professionals ON owners.state = professionals.state
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
nhard pred: SELECT owners.state FROM owners JOIN professionals ON owners.state = professionals.state
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
nhard pred: SELECT AVG(age) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
nextra pred: SELECT professional_id, last_name, cell_number  FROM professionals  WHERE state = 'indiana' OR professional_id IN (    SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) > 2 )
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
nextra pred: SELECT professional_id, last_name, cell_number FROM professionals WHERE state = 'indiana' OR professional_id IN (SELECT professional_id FROM treatments GROUP BY professional_id HAVING COUNT(*) > 2)
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
neval_err_num:318
hard pred: SELECT d.name FROM dogs d JOIN treatments t ON d.dog_id = t.dog_id JOIN charges c ON t.charge_id = c.charge_id GROUP BY d.name HAVING SUM(c.charge_amount) <= 1000
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
nhard pred: SELECT dogs.name FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id WHERE dogs.dog_id NOT IN (     SELECT treatments.dog_id     FROM treatments     JOIN professionals ON treatments.professional_id = professionals.professional_id     JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code     WHERE treatments.cost_of_treatment > 1000 )
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
neval_err_num:319
hard pred: SELECT DISTINCT first_name FROM (     SELECT first_name FROM professionals     UNION     SELECT first_name FROM owners ) AS names WHERE first_name NOT IN (     SELECT name FROM dogs ) ORDER BY first_name;
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:320
hard pred: SELECT DISTINCT first_name  FROM (SELECT first_name FROM owners UNION SELECT first_name FROM professionals) AS names WHERE names.first_name NOT IN (SELECT name FROM dogs)
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
nextra pred: SELECT professionals.professional_id, professionals.role_code, professionals.email_address FROM professionals WHERE professionals.professional_id NOT IN (     SELECT treatments.professional_id     FROM treatments     )
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
nextra pred: SELECT professional_id, role_code, email_address FROM professionals WHERE professional_id NOT IN (     SELECT professional_id     FROM treatments )
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
nextra pred: SELECT owners.owner_id, owners.first_name, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id GROUP BY owners.owner_id, owners.first_name, owners.last_name ORDER BY COUNT(dogs.dog_id) DESC LIMIT 1;
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:321
extra pred: SELECT owners.owner_id, owners.first_name, owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  GROUP BY owners.owner_id, owners.first_name, owners.last_name  HAVING COUNT(dogs.dog_id) = (     SELECT MAX(dog_count)      FROM (         SELECT COUNT(dog_id) as dog_count          FROM dogs          GROUP BY owner_id     ) AS dog_counts )
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT professional_id, role_code, first_name FROM professionals WHERE professional_id IN (     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(*) >= 2 )
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
nmedium pred: SELECT professional_id, role_code, first_name  FROM professionals  WHERE professional_id IN      (SELECT professional_id       FROM treatments       GROUP BY professional_id       HAVING COUNT(*) >= 2)
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
nextra pred: SELECT breed_name FROM breeds WHERE breed_code = (   SELECT breed_code   FROM dogs   GROUP BY breed_code   ORDER BY COUNT(*) DESC   LIMIT 1 )
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT breed_name  FROM breeds  WHERE breed_code = (   SELECT breed_code    FROM dogs    GROUP BY breed_code    ORDER BY COUNT(*) DESC    LIMIT 1 )
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON dogs.owner_id = owners.owner_id JOIN treatments ON treatments.dog_id = dogs.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY COUNT(treatments.treatment_id) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT owners.owner_id, owners.last_name FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id GROUP BY owners.owner_id, owners.last_name ORDER BY SUM(treatments.cost_of_treatment) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT treatment_types.treatment_type_description FROM treatment_types WHERE treatment_types.treatment_type_code = (   SELECT treatments.treatment_type_code   FROM treatments   GROUP BY treatments.treatment_type_code   ORDER BY SUM(treatments.cost_of_treatment) ASC   LIMIT 1 )
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
neval_err_num:322
extra pred: SELECT treatment_types.treatment_type_description FROM treatment_types JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code GROUP BY treatment_types.treatment_type_description HAVING SUM(treatments.cost_of_treatment) = (   SELECT MIN(total_cost)   FROM (     SELECT treatment_types.treatment_type_description, SUM(treatments.cost_of_treatment) AS total_cost     FROM treatment_types     JOIN treatments ON treatment_types.treatment_type_code = treatments.treatment_type_code     GROUP BY treatment_types.treatment_type_description   ) AS total_costs )
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
neval_err_num:323
extra pred: SELECT owners.owner_id, owners.zip_code FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN treatments ON dogs.dog_id = treatments.dog_id JOIN charges ON treatments.charge_id = charges.charge_id GROUP BY owners.owner_id, owners.zip_code ORDER BY SUM(charges.charge_amount) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:324
extra pred: SELECT dogs.owner_id, owners.zip_code FROM dogs JOIN owners ON dogs.owner_id = owners.owner_id GROUP BY dogs.owner_id, owners.zip_code ORDER BY SUM( SELECT cost_of_treatment FROM treatments WHERE treatments.dog_id = dogs.dog_id ) DESC LIMIT 1
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
nmedium pred: SELECT professional_id, cell_number FROM professionals WHERE professional_id IN(     SELECT professional_id     FROM treatments     GROUP BY professional_id     HAVING COUNT(DISTINCT treatment_type_code) >= 2 )
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:325
medium pred: SELECT professionals.professional_id, professionals.cell_number  FROM professionals  INNER JOIN treatments ON treatments.professional_id = professionals.professional_id  GROUP BY professionals.professional_id  HAVING COUNT(DISTINCT treatments.treatment_type_code) >= 2
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
nextra pred: SELECT first_name, last_name FROM professionals WHERE professional_id IN (   SELECT professional_id   FROM treatments   WHERE cost_of_treatment < (     SELECT AVG(cost_of_treatment)     FROM treatments   ) )
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
neval_err_num:326
medium pred: SELECT t.date_of_treatment, p.first_name FROM treatments t JOIN professionals p ON t.professional_id = p.professional_id
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:327
medium pred: SELECT treatments.cost_of_treatment, treatment_types.treatment_type_description FROM treatments INNER JOIN treatment_types ON treatments.treatment_type_code = treatment_types.treatment_type_code
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
nmedium pred: SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
nmedium pred: SELECT owners.first_name, owners.last_name, sizes.size_description FROM owners JOIN dogs ON owners.owner_id = dogs.owner_id JOIN sizes ON dogs.size_code = sizes.size_code
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:328
extra pred: SELECT dogs.name, treatments.date_of_treatment FROM dogs INNER JOIN breeds ON dogs.breed_code = breeds.breed_code INNER JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = (     SELECT breed_name     FROM breeds     GROUP BY breed_name     ORDER BY COUNT(*) ASC     LIMIT 1 )
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
nextra pred: SELECT dogs.name, treatments.date_of_treatment FROM dogs JOIN breeds ON dogs.breed_code = breeds.breed_code JOIN treatments ON dogs.dog_id = treatments.dog_id WHERE breeds.breed_name = 'rarest' ORDER BY dogs.name ASC, treatments.date_of_treatment ASC;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:329
medium pred: SELECT owners.first_name, dogs.name FROM dogs INNER JOIN owners ON dogs.owner_id = owners.owner_id WHERE owners.state = 'virginia'
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
neval_err_num:330
medium pred: SELECT dogs.date_arrived, dogs.date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:331
medium pred: SELECT date_arrived, date_departed FROM dogs INNER JOIN treatments ON dogs.dog_id = treatments.dog_id
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
nextra pred: SELECT owners.last_name  FROM owners  WHERE owners.owner_id = dogs.owner_id  AND dogs.age = (SELECT MIN(dogs.age) FROM dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
nextra pred: SELECT owners.last_name  FROM owners  JOIN dogs ON owners.owner_id = dogs.owner_id  WHERE dogs.age = (SELECT MIN(age) FROM dogs)
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
neval_err_num:332
easy pred: SELECT COUNT(distinct(dog_id)) FROM treatments
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neasy pred: SELECT COUNT(*) FROM dogs JOIN treatments ON dogs.dog_id = treatments.dog_id
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neval_err_num:333
medium pred: SELECT first_name, last_name, email_address FROM owners WHERE UPPER(state) LIKE '%NORTH%'
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
nmedium pred: SELECT MAX(date_of_treatment)  FROM treatments;
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
nextra pred: SELECT COUNT(*) FROM owners WHERE owner_id NOT IN (SELECT DISTINCT owner_id FROM dogs)
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
nextra pred: SELECT COUNT(*)  FROM professionals  WHERE professional_id NOT IN (SELECT DISTINCT professional_id FROM treatments)
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
neval_err_num:334
easy pred: SELECT MAX(charge_amount) AS max_charge_amount  FROM charges
easy gold: SELECT max(charge_amount) FROM Charges
neval_err_num:335
medium pred: SELECT breed_name, size_description FROM breeds, sizes
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
neval_err_num:336
easy pred: SELECT name FROM singer WHERE citizenship <> 'france'
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"
neval_err_num:337
easy pred: SELECT name FROM singer WHERE citizenship <> 'French'
easy gold: SELECT Name FROM singer WHERE Citizenship != "France"
neval_err_num:338
medium pred: SELECT citizenship, COUNT(*) AS num_singers FROM singer GROUP BY citizenship;
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
neval_err_num:339
medium pred: SELECT citizenship, COUNT(*) AS count_singers FROM singer GROUP BY citizenship;
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
neval_err_num:340
hard pred: SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:341
hard pred: SELECT citizenship, COUNT(*) AS count FROM singer GROUP BY citizenship ORDER BY count DESC LIMIT 1;
hard gold: select citizenship from singer group by citizenship order by count(*) desc limit 1
neval_err_num:342
medium pred: SELECT citizenship, MAX(net_worth_millions) AS maximum_net_worth FROM singer GROUP BY citizenship;
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
neval_err_num:343
medium pred: SELECT citizenship, max(net_worth_millions) AS maximum_net_worth FROM singer GROUP BY citizenship
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
neval_err_num:344
medium pred: SELECT DISTINCT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id WHERE song.sales > 300000;
medium gold: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000
neval_err_num:345
medium pred: SELECT singer.name FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name HAVING COUNT(song.song_id) > 1;
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
nmedium pred: SELECT singer.name FROM singer JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.singer_id, singer.name HAVING COUNT(song.song_id) > 1
medium gold: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1
neval_err_num:346
medium pred: SELECT singer.name, SUM(song.sales) AS total_sales FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
neval_err_num:347
medium pred: SELECT singer.name, SUM(song.sales) AS total_sales FROM singer INNER JOIN song ON singer.singer_id = song.singer_id GROUP BY singer.name
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
nhard pred: SELECT DISTINCT citizenship FROM singer WHERE birth_year < 1945 AND birth_year > 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
nhard pred: SELECT DISTINCT citizenship  FROM singer  WHERE birth_year < 1945 AND birth_year > 1955
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
neval_err_num:348
medium pred: SELECT ref_property_types.property_type_description FROM properties INNER JOIN ref_property_types ON properties.property_type_code = ref_property_types.property_type_code WHERE properties.property_id = [property_id code];
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
neval_err_num:349
hard pred: SELECT property_name  FROM properties  WHERE property_type_code IN (   SELECT property_type_code    FROM ref_property_types    WHERE property_type_description IN ('house', 'apartment') )  AND room_count > 1
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
nn                    easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.621                0.406                0.333                0.307                0.429               
====================== EXACT MATCHING ACCURACY =====================
exact match          0.730                0.379                0.247                0.120                0.399               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.948                0.888                0.951                0.862                0.912               
select(no AGG)       0.952                0.895                0.951                0.874                0.918               
where                0.861                0.622                0.500                0.312                0.608               
where(no OP)         0.881                0.628                0.605                0.438                0.654               
group(no Having)     0.900                0.645                0.600                0.440                0.605               
group                0.800                0.387                0.500                0.440                0.474               
order                0.864                0.882                0.632                0.367                0.686               
and/or               1.000                0.973                0.958                0.928                0.970               
IUEN                 0.000                0.000                1.000                0.000                1.000               
keywords             0.932                0.796                0.640                0.644                0.777               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.802                0.567                0.563                0.452                0.604               
select(no AGG)       0.806                0.572                0.563                0.458                0.608               
where                0.806                0.615                0.457                0.213                0.548               
where(no OP)         0.824                0.621                0.553                0.298                0.590               
group(no Having)     0.450                0.150                0.154                0.139                0.170               
group                0.400                0.090                0.128                0.139                0.133               
order                0.864                0.400                0.218                0.139                0.312               
and/or               0.988                0.993                0.946                0.916                0.972               
IUEN                 0.000                0.000                0.048                0.000                0.026               
keywords             0.827                0.495                0.368                0.337                0.497               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.869                0.692                0.708                0.593                0.727               
select(no AGG)       0.873                0.698                0.708                0.601                0.732               
where                0.833                0.619                0.478                0.253                0.576               
where(no OP)         0.852                0.624                0.578                0.354                0.620               
group(no Having)     0.600                0.244                0.245                0.212                0.265               
group                0.533                0.146                0.204                0.212                0.207               
order                0.864                0.550                0.324                0.202                0.429               
and/or               0.994                0.983                0.952                0.922                0.971               
IUEN                 1.000                1.000                0.091                1.000                0.051               
keywords             0.876                0.610                0.467                0.443                0.606               
