
medium pred: SELECT name, country, age FROM singer ORDER BY age ASC;
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
neval_err_num:1
medium pred: SELECT AVG(age), MIN(age), MAX(age) FROM singer WHERE country = 'France' AND is_male = false;
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
nmedium pred: SELECT name, song_release_year FROM singer WHERE age = (SELECT min(age) FROM singer) ORDER BY name;
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
nmedium pred: SELECT name, song_release_year FROM singer WHERE age = (SELECT min(age) FROM singer) ORDER BY name;
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:2
medium pred: SELECT country, count(*) FROM singer GROUP BY country ORDER BY num_of_singers desc;
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
neval_err_num:3
medium pred: SELECT country, count(*) FROM singer GROUP BY country ORDER BY num_singers desc;
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
nhard pred: SELECT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name asc;
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
nhard pred: SELECT DISTINCT Song_Name FROM singer WHERE Age > (SELECT AVG(Age) FROM singer) ORDER BY Song_Name;
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
nmedium pred: SELECT max(capacity), avg(capacity) FROM stadium;
medium gold: select max(capacity), average from stadium
nmedium pred: SELECT name, capacity, highest, lowest, average FROM stadium ORDER BY name;
medium gold: select avg(capacity) ,  max(capacity) from stadium
nmedium pred: SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY average desc LIMIT 1);
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
nmedium pred: SELECT name, capacity FROM stadium WHERE stadium_id = (SELECT stadium_id FROM stadium ORDER BY average desc LIMIT 1);
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
neval_err_num:4
medium pred: SELECT count(*) FROM concert WHERE year in ('2014', '2015');
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
neval_err_num:5
medium pred: SELECT count(*) FROM concert WHERE year in ('2014', '2015');
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
neval_err_num:6
medium pred: SELECT name, count(concert_id) FROM stadium join concert on stadium_id = stadium_id GROUP BY name ORDER BY num_concerts desc;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:7
medium pred: SELECT name, count(concert_id) FROM stadium join concert on stadium_id = stadium_id GROUP BY name ORDER BY concert_count desc;
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:8
extra pred: SELECT name, capacity FROM stadium JOIN (SELECT stadium_id, count(*) FROM concert WHERE year >= '2014' GROUP BY stadium_id;
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:9
extra pred: SELECT name, capacity FROM stadium WHERE stadium_id in (SELECT stadium_id FROM concert WHERE year > '2013' GROUP BY stadium_id ORDER;
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
neval_err_num:10
hard pred: SELECT year, count(*) FROM concert GROUP BY year ORDER BY num_of_concerts desc LIMIT 1;
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:11
hard pred: SELECT year, count(*) FROM concert GROUP BY year ORDER BY num_concerts desc LIMIT 1;
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT DISTINCT country FROM singer WHERE age > 40 OR age < 30;
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
nhard pred: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert WHERE year = '2014');
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
nhard pred: SELECT name FROM stadium WHERE stadium_id not in (SELECT stadium_id FROM concert WHERE year = '2014');
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:12
medium pred: SELECT concert_ID, concert_name, theme, count(singer_id) FROM concert left join singer_in_concert on con;
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
neval_err_num:13
medium pred: SELECT concert_ID, concert_name, theme, count(singer_id) FROM concert join singer_in_concert on concert_;
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
neval_err_num:14
medium pred: SELECT name, count(concert_id) FROM singer left join singer_in_concert on singer_id = singer_id;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:15
medium pred: SELECT name, count(concert_id) FROM singer_in_concert join singer on singer_id = singer_id GROUP BY s;
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:16
hard pred: SELECT DISTINCT name FROM singer, singer_in_concert, concert WHERE singer_id = singer_id AND concert_id = concert_id;
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:17
hard pred: SELECT DISTINCT name FROM singer_in_concert join singer on singer_id = singer_id WHERE concert_id in (SELECT concert_id FROM concert;
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:18
medium pred: SELECT name, country FROM singer WHERE song_name ilike '%Hey%';
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:19
medium pred: SELECT name, country FROM singer WHERE song_name ilike '%Hey%' ORDER BY name;
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:20
extra pred: SELECT DISTINCT name, location FROM stadium WHERE stadium_id in (SELECT stadium_id FROM concert WHERE year = '2014' or year = '2015;
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
neval_err_num:21
extra pred: SELECT DISTINCT name, location FROM stadium WHERE stadium_id in (SELECT stadium_id FROM concert WHERE year = '2014' or year = '2015;
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
nhard pred: SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity = (SELECT max(capacity) FROM stadium));
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
nhard pred: SELECT count(*) FROM concert WHERE stadium_id = (SELECT stadium_id FROM stadium WHERE capacity = (SELECT max(capacity) FROM stadium));
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
nmedium pred: SELECT min(weight) FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets);
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
nmedium pred: SELECT min(weight) FROM pets WHERE pet_age = (SELECT min(pet_age) FROM pets);
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:22
medium pred: SELECT pet_type, max(weight) FROM pets GROUP BY pet_type ORDER BY max_weight DESC;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
neval_err_num:23
medium pred: SELECT pet_type, max(weight) FROM pets GROUP BY pet_type ORDER BY max_weight DESC;
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
nmedium pred: SELECT count(*) FROM has_pet WHERE stuid in (select stuid from student where age > 20);
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:24
medium pred: SELECT count(*) FROM has_pet hp join student s on stuid = stuid WHERE age > 20;
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:25
hard pred: SELECT count(*) FROM (SELECT DISTINCT petid FROM has_pet join student on stuid = stuid WHERE sex = 'F' and pettype = 'dog');
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:26
hard pred: SELECT count(*) FROM has_pet join student on stuid = stuid join pets on petid = petid WHERE sex = 'F' and pet;
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:27
easy pred: SELECT COUNT(DISTINCT pet_type) FROM pets;
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:28
easy pred: SELECT COUNT(DISTINCT pet_type) FROM pets;
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:29
extra pred: SELECT fname FROM student WHERE stuid in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pets WHERE pettype = 'cat' or pets;
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:30
extra pred: SELECT first_name FROM student WHERE stuid in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pets WHERE pettype = 'cat' or;
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:31
extra pred: SELECT fname FROM student WHERE stuid in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pets WHERE pettype = 'cat' or ;
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
nextra pred: SELECT DISTINCT fname FROM student join has_pet on stuid = stuid join pets on petid = petid WHERE pettype = 'cat' or pettype = 'dog';
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
nextra pred: SELECT major, age FROM student WHERE stuid not in (select stuid from has_pet where petid = 1);
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
nextra pred: SELECT major, age FROM student WHERE stuid not in (select stuid from has_pet where petid = 1) ORDER BY major asc, age asc;
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
nhard pred: SELECT stuid FROM student WHERE stuid not in (SELECT stuid FROM has_pet WHERE petid = (SELECT petid FROM pets WHERE pettype = 'cat'));
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:32
hard pred: SELECT stuid FROM student WHERE stuid not in (SELECT stuid FROM has_pet WHERE petid in (SELECT petid FROM pet WHERE pettype = 'cat'));
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:33
extra pred: SELECT first_name, age FROM student WHERE stuid NOT IN (SELECT stuid FROM has_pet WHERE petid = 1) and stuid NOT IN (SELECT stuid;
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:34
extra pred: SELECT first_name FROM student WHERE stuid not in (select stuid from has_pet where petid in (select petid from pets where pettype = 'dog'));
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:35
medium pred: SELECT pet_type, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY pet_type asc, weight asc;
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:36
medium pred: SELECT pet_type, weight FROM pets WHERE pet_age = (SELECT MIN(pet_age) FROM pets) ORDER BY pet_type asc;
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
nmedium pred: SELECT petid, weight FROM pets WHERE pet_age < 1;
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
neval_err_num:37
medium pred: SELECT pet_type, avg(pet_age), max(pet_age) FROM pets GROUP BY pet_type ORDER BY avg_age desc, max_age desc;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:38
medium pred: SELECT pet_type, avg(pet_age), max(pet_age) FROM pets GROUP BY pet_type ORDER BY avg_age desc;
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:39
medium pred: SELECT pet_type, avg(weight) FROM pets GROUP BY pet_type ORDER BY avg_weight desc;
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:40
medium pred: SELECT pet_type, avg(weight) FROM pets GROUP BY pet_type ORDER BY avg_weight desc;
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:41
medium pred: SELECT first_name, age FROM student WHERE stuid in (SELECT stuid FROM has_pet);
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:42
medium pred: SELECT DISTINCT first_name, age FROM student WHERE stuid in (SELECT stuid FROM has_pet);
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:43
medium pred: SELECT stuid, count(petid) FROM student left join has_pet on stuid = stuid GROUP BY stuid HAVING count(petid) > 0;
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
neval_err_num:44
medium pred: SELECT stuid, count(petid) FROM student left join has_pet on stuid = stuid GROUP BY stuid HAVING count(petid) > 0 ORDER BY;
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
neval_err_num:45
medium pred: WITH student_with_multiple_pets SELECT stuid, fname, gender FROM student JOIN has_pet on stuid = stuid GROUP BY stuid, fname, gender HAV;
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:46
medium pred: SELECT DISTINCT first_name, gender FROM student WHERE stuid in (SELECT stuid FROM has_pet GROUP BY stuid having count(*) > 1) ORDER BY first_name;
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
nhard pred: SELECT lname FROM student join has_pet on stuid = stuid join pets on petid = petid WHERE pet_age = 3;
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:47
hard pred: SELECT lname FROM student join has_pet on stuid = stuid join pets on petid = petid WHERE pet_age = 3 and pettype = 'cat' ORDER BY student;
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neasy pred: SELECT COUNT(DISTINCT continent) FROM continents;
easy gold: SELECT count(*) FROM CONTINENTS;
neval_err_num:48
medium pred: SELECT cont_id, continent_name, count(distinct country_id) FROM countries join continents on continent = cont_id GROUP BY cont_id, continent_;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:49
medium pred: SELECT cont_id, continent_name, count(distinct country_id) FROM continents LEFT JOIN countries ON cont_id = continent GROUP BY cont_id, continent;
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:50
medium pred: SELECT maker, id, count(*) FROM car_makers LEFT JOIN model_list ON id = maker GROUP BY maker, id ORDER;
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:51
medium pred: SELECT maker, id, count(model) FROM car_makers left join model_list on id = maker GROUP BY maker, car_;
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:52
hard pred: SELECT model FROM car_names JOIN cars_data on makeid = id WHERE horsepower = (SELECT min(horsepower) FROM cars_data) ORDER BY car_names;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
nhard pred: SELECT model FROM car_names JOIN cars_data ON makeid = id ORDER BY horsepower::float asc LIMIT 1;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:53
extra pred: WITH avg_weight SELECT avg(weight) FROM cars_data ) SELECT model FROM car_names, cars_data, avg_weight WHERE weight < avg_weight ORDER;
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:54
extra pred: WITH avg_weight SELECT avg(weight) FROM cars_data ) SELECT model FROM car_names, cars_data WHERE weight < (SELECT avg_weight FROM avg_weight);
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:55
extra pred: SELECT DISTINCT maker FROM car_makers, car_names, cars_data WHERE id = makeid AND makeid = id AND year = 1970;
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:56
extra pred: SELECT DISTINCT maker FROM car_makers, car_names, cars_data WHERE id = makeid AND makeid = id AND year = 1970;
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:57
extra pred: SELECT maker, year FROM car_makers join car_names on id = makeid join cars_data on makeid = id WHERE year = (SELECT;
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
nextra pred: SELECT maker, year FROM car_makers join cars_data on id = id WHERE year = (SELECT min(year) FROM cars_data) ORDER BY ;
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
neval_err_num:58
hard pred: SELECT DISTINCT model FROM car_names WHERE makeid IN (SELECT modelid FROM model_list WHERE maker IN (SELECT id FROM car_makers WHERE car_mak;
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
neval_err_num:59
hard pred: SELECT DISTINCT model FROM car_names WHERE makeid in (SELECT modelid FROM model_list WHERE maker in (SELECT id FROM car_makers WHERE car_mak;
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
nhard pred: SELECT continent, count(id) FROM car_makers join countries on country = countryid join continents on continent = contid GROUP BY continent;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:60
hard pred: SELECT continent, count(id) FROM continents left join countries on contid = continent left join car_makers on countryid = country GROUP BY continents;
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:61
extra pred: SELECT country_name FROM countries left join car_makers on country_id = country_id GROUP BY country_name ORDER BY count(*) desc nulls last;
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:62
extra pred: SELECT countryname FROM countries left join car_makers on countryid = country GROUP BY countryname ORDER BY count(*) desc LIMIT 1;
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:63
medium pred: SELECT maker, fullname, count(model) FROM car_makers join car_names on id = makeid GROUP BY maker, car_mak;
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
neval_err_num:64
medium pred: SELECT maker, id, fullname, count(model) FROM car_makers join car_names on id = makeid GROUP BY car_;
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
neval_err_num:65
medium pred: SELECT accelerate FROM cars_data join car_names on id = makeid join car_makers on makeid = id WHERE maker = 'amc' and car_mak;
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
nmedium pred: SELECT accelerate FROM cars_data join car_names on id = makeid join model_list on makeid = modelid join car_makers on maker = id;
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
nmedium pred: SELECT count(*) FROM car_makers WHERE country = 'France';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
nmedium pred: SELECT count(*) FROM car_makers WHERE country = 'France';
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
neval_err_num:66
hard pred: SELECT count(*) FROM car_names cn JOIN model_list ml ON makeid = modelid JOIN car_makers cm ON maker = id JOIN countries c ON country = countryid WHERE;
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:67
hard pred: SELECT COUNT(*) FROM car_names cn JOIN model_list ml ON makeid = modelid JOIN car_makers cm ON maker = id JOIN countries c ON country = countryid WHERE;
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:68
easy pred: SELECT avg(mpg)::float FROM cars_data WHERE cylinders = 4;
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
neval_err_num:69
easy pred: SELECT AVG(mpg)::numeric FROM cars_data WHERE cylinders = 4;
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
nmedium pred: SELECT weight FROM cars_data WHERE cylinders = 8 AND year = 1974 ORDER BY weight ASC LIMIT 1;
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
nmedium pred: SELECT weight FROM cars_data WHERE cylinders = 8 AND year = 1974 ORDER BY weight ASC LIMIT 1;
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
neval_err_num:70
medium pred: SELECT DISTINCT maker, model FROM car_makers, car_names WHERE id = makeid;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
nmedium pred: SELECT maker, model FROM car_makers join car_names on id = makeid ORDER BY maker, model;
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
nmedium pred: SELECT countryname, countryid FROM countries WHERE countryid in (SELECT country FROM car_makers) ORDER BY countryname;
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
nmedium pred: SELECT countryname, countryid FROM countries WHERE countryid in (SELECT country FROM car_makers) ORDER BY countryname;
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:71
easy pred: SELECT count(*) FROM cars_data WHERE horsepower::float > 150;
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
neval_err_num:72
easy pred: SELECT count(*) FROM cars_data WHERE horsepower::float > 150;
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
nmedium pred: SELECT year, avg(weight) FROM cars_data GROUP BY year ORDER BY year;
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
nmedium pred: SELECT year, avg(weight) FROM cars_data GROUP BY year ORDER BY year;
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:73
extra pred: WITH country_count SELECT countryname, countryid, count(*) FROM countries WHERE continent = 1 GROUP BY countryname, countryid ORDER BY count desc ) SELECT countryname FROM;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:74
extra pred: SELECT countryname FROM countries WHERE continent = 2 AND EXISTS (SELECT 1 FROM car_makers WHERE country = countryid and maker = countryid) GROUP BY country;
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:75
extra pred: SELECT horsepower, maker FROM cars_data join car_names on id = makeid join car_makers on makeid = id WHERE cyl;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
nextra pred: SELECT model, horsepower FROM car_names join cars_data on makeid = id WHERE cylinders = 3 ORDER BY horsepower desc LIMIT 1;
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:76
hard pred: SELECT model FROM car_names JOIN cars_data ON makeid = id WHERE mpg = (SELECT MAX(mpg) FROM cars_data) ORDER BY car_names;
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
neval_err_num:77
easy pred: SELECT AVG(horsepower::float) FROM cars_data WHERE year < 1980;
easy gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
neval_err_num:78
easy pred: SELECT AVG(horsepower::float) FROM cars_data WHERE year < 1980;
easy gold: select avg(horsepower) from cars_data where year  <  1980;
neval_err_num:79
medium pred: SELECT avg(edispl) FROM cars_data WHERE model = 'volvo';
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
neval_err_num:80
medium pred: SELECT cylinders, max(accelerate) FROM cars_data GROUP BY cylinders ORDER BY max_accelerate desc;
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
neval_err_num:81
medium pred: SELECT cylinders, max(accelerate) FROM cars_data GROUP BY cylinders ORDER BY max_accelerate desc;
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
neval_err_num:82
hard pred: SELECT model, count(*) FROM car_names GROUP BY model ORDER BY version_count DESC LIMIT 1;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neval_err_num:83
hard pred: SELECT model, count(*) FROM car_names GROUP BY model ORDER BY num_versions DESC;
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neval_err_num:84
easy pred: SELECT count(*)Number of Cars with More than 4 Cylinders" FROM cars_data WHERE cylinders > 4;
easy gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
nmedium pred: SELECT count(*) FROM car_names WHERE make = (SELECT id FROM car_makers WHERE fullname = 'American Motor Company');
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
nmedium pred: SELECT count(*) FROM car_names WHERE make = (SELECT maker FROM car_makers WHERE maker = 'American Motor Company');
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
neval_err_num:85
medium pred: SELECT maker, id FROM car_makers JOIN model_list ON id = maker GROUP BY maker, id HAVING count(*) > 3 ORDER;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:86
medium pred: SELECT id, maker, fullname FROM car_makers JOIN model_list ON id = maker GROUP BY id, maker, car;
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:87
extra pred: SELECT DISTINCT model FROM car_makers join car_names on id = makeid WHERE (maker = 'General Motors' or maker = 'GM') or model in;
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:88
extra pred: SELECT DISTINCT model FROM car_names WHERE (make = 'General Motors' or model in (select model from model_list where maker in (select id from car_makers where;
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neasy pred: SELECT DISTINCT year FROM cars_data WHERE weight >= 3000 and weight <= 4000;
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neasy pred: SELECT DISTINCT year FROM cars_data WHERE weight < 4000 OR weight > 3000;
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
nmedium pred: SELECT horsepower FROM cars_data WHERE accelerate = (SELECT max(accelerate) FROM cars_data) ORDER BY horsepower desc;
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
neval_err_num:89
extra pred: SELECT cylinders FROM cars_data join car_names on id = makeid join model_list on makeid = modelid WHERE model = 'volvo' ORDER BY cars_;
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
nextra pred: SELECT cylinders FROM cars_data join car_names on id = makeid join model_list on makeid = modelid join car_makers on maker = id;
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
nhard pred: SELECT count(*) FROM cars_data WHERE Accelerate > (SELECT max(Accelerate) FROM cars_data);
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
nhard pred: SELECT count(*) FROM cars_data WHERE accelerate > (SELECT max(accelerate) FROM cars_data);
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
neval_err_num:90
medium pred: SELECT countryname, count(*) FROM countries left join car_makers on countryid = countryid GROUP BY countryname HAVING count(*) > 2 ORDER BY num_car_makers desc;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:91
medium pred: SELECT count(distinct country_name) FROM countries WHERE country_id in ( SELECT country FROM car_makers GROUP BY country HAVING count(id) >;
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
nextra pred: SELECT model, horsepower FROM cars_data join car_names on id = makeid WHERE cylinders = 4 ORDER BY horsepower desc nulls last;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
nextra pred: SELECT model FROM cars_data join car_names on id = makeid WHERE cylinders = 4 ORDER BY horsepower desc nulls last limit 1;
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:92
extra pred: SELECT makeid, maker FROM cars_data join car_names on id = makeid join car_makers on makeid = id WHERE horsepower;
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
neval_err_num:93
extra pred: SELECT id, maker FROM car_makers LEFT JOIN cars_data ON id = id WHERE horsepower is null or cylinders < 4;
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
nmedium pred: SELECT mpg FROM cars_data WHERE cylinders = 8 or year < 1980 ORDER BY mpg desc LIMIT 1;
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:94
medium pred: SELECT mpg FROM cars_data WHERE (cylinders = 8 or year < 1980) ORDER BY mpg desc LIMIT 1;
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:95
extra pred: SELECT model FROM car_names WHERE model not like 'Ford%' AND model not like 'Fiat%' AND model not like 'Honda%' AND model not like 'Toyota%' AND;
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
neval_err_num:96
extra pred: SELECT DISTINCT model FROM car_names WHERE model!= 'Ford' AND model!= 'Mustang' AND model!= 'Ranger' AND model!= 'Taurus' AND car_names;
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
nhard pred: SELECT countryname FROM countries WHERE countryid not in (SELECT country FROM car_makers) ORDER BY countryname;
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
nhard pred: SELECT countryname FROM countries WHERE countryid not in (select country from car_makers);
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
nextra pred: SELECT id, maker FROM car_makers WHERE id IN (SELECT maker FROM model_list GROUP BY maker HAVING count(*) >= 2) GROUP BY id,;
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
neval_err_num:97
extra pred: SELECT id, maker FROM car_makers left join (SELECT id, count(*) FROM car_makers join car_names on id = make;
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:98
extra pred: SELECT countryid, countryname FROM countries WHERE countryid in (SELECT country FROM car_makers WHERE maker = 'fiat' GROUP BY country having count(*) >;
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
neval_err_num:99
extra pred: SELECT countryid, countryname FROM countries WHERE (SELECT count(*) FROM car_makers WHERE country = countryid) > 3 or (SELECT count(*) FROM car_names WHERE model =;
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
nmedium pred: SELECT airline, abbreviation FROM airlines WHERE country = 'USA' ORDER BY airline asc;
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
nmedium pred: SELECT airline, abbreviation FROM airlines WHERE country = 'USA' ORDER BY airline;
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neasy pred: SELECT count(distinct airline) FROM airlines;
easy gold: SELECT count(*) FROM AIRLINES
nmedium pred: SELECT city, country FROM airports WHERE airportcode = 'ALTM';
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
nmedium pred: SELECT city, country FROM airports WHERE airportcode = 'ALTM';
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
neval_err_num:100
easy pred: SELECT count(*) FROM flights f JOIN airports a ON sourceairport = airportcode WHERE airportname = 'APG';
easy gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: SELECT count(*) FROM flights JOIN airports ON DestAirport = AirportCode WHERE AirportCode = 'ATO';
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
neval_err_num:101
medium pred: SELECT count(*) FROM flights f join airports a on sourceairport = airportcode WHERE city = 'Aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:102
medium pred: SELECT count(*) FROM flights f join airports a on sourceairport = airportcode WHERE city = 'Aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:103
medium pred: SELECT count(*) FROM flights f join airports a on dest_airport = airportcode WHERE city = 'Aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:104
medium pred: SELECT count(*) FROM flights f join airports a on dest_airport = airportcode WHERE city = 'Aberdeen';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:105
hard pred: SELECT count(*) FROM flights f1, airports a1, airports a2 WHERE sourceairport = airportcode AND city = 'Aberdeen' AND destairport = airportcode AND;
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
neval_err_num:106
hard pred: SELECT count(*) FROM flights f1, airports a1, airports a2 WHERE sourceairport = airportcode AND city = 'Aberdeen' AND destairport = airportcode AND;
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
nmedium pred: SELECT count(*) FROM flights WHERE airline = (SELECT uid FROM airlines WHERE airline = 'JetBlue Airways');
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
neval_err_num:107
medium pred: SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'Jetblue Airways';
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
neval_err_num:108
medium pred: SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' AND destairport = 'ASY';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
neval_err_num:109
medium pred: SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' and destairport = 'ASY';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
neval_err_num:110
medium pred: SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
neval_err_num:111
medium pred: SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' AND sourceairport = 'AHD';
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
neval_err_num:112
hard pred: SELECT count(*) FROM flights f join airlines a on airline = uid join airports ap on destairport = airportcode WHERE airline = 'United Airlines' and city = 'Aberdeen';
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
neval_err_num:113
hard pred: SELECT count(*) FROM flights f join airlines a on airline = uid WHERE airline = 'United Airlines' and destairport = 'ABERDEEN';
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
neval_err_num:114
extra pred: SELECT city, count(*) FROM flights join airports on destairport = airportcode GROUP BY city ORDER BY num_flights desc LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:115
extra pred: SELECT city, count(*) FROM flights join airports on destairport = airportcode GROUP BY city ORDER BY frequency DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:116
extra pred: SELECT city, count(*) FROM flights join airports on destairport = airportcode GROUP BY city ORDER BY num_flights DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:117
extra pred: SELECT city, count(*) FROM flights JOIN airports ON sourceairport = airportcode GROUP BY city ORDER BY frequency DESC LIMIT 1;
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:118
extra pred: SELECT AirportCode FROM airports LEFT JOIN (SELECT SourceAirport, count(*) FROM flights GROUP BY SourceAirport) ON AirportCode = SourceAirport ORDER;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
neval_err_num:119
extra pred: SELECT airportcode FROM airports LEFT JOIN (SELECT sourceairport, count(*) FROM flights GROUP BY sourceairport) ON airportcode = sourceairport ORDER BY ;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
neval_err_num:120
extra pred: WITH airport_counts SELECT airportcode, count(*) FROM flights join airports on sourceairport = airportcode GROUP BY airportcode ORDER BY flight_count asc ) SELECT airport_;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:121
extra pred: SELECT airportcode FROM airports LEFT JOIN (SELECT sourceairport, count(*) FROM flights GROUP BY sourceairport) ON airportcode = sourceairport WHERE flight;
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:122
extra pred: SELECT airline, count(*) FROM flights join airlines on airline = uid GROUP BY airline ORDER BY num_flights DESC LIMIT 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:123
extra pred: SELECT airline, count(*) FROM flights join airlines on airline = uid GROUP BY airline ORDER BY flight_count DESC LIMIT 1;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:124
extra pred: SELECT abbreviation, country FROM airlines LEFT JOIN (SELECT airline, count(*) FROM flights GROUP BY airline) ON uid = airline ORDER;
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:125
extra pred: WITH airline_counts SELECT abbreviation, country, count(*) FROM airlines join flights on uid = airline GROUP BY abbreviation, country ORDER BY flight_count asc;
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:126
medium pred: SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND airportcode = sourceairport AND airportcode = 'AHD';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:127
medium pred: SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND airportcode = sourceairport AND airportcode = 'AHD';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:128
medium pred: SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND airportcode = destairport AND airportcode = 'AHD';
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
neval_err_num:129
extra pred: SELECT DISTINCT airline FROM airlines, flights WHERE uid = airline AND (sourceairport = 'APG' or sourceairport = 'CVO') ORDER BY airline asc;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
nextra pred: SELECT DISTINCT airline FROM flights WHERE sourceairport in (SELECT airportcode FROM airports WHERE airportname = 'APG' or airportname = 'CVO') ORDER BY airline;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:130
extra pred: SELECT DISTINCT airline FROM airlines, flights WHERE uid = airline AND sourceairport = 'CVO' AND destairport!= 'APG';
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:131
extra pred: SELECT DISTINCT airline FROM airlines, flights, airports WHERE uid = airline AND sourceairport = 'CVO' AND destairport!= 'APG' AND airportcode = dest;
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:132
medium pred: SELECT DISTINCT airline FROM airlines, flights WHERE uid = airline GROUP BY airline HAVING count(*) >= 10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
nmedium pred: SELECT airline FROM airlines join flights on uid = airline GROUP BY airline HAVING count(*) >= 10;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
neval_err_num:133
medium pred: SELECT airline FROM airlines LEFT JOIN (SELECT airline, count(*) FROM flights GROUP BY airline) ON uid = airline WHERE flight;
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
nmedium pred: SELECT flightno FROM flights join airlines ON airline = uid WHERE airline = 'United Airlines';
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
nmedium pred: SELECT flightno FROM flights join airlines ON airline = uid WHERE airline = 'United Airlines';
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
neasy pred: SELECT flightno FROM flights JOIN airports ON sourceairport = airportcode WHERE airportname = 'APG';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: SELECT flightno FROM flights JOIN airports ON sourceairport = airportcode WHERE airportname = 'APG';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: SELECT flightno FROM flights join airports ON destairport = airportcode WHERE airportname = 'APG';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neasy pred: SELECT flightno FROM flights JOIN airports ON destairport = airportcode WHERE airportname = 'APG';
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neval_err_num:134
hard pred: SELECT count(*) FROM flights f join airports a on dest_airport = airportcode WHERE city in ('Aberdeen', 'Abilene');
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
neval_err_num:135
hard pred: SELECT count(*) FROM flights f join airports a1 on sourceairport = airportcode join airports a2 on destairport = airportcode WHERE (city = 'Aberdeen' or city =;
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
neval_err_num:136
hard pred: SELECT AirportName FROM airports LEFT JOIN flights ON AirportCode = SourceAirport WHERE SourceAirport is null and DestAirport is null;
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
nhard pred: SELECT DISTINCT AirportCode FROM airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM flights UNION SELECT DestAirport FROM flights);
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
neasy pred: SELECT name, age FROM employee ORDER BY age asc;
easy gold: SELECT name FROM employee ORDER BY age
neasy pred: SELECT name, age FROM employee ORDER BY age asc;
easy gold: SELECT name FROM employee ORDER BY age
neval_err_num:137
medium pred: SELECT city, count(*) FROM employee GROUP BY city ORDER BY number_of_employees desc;
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city
neval_err_num:138
medium pred: SELECT city, count(*) FROM employee GROUP BY city ORDER BY count desc;
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city
neval_err_num:139
medium pred: SELECT city FROM (SELECT city, count(*) FROM employee WHERE age < 30 GROUP BY city) WHERE count > 1;
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
neval_err_num:140
medium pred: SELECT location, count(*) FROM shop GROUP BY location ORDER BY number_of_shops DESC;
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
neval_err_num:141
medium pred: SELECT location, count(*) FROM shop GROUP BY location ORDER BY num_shops DESC;
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
nmedium pred: SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
nmedium pred: SELECT manager_name, district FROM shop WHERE number_products = (SELECT MAX(number_products) FROM shop);
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:142
hard pred: WITH avg_num_products SELECT avg(number_products) FROM shop ) SELECT name FROM shop WHERE number_products > (SELECT avg_num_products FROM avg_num_products);
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
neval_err_num:143
hard pred: WITH avg_num_products SELECT avg(number_products) FROM shop ) SELECT name FROM shop WHERE number_products > (SELECT avg_num_products FROM avg_num_products) ORDER BY;
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
nextra pred: SELECT name FROM employee join evaluation on employee_id = employee_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT name FROM employee join evaluation on employee_id = employee_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT name FROM employee join evaluation on employee_id = employee_id WHERE year_awarded = '2018' ORDER BY bonus desc LIMIT 1;
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
nhard pred: SELECT name FROM employee join evaluation on employee_id = employee_id WHERE bonus = (SELECT max(bonus) FROM evaluation) ORDER BY name asc;
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
neval_err_num:144
extra pred: WITH max_employees SELECT shop_id, name, count(*) FROM hiring join shop on shop_id = shop_id GROUP BY shop_id, name ORDER BY num_employees;
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:145
extra pred: WITH max_employees SELECT name, count(*) FROM shop JOIN hiring on shop_id = shop_id GROUP BY name ORDER BY num_employees desc limit 1 ) SELECT name;
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT name FROM shop WHERE shop_id not in (SELECT shop_id FROM hiring) ORDER BY name asc;
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
nhard pred: SELECT name FROM shop WHERE shop_id not in (SELECT shop_id FROM hiring) ORDER BY name asc;
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
neval_err_num:146
medium pred: SELECT shop_id, name, count(employee_id) FROM hiring join shop on shop_id = shop_id GROUP BY shop_id, name ORDER BY number_;
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
neval_err_num:147
medium pred: SELECT shop_id, name, count(employee_id) FROM shop left join hiring on shop_id = shop_id left join employee on employee_id = employee_id;
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
neval_err_num:148
easy pred: SELECT employee_id, name, age, city, start_from, is_full_time FROM hiring join employee on employee_id = employee_id ORDER BY employee;
easy gold: SELECT * FROM hiring
neval_err_num:149
easy pred: SELECT employee_id, name, age, city, start_from, is_full_time FROM hiring join employee on employee_id = employee_id ORDER BY employee;
easy gold: SELECT * FROM hiring
neval_err_num:150
hard pred: WITH less_than_3000SELECT district FROM shop WHERE number_products < 3000), more_than_10000SELECT district FROM shop WHERE number_products > 1000;
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
nhard pred: SELECT DISTINCT district FROM shop WHERE number_products < 3000 OR number_products > 10000;
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
nmedium pred: SELECT document_name, template_id FROM documents WHERE document_description like '%w%' ORDER BY document_name;
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
nmedium pred: SELECT document_name, template_id FROM documents WHERE document_description like '%w%' ORDER BY document_name;
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
neval_err_num:151
medium pred: SELECT count(*) FROM documents d WHERE template_id in (select template_id from templates t where template_type_code = 'PPT');
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
neval_err_num:152
medium pred: SELECT count(*) FROM documents d WHERE template_id in (select template_id from templates t where template_type_code = 'PPT');
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
neval_err_num:153
medium pred: SELECT template_id, count(document_id) FROM templates left join documents on template_id = template_id GROUP BY template_id ORDER BY number_of_documents desc;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
neval_err_num:154
medium pred: SELECT template_id, template_type_description, count(*) FROM templates join documents on template_id = template_id join ref_template_types on template_type_code = ;
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
nextra pred: SELECT template_id, template_type_code FROM templates join documents on template_id = template_id join ref_template_types on template_type_code = template_type_code GROUP BY;
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:155
extra pred: SELECT template_id, template_type_code FROM templates join ref_template_types on template_type_code = template_type_code GROUP BY template_id, template_type;
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:156
easy pred: WITH template_usage_count SELECT template_id, count(*) FROM templates JOIN documents ON template_id = template_id GROUP BY template_id HAVING count(*) > 1 ) SELECT template_usage_count;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:157
easy pred: WITH template_counts SELECT template_id, count(*) FROM templates JOIN documents on template_id = template_id GROUP BY template_id HAVING count(*) > 1 ) SELECT template_id FROM template;
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
nhard pred: SELECT DISTINCT template_id FROM templates WHERE template_id not in (SELECT template_id FROM documents);
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
nhard pred: SELECT DISTINCT template_id FROM templates WHERE template_id not in (SELECT template_id FROM documents);
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
nmedium pred: SELECT template_id, version_number, template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code;
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
nmedium pred: SELECT template_id, version_number, template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code;
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neval_err_num:158
easy pred: SELECT DISTINCT template_type_code FROM ref_template_types UNION ALL SELECT DISTINCT template_type_code FROM templates ORDER BY template_type_code;
easy gold: SELECT DISTINCT template_type_code FROM Templates
neasy pred: SELECT DISTINCT template_type_code FROM ref_template_types ORDER BY template_type_code;
easy gold: SELECT DISTINCT template_type_code FROM Templates
neval_err_num:159
medium pred: SELECT template_id FROM templates WHERE template_type_code in ('PP', 'PPT');
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
neval_err_num:160
medium pred: SELECT template_id FROM templates WHERE template_type_code in ('PP', 'PPT');
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
neval_err_num:161
easy pred: SELECT count(*)Number of Templates with Type CV" FROM templates WHERE template_type_code = 'CV';
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
nmedium pred: SELECT version_number, template_type_code FROM templates join ref_template_types on template_type_code = template_type_code WHERE version_number > 5;
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
nmedium pred: SELECT version_number, template_type_code FROM templates join ref_template_types on template_type_code = template_type_code WHERE version_number > 5;
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
neval_err_num:162
medium pred: SELECT template_type_code, count(template_id) FROM ref_template_types LEFT JOIN templates ON template_type_code = template_type_code GROUP BY ref_template_types;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
neval_err_num:163
medium pred: SELECT template_type_code, count(*) FROM ref_template_types rt left join templates t on template_type_code = template_type_code GROUP BY template_type_code ORDER BY number_of_templates desc;
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
neval_err_num:164
hard pred: SELECT template_type_code, count(*) FROM ref_template_types LEFT JOIN templates ON template_type_code = template_type_code GROUP BY template_type_code;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:165
hard pred: WITH template_type_counts SELECT template_type_code, count(*) FROM templates t JOIN ref_template_types rt ON template_type_code = template_type_code GROUP BY template_type_code ) SELECT template;
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:166
easy pred: SELECT template_type_code FROM ref_template_types rt LEFT JOIN (SELECT template_type_code, count(*) FROM templates GROUP BY template_type_code) t ON template_type_code = template_type_code WHERE t;
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neval_err_num:167
easy pred: SELECT template_type_code FROM ref_template_types rt WHERE template_type_code not in (select template_type_code from templates tt group by template_type_code having count(*) < 3);
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neval_err_num:168
medium pred: SELECT min(version_number), template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code GROUP BY ref;
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
neval_err_num:169
medium pred: SELECT min(version_number), template_type_code FROM templates JOIN ref_template_types ON template_type_code = template_type_code GROUP BY ref;
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
nmedium pred: SELECT document_name FROM documents WHERE template_id in (select template_id from templates where template_type_code = 'BK');
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
nmedium pred: SELECT document_name FROM documents WHERE template_id in (select template_id from templates where template_type_code = 'BK');
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
neval_err_num:170
medium pred: SELECT template_type_code, template_type_description, count(document_id) FROM ref_template_types LEFT JOIN templates ON template_type_code = template_;
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:171
medium pred: SELECT template_type_code, count(document_id) FROM ref_template_types rt left join templates t on template_type_code = template_type_code left join documents d on template_id = template;
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:172
extra pred: SELECT template_type_code, count(document_id) FROM ref_template_types join templates on template_type_code = template_type_code join documents on template_id = ;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:173
extra pred: SELECT template_type_code FROM ref_template_types JOIN (SELECT template_type_code, count(*) FROM templates JOIN documents on template_id = template_id GROUP BY template_type_;
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:174
hard pred: SELECT DISTINCT template_type_code FROM ref_template_types rt WHERE template_type_code not in (SELECT template_type_code FROM documents dt);
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:175
hard pred: SELECT template_type_code FROM ref_template_types rt WHERE template_type_code not in (select distinct template_type_code from templates t where template_id in (select template_id from documents d));
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
nmedium pred: SELECT template_type_code, template_type_description FROM ref_template_types ORDER BY template_type_code asc;
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neval_err_num:176
medium pred: SELECT template_type_code, template_type_description FROM ref_template_types rt ORDER BY template_type_code asc;
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neval_err_num:177
medium pred: SELECT DISTINCT template_type_description FROM ref_template_types rt WHERE template_type_code in (SELECT distinct template_type_code FROM templates t WHERE template_id in (SELECT distinct template_id FROM documents d));
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
nmedium pred: SELECT DISTINCT template_details FROM templates JOIN documents on template_id = template_id ORDER BY template_details;
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
nmedium pred: SELECT template_id FROM templates WHERE template_details = 'Presentation';
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
nmedium pred: SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
nmedium pred: SELECT count(*) FROM paragraphs WHERE document_id = (SELECT document_id FROM documents WHERE document_name = 'Summer Show');
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
nmedium pred: SELECT paragraph_text, other_details FROM paragraphs WHERE paragraph_text = 'Korea ' ORDER BY paragraph_id asc;
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
neval_err_num:178
medium pred: SELECT paragraph_text, document_description, template_details FROM paragraphs join documents on document_id = document_id join templates on template_id = template_id WHERE paragraph_text ilike '%Korea%';
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
nmedium pred: SELECT paragraph_id, paragraph_text FROM documents join templates on template_id = template_id join paragraphs on document_id = document_id WHERE document_name = 'Welcome to NY';
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
nmedium pred: SELECT paragraph_text FROM documents join templates on template_id = template_id join ref_template_types on template_type_code = template_type_code join paragraphs on document_id = document_id;
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:179
medium pred: SELECT paragraph_text FROM documents join templates on template_id = template_id join ref_template_types on template_type_code = template_type_code join paragraphs on document_id = document_id WHERE;
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:180
medium pred: SELECT document_id, count(paragraph_id) FROM documents left join paragraphs on document_id = document_id GROUP BY document_id ORDER BY document_id asc;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neval_err_num:181
medium pred: SELECT document_id, count(paragraph_id) FROM documents left join paragraphs on document_id = document_id GROUP BY document_id ORDER BY document_id asc;
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neval_err_num:182
medium pred: SELECT document_id, document_name, count(paragraph_id) FROM documents left join paragraphs on document_id = document_id GROUP BY document_id, document_name ORDER BY ;
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neval_err_num:183
medium pred: SELECT document_id, document_name, count(paragraph_id) FROM documents LEFT JOIN paragraphs ON document_id = document_id GROUP BY document_id, document_name ORDER BY num_;
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neval_err_num:184
easy pred: SELECT DISTINCT document_id FROM documents JOIN templates on template_id = template_id JOIN ref_template_types on template_type_code = template_type_code JOIN paragraphs on document_id = paragraphs;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neasy pred: SELECT document_id FROM documents JOIN paragraphs on document_id = document_id GROUP BY document_id HAVING count(*) >= 2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neval_err_num:185
extra pred: SELECT document_id, document_name FROM documents JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id) on document_id = document_id ORDER BY paragraph;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:186
extra pred: SELECT document_id, document_name FROM documents JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id ORDER BY num_paragraphs desc limit 1) on ;
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:187
hard pred: SELECT document_id FROM documents LEFT JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id) ON document_id = document_id ORDER BY num_paragraphs;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:188
hard pred: SELECT document_id FROM documents LEFT JOIN (SELECT document_id, count(*) FROM paragraphs GROUP BY document_id) on document_id = document_id ORDER BY num_paragraphs;
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:189
easy pred: SELECT document_id FROM documents JOIN templates on template_id = template_id JOIN ref_template_types on template_type_code = template_type_code JOIN paragraphs on document_id = ;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:190
easy pred: SELECT DISTINCT document_id FROM documents, paragraphs WHERE document_id = document_id GROUP BY document_id, count(paragraph_id) HAVING count(paragraph_id) between 1 and 2;
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:191
hard pred: SELECT DISTINCT document_id FROM documents, paragraphs WHERE document_id = document_id AND paragraph_text = 'Brazil' AND paragraph_text = 'Ireland';
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
neval_err_num:192
hard pred: SELECT DISTINCT document_id FROM documents, paragraphs WHERE document_id = document_id AND paragraph_text like '%Brazil%' AND paragraph_text like '%Ireland%';
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
neval_err_num:193
medium pred: SELECT name FROM teacher WHERE age in ('32', '33');
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
neval_err_num:194
medium pred: SELECT name FROM teacher WHERE age in ('32', '33');
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
nmedium pred: SELECT hometown FROM teacher WHERE age = (SELECT min(age) FROM teacher) ORDER BY age asc;
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
nmedium pred: SELECT name, age, hometown FROM teacher WHERE age = (SELECT min(age) FROM teacher) ORDER BY age asc;
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:195
medium pred: SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY number_of_teachers DESC;
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:196
medium pred: SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY num_teachers DESC;
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:197
hard pred: SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY frequency DESC LIMIT 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:198
hard pred: SELECT hometown, count(*) FROM teacher GROUP BY hometown ORDER BY frequency DESC LIMIT 1;
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:199
easy pred: WITH teacher_hometowns SELECT hometown, count(*) FROM teacher GROUP BY hometown HAVING count(*) >= 2 ) SELECT hometown FROM teacher_hometowns;
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:200
easy pred: WITH teacher_count SELECT hometown, count(*) FROM teacher GROUP BY hometown HAVING count(*) >= 2 ) SELECT hometown FROM teacher_count;
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
nmedium pred: SELECT name, course FROM teacher join course_arrange on teacher_id = teacher_id join course on course_id = course_id ORDER BY name;
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
nmedium pred: SELECT name, course FROM teacher join course_arrange on teacher_id = teacher_id join course on course_id = course_id ORDER BY name;
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:201
hard pred: SELECT name FROM course_arrange join course on course_id = course_id join teacher on teacher_id = teacher_id WHERE course ='math';
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:202
medium pred: SELECT name, count(course_id) FROM teacher LEFT JOIN course_arrange ON teacher_id = teacher_id GROUP BY name ORDER BY number_of_courses DESC;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:203
medium pred: SELECT name, count(course_id) FROM teacher LEFT JOIN course_arrange ON teacher_id = teacher_id GROUP BY name ORDER BY number_of_courses DESC;
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:204
medium pred: WITH teacher_courses SELECT teacher_id, count(*) FROM course_arrange GROUP BY teacher_id HAVING count(*) >= 2 ) SELECT name FROM teacher, teacher_courses WHERE;
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:205
medium pred: WITH teacher_courses SELECT teacher_id, count(*) FROM course_arrange GROUP BY teacher_id HAVING count(*) >= 2 ) SELECT name FROM teacher_courses join teacher on teacher_;
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:206
hard pred: SELECT name FROM teacher LEFT JOIN course_arrange ON teacher_id = teacher_id WHERE course_id IS NULL;
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
nmedium pred: SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY level_of_membership DESC;
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
nmedium pred: SELECT name, level_of_membership FROM visitor WHERE level_of_membership > 4 ORDER BY age ASC;
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
neval_err_num:207
hard pred: WITH min_staff SELECT min(Num_of_Staff) FROM museum WHERE Open_Year > '2010' ) SELECT Name FROM museum WHERE Num_of_Staff >;
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
nmedium pred: SELECT id, name, age FROM visitor join visit on id = visitor_id GROUP BY id, name, age HAVING count(museum_id) > 1;
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
neval_err_num:208
extra pred: SELECT id, name, level_of_membership FROM visitor join (SELECT visitor_id, sum(total_spent) FROM visit GROUP BY visitor_id) on visitor;
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
neval_err_num:209
extra pred: SELECT Museum_ID, Name FROM museum JOIN (SELECT museum_id, count(*) FROM visit GROUP BY museum_id ORDER BY count(*) DESC LIMIT 1);
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:210
hard pred: SELECT name, age FROM visitor join (select visitor_id, count(*) from visit group by visitor_id order by ticket_count desc limit 1) on id = ;
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
neval_err_num:211
extra pred: SELECT name FROM visitor join visit on id = visitor_id WHERE open_year < '2009' and open_year > '2011' GROUP BY name HAVING count(*) = 2;
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
neval_err_num:212
extra pred: SELECT COUNT(*) FROM visitor v WHERE id NOT IN (SELECT id FROM visit v JOIN museum m on museum_id =;
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
neval_err_num:213
medium pred: SELECT count(*) FROM museum WHERE open_year::int > 2013 or open_year::int < 2008;
medium gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
nmedium pred: SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY first_name;
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
nmedium pred: SELECT first_name, birth_date FROM players WHERE country_code = 'USA' ORDER BY first_name;
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
neasy pred: SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches) GROUP BY ranking_date;
easy gold: SELECT avg(winner_rank) FROM matches
neasy pred: SELECT AVG(ranking) FROM rankings WHERE player_id IN (SELECT winner_id FROM matches) GROUP BY ranking_date;
easy gold: SELECT avg(winner_rank) FROM matches
neval_err_num:214
easy pred: SELECT max(loser_rank) FROM matches WHERE loser_id IS NOT NULL;
easy gold: SELECT min(loser_rank) FROM matches
neasy pred: SELECT MIN(ranking) FROM rankings WHERE player_id IN (SELECT loser_id FROM matches) GROUP BY ranking_date;
easy gold: SELECT min(loser_rank) FROM matches
neval_err_num:215
easy pred: SELECT COUNT(DISTINCT last_name)Number of distinct name of losers" FROM players WHERE player_id IN (SELECT loser_id FROM matches WHERE match_num = 1);
easy gold: SELECT count(DISTINCT loser_name) FROM matches
neasy pred: SELECT COUNT(DISTINCT last_name) FROM matches join players on loser_id = player_id WHERE match_num = 1;
easy gold: SELECT count(DISTINCT loser_name) FROM matches
neasy pred: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*) > 10 ORDER BY count(*) DESC;
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:216
easy pred: SELECT DISTINCT tourney_name FROM tournaments JOIN matches ON tourney_id = tourney_id GROUP BY tourney_name HAVING count(*) > 10;
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:217
hard pred: SELECT DISTINCT first_name ||'' || last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT ;
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:218
hard pred: SELECT DISTINCT first_name ||'' || last_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE year = 2013) AND player_id IN (SELECT winner_id FROM matches WHERE;
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:219
medium pred: SELECT count(*) FROM matches WHERE year in (2013, 2016);
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
neval_err_num:220
medium pred: SELECT count(*) FROM matches WHERE year in (2013, 2016);
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
nextra pred: SELECT country_code, first_name FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND year = 2018);
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
nextra pred: SELECT first_name, country_code FROM players WHERE player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships' AND year = 2018);
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
nmedium pred: SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM players ORDER BY birth_date asc LIMIT 1);
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
nmedium pred: SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM players ORDER BY birth_date asc LIMIT 1);
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:221
medium pred: SELECT first_name ||'' || last_name, birth_date FROM players ORDER BY birth_date;
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
neval_err_num:222
medium pred: SELECT first_name ||'' || last_name FROM players WHERE hand = 'Left' ORDER BY birth_date;
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
nhard pred: SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings ORDER BY tours desc LIMIT 1);
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
nhard pred: SELECT first_name, country_code FROM players WHERE player_id = (SELECT player_id FROM rankings WHERE ranking = 1) ORDER BY first_name, country_code;
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
neval_err_num:223
hard pred: SELECT year, count(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:224
hard pred: SELECT year, count(*) FROM matches GROUP BY year ORDER BY num_matches DESC LIMIT 1;
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT first_name, last_name, ranking_points FROM players join rankings on player_id = player_id WHERE ranking = (SELECT max(ranking) FROM rankings) ORDER BY ;
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:225
hard pred: SELECT first_name ||'' || last_name, player_id, ranking_points FROM players join matches on player_id = winner_id join rankings on player_id = player;
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:226
hard pred: SELECT first_name ||'' || last_name FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE tourney_name = 'Australian Open' ORDER BY winner_rank;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:227
hard pred: SELECT first_name ||'' || last_name FROM players JOIN matches ON player_id = winner_id WHERE tourney_name = 'Australian Open' ORDER BY player_id desc LIMIT;
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:228
medium pred: SELECT first_name ||'' || last_name, first_name ||'' || last_name FROM matches join players on loser_id = player_id WHERE minutes = (;
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:229
medium pred: SELECT first_name ||'' || last_name, first_name ||'' || last_name FROM matches join players on winner_id = player_id WHERE match_num =;
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:230
medium pred: SELECT first_name, last_name, AVG(ranking) FROM players join rankings on player_id = player_id GROUP BY first_name, last_name ORDER BY average_ranking;
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:231
medium pred: SELECT first_name, avg(ranking) FROM players left join rankings on player_id = player_id GROUP BY first_name ORDER BY average_ranking desc;
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
nmedium pred: SELECT first_name, last_name, sum(ranking_points) FROM players join rankings on player_id = player_id GROUP BY first_name, last_name ORDER BY;
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:232
medium pred: SELECT first_name, sum(ranking_points) FROM players left join rankings on player_id = player_id GROUP BY first_name ORDER BY total_ranking_points desc;
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:233
medium pred: SELECT country_code, count(player_id) FROM players GROUP BY country_code ORDER BY num_players DESC;
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
neval_err_num:234
medium pred: SELECT country_code, count(*) FROM players GROUP BY country_code ORDER BY player_count DESC;
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
neval_err_num:235
hard pred: SELECT country_code, count(*) FROM players GROUP BY country_code ORDER BY player_count DESC LIMIT 1;
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
nmedium pred: SELECT ranking_date, sum(tours) FROM rankings GROUP BY ranking_date ORDER BY ranking_date;
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
nmedium pred: SELECT year, count(*) FROM matches GROUP BY year ORDER BY year;
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
nmedium pred: SELECT year, count(*) FROM matches GROUP BY year ORDER BY year;
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
neval_err_num:236
medium pred: SELECT first_name, last_name, ranking FROM players join matches on player_id = winner_id join rankings on player_id = player_id WHERE tourney_date = '201;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
neval_err_num:237
medium pred: SELECT first_name, last_name, ranking FROM players join matches on player_id = winner_id join rankings on player_id = player_id WHERE tourney_date = (SELECT MIN(;
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
nmedium pred: SELECT COUNT(DISTINCT winner_id) FROM matches WHERE tourney_name = 'WTA Championships' AND winner_hand = 'Left';
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
nmedium pred: SELECT count(*) FROM players WHERE hand = 'Left' AND player_id IN (SELECT winner_id FROM matches WHERE tourney_name = 'WTA Championships');
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:238
hard pred: SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT winner_id FROM matches WHERE winner_rank_points = (SELECT MAX(ranking_points);
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
nhard pred: SELECT first_name, country_code, birth_date FROM players WHERE player_id = (SELECT max(player_id) FROM rankings) ORDER BY first_name, country_code, ;
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:239
medium pred: SELECT hand, count(*) FROM players GROUP BY hand ORDER BY num_players DESC;
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
neval_err_num:240
medium pred: SELECT hand, count(*) FROM players GROUP BY hand ORDER BY player_count DESC;
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
nmedium pred: SELECT name, date, result FROM battle ORDER BY date;
medium gold: SELECT name ,  date FROM battle
nmedium pred: SELECT id, note, killed, injured, MIN(killed), MAX(killed) FROM death GROUP BY id, note, killed;
medium gold: SELECT max(killed) ,  min(killed) FROM death
neasy pred: SELECT date, avg(injured) FROM battle join ship on id = lost_in_battle join death on id = caused_by_ship_id GROUP BY date ORDER BY date;
easy gold: SELECT avg(injured) FROM death
nmedium pred: SELECT note, killed, injured FROM death join ship on caused_by_ship_id = id WHERE tonnage = 't' ORDER BY note;
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
nmedium pred: SELECT name, result FROM battle WHERE bulgarian_commander!= 'Boril' ORDER BY name;
medium gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
nmedium pred: SELECT id, name FROM battle join ship ON id = lost_in_battle WHERE ship_type = 'Brig' ORDER BY id asc;
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
nhard pred: SELECT id, name FROM battle join death on id = id GROUP BY id, name HAVING sum(killed) > 10 ORDER BY sum(killed) desc;
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
neval_err_num:241
extra pred: SELECT id, name, sum(injured) FROM ship join death on id = caused_by_ship_id GROUP BY id, name ORDER BY total_injuries desc LIMIT;
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT DISTINCT name FROM battle WHERE bulgarian_commander BETWEEN 'Kaloyan' AND 'Baldwin I' OR latin_commander BETWEEN 'Kaloyan' AND 'Baldwin I' ORDER BY name;
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
neasy pred: SELECT DISTINCT result FROM battle ORDER BY result;
easy gold: SELECT count(DISTINCT RESULT) FROM battle
neval_err_num:242
extra pred: SELECT count(*) FROM battle b LEFT JOIN ship s ON id = id WHERE tonnage!= '225' OR id IS NULL;
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
neval_err_num:243
extra pred: SELECT name, date FROM battle WHERE id in (SELECT id FROM battle WHERE name = 'Lettice' AND id in (SELECT lost_in_battle FROM ship WHERE name = ';
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
neval_err_num:244
extra pred: SELECT name, result, bulgarian_commander FROM battle WHERE id NOT IN (SELECT id FROM ship WHERE lost_in_battle IS NOT NULL) AND name LIKE '%English Channel%' ORDER BY ;
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
nmedium pred: SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses;
medium gold: SELECT line_1 ,  line_2 FROM addresses
nmedium pred: SELECT address_id, line_1, line_2 FROM addresses;
medium gold: SELECT line_1 ,  line_2 FROM addresses
neasy pred: SELECT course_name, course_description FROM courses WHERE course_name LIKE '%math%' ORDER BY course_name;
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:245
extra pred: SELECT department_name, department_id FROM (SELECT department_id, count(*) FROM Degree_Programs dp GROUP BY department_id) WHERE degree_count = (SELECT max(degree_count);
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:246
extra pred: SELECT department_name, department_id FROM departments LEFT JOIN degree_programs ON department_id = department_id GROUP BY department_name, department_id ORDER BY count(degree;
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
neval_err_num:247
easy pred: SELECT count(distinct department_id) FROM degree_programs dp WHERE department_id in (SELECT department_id FROM degree_programs dp2);
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
neasy pred: SELECT COUNT(DISTINCT degree_program_id) FROM degree_programs;
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
nmedium pred: SELECT count(*) FROM degree_programs WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Engineering');
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
nmedium pred: SELECT count(*) FROM Degree_Programs WHERE department_id = (SELECT department_id FROM Departments WHERE department_name = 'Engineering');
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
neval_err_num:248
medium pred: SELECT course_id, course_name FROM courses JOIN sections on course_id = course_id GROUP BY course_id, course_name HAVING count(section_id) <= 2 ORDER BY course;
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
neval_err_num:249
medium pred: SELECT course_id, course_name FROM courses LEFT JOIN sections ON course_id = course_id WHERE section_id IS NULL GROUP BY course_id, course_name HAVING count(section_;
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
nextra pred: SELECT semester_name, semester_id FROM semesters WHERE semester_id in (SELECT semester_id FROM student_enrolment GROUP BY semester_id ORDER BY count(*) DESC LIMIT 1);
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:250
extra pred: SELECT semester_name, semester_id FROM semesters WHERE semester_id IN (SELECT semester_id FROM (SELECT semester_id, count(*) FROM student_enrolment GROUP;
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:251
medium pred: SELECT DISTINCT first_name, middle_name, last_name, student_id FROM students INNER JOIN student_enrolment on student_id = student_id INNER JOIN semesters on student_enrol;
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:252
medium pred: SELECT student_id, first_name, middle_name, last_name FROM students join student_enrolment on student_id = student_id join semesters on semester;
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:253
hard pred: SELECT DISTINCT first_name, middle_name, last_name FROM students INNER JOIN student_enrolment on student_id = student_id INNER JOIN degree_programs on degree_program_id;
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:254
hard pred: SELECT first_name, middle_name, last_name FROM students JOIN student_enrolment on student_id = student_id JOIN degree_programs on degree_program_id = degree;
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:255
extra pred: SELECT degree_program_id, degree_summary_name, degree_summary_description, other_details, count(student_id) FROM degree_programs left;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:256
extra pred: SELECT degree_summary_name, count(student_id) FROM student_enrolment join degree_programs on degree_program_id = degree_program_id GROUP BY degree;
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:257
extra pred: SELECT degree_program_id, degree_summary_name FROM degree_programs left join (select degree_program_id, count(*) from student_enrolment group by student_enrolment;
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:258
extra pred: SELECT degree_program_id, degree_summary_name FROM degree_programs left join (select degree_program_id, count(*) from student_enrolment group by degree_program_id) on;
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:259
extra pred: SELECT student_id, first_name, middle_name, last_name, count(*) FROM students left join student_enrolment on student_id = student_id GROUP BY;
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:260
extra pred: SELECT student_id, first_name, middle_name, last_name, count(student_enrolment_id) FROM students left join student_enrolment on student_;
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nhard pred: SELECT semester_name FROM semesters WHERE semester_id not in (SELECT semester_id FROM student_enrolment) ORDER BY semester_name;
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
nhard pred: SELECT semester_name FROM semesters WHERE semester_id not in (SELECT semester_id FROM student_enrolment) ORDER BY semester_name;
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:261
easy pred: SELECT DISTINCT course_name FROM Courses c WHERE course_id in (SELECT course_id FROM Student_Enrolment se join Student_Enrolment_Courses sec on student_enrolment_id = student_enrolment_id;
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
neval_err_num:262
easy pred: SELECT DISTINCT course_name FROM Courses c WHERE course_id in (SELECT course_id FROM Student_Enrolment se join Student_Enrolment_Courses sec on student_enrolment_id = student_enrolment_id;
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
neval_err_num:263
extra pred: SELECT course_name FROM Courses c join Student_Enrolment_Courses sec on course_id = course_id GROUP BY course_name ORDER BY count(*) desc LIMIT 1;
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:264
extra pred: SELECT last_name FROM students left join addresses on current_address_id = address_id left join student_enrolment on student_id = student_id WHERE state_province_county = 'North Carolina;
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:265
extra pred: SELECT last_name FROM students LEFT JOIN addresses ON current_address_id = address_id LEFT JOIN student_enrolment ON student_id = student_id WHERE state_province_county = 'North Carolina;
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:266
medium pred: SELECT transcript_date, transcript_id FROM transcripts t JOIN transcript_contents tc on transcript_id = transcript_id JOIN student_enrolment_courses sec on student_course_id = student_course_id GROUP;
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
neval_err_num:267
medium pred: SELECT transcript_date, transcript_id FROM transcripts t WHERE transcript_id in (SELECT transcript_id FROM transcript_contents tc GROUP BY transcript_id HAVING count(*) >= 2) ORDER BY transcript_;
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
nmedium pred: SELECT first_name, middle_name, last_name FROM students ORDER BY student_id asc LIMIT 1;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
nmedium pred: SELECT first_name, middle_name, last_name FROM students ORDER BY student_id asc LIMIT 1;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:268
medium pred: SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE semester_id = (SELECT;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:269
medium pred: SELECT first_name, middle_name, last_name FROM students WHERE student_id IN (SELECT student_id FROM student_enrolment WHERE semester_id = (SELECT MIN;
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
nextra pred: SELECT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM addresses;
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT address_id, line_1, line_2 FROM addresses WHERE address_id in (SELECT current_address_id FROM students group by current_address_id order by count(*) desc limit 1) ORDER BY ;
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:270
easy pred: SELECT avg(cast(transcript_date)) FROM transcripts t;
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:271
easy pred: SELECT avg(transcript_date) FROM transcripts t;
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:272
medium pred: SELECT min(transcript_date), other_details FROM transcripts ORDER BY first_transcript_date asc;
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:273
medium pred: SELECT min(transcript_date), other_details FROM transcripts t GROUP BY other_details ORDER BY earliest_date asc;
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:274
easy pred: SELECT count(*) FROM Transcripts WHERE transcript_date <= now();
easy gold: SELECT count(*) FROM Transcripts
nmedium pred: SELECT max(transcript_date) FROM transcripts;
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
nmedium pred: SELECT max(transcript_date) FROM transcripts;
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:275
hard pred: SELECT student_enrolment_id, count(*) FROM (SELECT student_enrolment_id, course_id FROM student_enrolment_courses WHERE transcript_id in (SELECT transcript_id FROM transcript_contents GROUP BY transcript_id;
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:276
hard pred: SELECT course_id, course_name, count(*) FROM courses left join student_enrolment_courses on course_id = course_id left join transcript_contents on student_enrolment_courses;
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:277
extra pred: SELECT transcript_date, transcript_id FROM (SELECT transcript_id, count(*) FROM transcript_contents GROUP BY transcript_id) LEFT JOIN transcripts ON transcript_id = transcript_id ORDER BY num;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:278
extra pred: SELECT transcript_date, transcript_id FROM (SELECT transcript_id, count(*) FROM transcript_contents GROUP BY transcript_id) WHERE num_results = (SELECT min(num_results) FROM transcript_contents;
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:279
extra pred: SELECT semester_name FROM semesters WHERE semester_id IN (SELECT semester_id FROM student_enrolment WHERE student_id IN (SELECT student_id FROM students;
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:280
extra pred: SELECT semester_id FROM semesters WHERE semester_name = 'Fall' AND EXISTS (SELECT 1 FROM student_enrolment      WHERE semester_id = semester_id         AND student_;
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:281
easy pred: SELECT COUNT(DISTINCT address_id) FROM  Students     LEFT JOIN Addresses ON current_address_id = address_id;
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neval_err_num:282
easy pred: SELECT DISTINCT address_id, line_1, line_2, line_3, city, zip_postcode, state_province_county, country, other_address_details FROM  addresses JOIN  students on address;
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neasy pred: SELECT student_id,        first_name,        last_name,        email_address,        cell_mobile_number,        date_first_registered,        date_left,        other_student_details    FROM  students    ORDER BY;
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neasy pred: SELECT student_id,        first_name,        last_name,        email_address,        cell_mobile_number,        date_first_registered,        date_left,        other_student_details    FROM  students    ORDER BY;
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:283
easy pred: SELECT section_name,        section_description,        department_name,        department_description,        course_name,        course_description    FROM  sections        JOIN courses ON course_id = course_id        JOIN departments ON courses;
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neval_err_num:284
hard pred: SELECT first_name    FROM  students    WHERE (permanent_address_id IN (SELECT address_id                           FROM  addresses                           WHERE country = 'Haiti')      or cell_mobile_number = '09700166582');
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neval_err_num:285
hard pred: SELECT first_name    FROM  students    WHERE (permanent_address_id in (SELECT address_id                           FROM  addresses                           WHERE country = 'Haiti') or cell_mobile_number = '09700166582');
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neasy pred: SELECT title,        original_air_date    FROM  cartoon    WHERE directed_by = '<NAME>'    ORDER BY original_air_date asc;
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
neval_err_num:286
medium pred: SELECT title,    directed_by FROM  cartoon WHERE original_air_date is not null ORDER BY original_air_date;
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
neval_err_num:287
medium pred: SELECT title    FROM  cartoon    WHERE directed_by in ('<NAME>', '<NAME>')    ORDER BY title;
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:288
medium pred: SELECT title FROM  cartoon WHERE directed_by in ('<NAME>', '<NAME>') ORDER BY title;
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:289
hard pred: SELECT country,    count(*) FROM  tv_channel GROUP BY country ORDER BY num_channels desc;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:290
hard pred: SELECT country,    count(*) FROM  tv_channel GROUP BY country ORDER BY num_channels DESC LIMIT 1;
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:291
medium pred: SELECT series_name,    content,    count(*) FROM  tv_channel GROUP BY series_name, content ORDER BY count DESC;
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
nmedium pred: SELECT DISTINCT series_name,          content FROM  tv_channel ORDER BY series_name, content;
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:292
hard pred: SELECT language,    count(*) FROM  tv_channel tvc GROUP BY language ORDER BY number_of_channels asc;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:293
hard pred: WITH channel_count  SELECT language,     count(*)  FROM  tv_channel  GROUP BY language  ORDER BY channel_count asc  limit 1 ) SELECT language,    channel_count FROM;
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:294
medium pred: SELECT language,    count(id) FROM  tv_channel GROUP BY language ORDER BY number_of_channels DESC;
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:295
medium pred: SELECT language,    count(id) FROM  tv_channel GROUP BY language ORDER BY number_of_channels desc;
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neasy pred: SELECT episode,        rating    FROM  tv_series    ORDER BY rating;
easy gold: SELECT Episode FROM TV_series ORDER BY rating
neasy pred: SELECT episode,        rating    FROM  tv_series    ORDER BY rating asc;
easy gold: SELECT Episode FROM TV_series ORDER BY rating
neval_err_num:296
medium pred: SELECT episode,    rating,    title FROM  tv_series tvs WHERE rating = 'TV-Y7' ORDER BY rating desc, title asc limit 3;
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
nmedium pred: SELECT episode,    rating FROM  tv_series ORDER BY rating desc, episode asc LIMIT 3;
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
neasy pred: SELECT original_air_date FROM  cartoon WHERE title = 'A Love of a Lifetime' ORDER BY original_air_date desc;
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
nmedium pred: SELECT episode    FROM  tv_series join tv_channel        on channel = id    WHERE series_name = 'Sky Radio'    ORDER BY episode asc;
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:297
medium pred: SELECT episode FROM  tv_series, tv_channel WHERE channel = id and series_name = 'Sky Radio';
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:298
medium pred: SELECT directed_by,    count(*) FROM  cartoon GROUP BY directed_by ORDER BY number_of_cartoons DESC;
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
neval_err_num:299
medium pred: SELECT directed_by,    count(id) FROM  cartoon GROUP BY directed_by ORDER BY cartoon_count DESC;
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
nmedium pred: SELECT production_code,    channel FROM  cartoon WHERE original_air_date = (SELECT max(original_air_date)                   FROM  cartoon) ORDER BY production_code, channel;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
nmedium pred: SELECT production_code,    channel FROM  cartoon WHERE id = (SELECT max(id)           FROM  cartoon) ORDER BY production_code, channel;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
nmedium pred: SELECT DISTINCT country FROM  cartoon join tv_channel on channel = id WHERE written_by = '<NAME>' ORDER BY country;
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
nhard pred: SELECT DISTINCT country FROM  tv_channel WHERE id not in (select channel               from  cartoon               where written_by = '<NAME>') ORDER BY country;
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
nhard pred: SELECT DISTINCT country FROM  tv_channel WHERE id not in (select channel               from  cartoon               where written_by = '<NAME>') ORDER BY country;
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:300
extra pred: SELECT series_name,    country FROM  tv_channel join cartoon      on id = channel WHERE directed_by in ('Ben Jones', 'Michael Chang') ORDER BY series;
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:301
extra pred: SELECT DISTINCT series_name,         country FROM  tv_channel join cartoon on id = channel WHERE directed_by in ('Ben Jones', 'Michael Chang');
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
nmedium pred: SELECT pixel_aspect_ratio_par,    country FROM  tv_channel WHERE language!= 'English' ORDER BY pixel_aspect_ratio_par asc;
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
nmedium pred: SELECT pixel_aspect_ratio_par,    country FROM  tv_channel WHERE language!= 'English' ORDER BY country;
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neval_err_num:302
easy pred: SELECT id FROM  tv_channel tvc GROUP BY id, country HAVING count(*) > 2 ORDER BY id asc;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neasy pred: SELECT id FROM  tv_channel GROUP BY id HAVING count(*) > 2;
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
nhard pred: SELECT DISTINCT id FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY id asc;
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
nhard pred: SELECT DISTINCT id FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY id asc;
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
nhard pred: SELECT DISTINCT package_option FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY package_option;
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
nhard pred: SELECT DISTINCT package_option FROM  tv_channel WHERE id not in (select channel               from  cartoon               where directed_by = '<NAME>') ORDER BY package_option;
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neasy pred: SELECT earnings,      name   FROM  poker_player join people on people_id = people_id   ORDER BY earnings DESC;
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
nmedium pred: SELECT final_table_made,    best_finish    FROM  poker_player    ORDER BY final_table_made, best_finish;
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neval_err_num:303
medium pred: SELECT final_table_made,    best_finish FROM  poker_player JOIN  people on people_id = people_id ORDER BY final_table_made, best;
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
nmedium pred: SELECT money_rank    FROM  poker_player    WHERE earnings = (SELECT MAX(earnings)                   FROM  poker_player);
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
nmedium pred: SELECT money_rank    FROM  poker_player    WHERE earnings = (SELECT MAX(earnings)                   FROM  poker_player);
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
neasy pred: SELECT name    FROM  people join poker_player        ON people_id = people_id    ORDER BY name asc;
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
neasy pred: SELECT name    FROM  people join poker_player        on people_id = people_id    ORDER BY name asc;
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
nmedium pred: SELECT name,      final_table_made    FROM  people join poker_player on people_id = people_id    ORDER BY final_table_made asc;
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:304
hard pred: SELECT birth_date FROM  people join poker_player on people_id = people_id WHERE earnings = (SELECT min(earnings)                 FROM  poker_player) ORDER BY birth_;
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
neval_err_num:305
hard pred: SELECT birth_date FROM  people join poker_player on people_id = people_id WHERE earnings = (SELECT min(earnings)                 FROM  poker_player) ORDER BY birth_;
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
nhard pred: SELECT money_rank    FROM  poker_player join people        ON people_id = people_id    WHERE height = (SELECT max(height)                FROM  people)    ORDER BY money_rank desc;
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
nhard pred: SELECT money_rank    FROM  poker_player join people        ON people_id = people_id    WHERE height = (SELECT MAX(height)                FROM  people)    ORDER BY money_rank DESC;
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:306
medium pred: SELECT nationality,    count(*) FROM  people GROUP BY nationality ORDER BY number_of_people DESC;
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neval_err_num:307
medium pred: SELECT nationality,    count(*) FROM  people GROUP BY nationality ORDER BY count DESC;
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neval_err_num:308
hard pred: SELECT nationality,    count(*) FROM  people GROUP BY nationality ORDER BY frequency DESC LIMIT 1;
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:309
hard pred: SELECT nationality,        count(*)    FROM  people    GROUP BY nationality    ORDER BY count DESC    LIMIT 1;
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:310
easy pred: WITH shared_nationalities  SELECT nationality, count(*)  FROM people  GROUP BY nationality  HAVING count(*) >= 2 ) SELECT nationality FROM shared_nationalities ORDER BY nationality;
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
neasy pred: SELECT COUNT(DISTINCT state) FROM  AREA_CODE_STATE;
easy gold: SELECT count(*) FROM area_code_state
neval_err_num:311
medium pred: SELECT vote_id,        phone_number,        state    FROM  votes v        join area_code_state a on state = state    ORDER BY vote_id asc;
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes
neval_err_num:312
easy pred: SELECT max(created)    FROM  votes v    WHERE state = 'CA';
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'
neval_err_num:313
medium pred: SELECT DISTINCT state, created    FROM  votes v    ORDER BY state, created;
medium gold: SELECT DISTINCT state ,  created FROM votes
nmedium pred: SELECT contestant_number,    contestant_name FROM  CONTESTANTS WHERE contestant_number in (SELECT contestant_number               FROM  VOTES               GROUP BY contestant_number               HAVING count(*) >= 2) ORDER BY contestant_number asc;
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
neval_err_num:314
extra pred: WITH contestant_votes  SELECT contestant_number,     count(*)  FROM  votes  GROUP BY contestant_number ) SELECT contestant_number,    contestant_name FROM  contestant_votes cv join contestants c on contestant_number = c;
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
neval_err_num:315
medium pred: SELECT count(*) FROM  votes WHERE state in ('NY', 'CA');
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
neval_err_num:316
extra pred: SELECT COUNT(*) FROM CONTESTANTS c WHERE contestant_number not in (SELECT contestant_number                  FROM  VOTES v);
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
neval_err_num:317
extra pred: SELECT area_code,    state,    count(*) FROM  area_code_state join votes on state = state GROUP BY area_code, area_code_;
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:318
medium pred: SELECT created,        state,        phone_number    FROM  votes v join contestants c on contestant_number = contestant_number join area_code_state a on state = state    WHERE contestant_name = 'Tabath;
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
neval_err_num:319
extra pred: SELECT DISTINCT area_code FROM  votes v1 JOIN votes v2  ON contestant_number = contestant_number WHERE contestant_number = (SELECT contestant_number                FROM  contestants                WHERE contestant_;
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
neval_err_num:320
easy pred: SELECT count(*) FROM  country WHERE governmentform ='republic';
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
neasy pred: SELECT region,        name,        surfacearea    FROM  country    WHERE region = 'Caribbean'    ORDER BY surfacearea desc;
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neasy pred: SELECT SUM(surfacearea) FROM  country WHERE continent = 'Caribbean';
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
nmedium pred: SELECT region    FROM  country    WHERE name = 'Kabul';
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
nextra pred: SELECT language,    percentage FROM  countrylanguage join country on countrycode = code WHERE name = 'Aruba' ORDER BY percentage desc;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
nextra pred: SELECT language,    percentage FROM  countrylanguage join country on countrycode = code WHERE name = 'Aruba' ORDER BY percentage desc;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
nmedium pred: SELECT name,    population,    lifeexpectancy FROM  country WHERE name = 'Brazil';
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
nmedium pred: SELECT name,    population,    lifeexpectancy FROM  country WHERE name = 'Brazil';
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
neval_err_num:321
easy pred: SELECT name,    life_expectancy FROM  country WHERE region = 'Central Africa' GROUP BY name, life_expectancy HAVING count(*) > 100 ORDER BY life_expectancy asc;
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
neasy pred: SELECT AVG(LifeExpectancy) FROM  country WHERE Continent = 'Africa'  AND Region = 'Central Africa';
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
nmedium pred: SELECT region,    name,    population,    gnp FROM  country WHERE continent = 'Asia' ORDER BY gnp desc, population desc;
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
nmedium pred: SELECT name,    gnp FROM  country WHERE continent = 'Asia' ORDER BY gnp desc LIMIT 1;
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
nmedium pred: SELECT AVG(lifeexpectancy) FROM  country WHERE continent = 'Africa'  AND region = 'Africa'  AND governmentform = 'Republic';
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
neval_err_num:322
medium pred: SELECT name,    life_expectancy FROM  country WHERE continent = 'Africa'  AND government_form = 'Republic' GROUP BY name, life_expectancy HAVING count(*) >= 10 ORDER BY country;
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
neval_err_num:323
medium pred: SELECT sum(surfacearea) FROM  country WHERE continent in ('Asia', 'Europe');
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neasy pred: SELECT population FROM  city WHERE district = 'Gelderland';
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
neasy pred: SELECT population    FROM  city    WHERE district = 'Gelderland';
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
nmedium pred: SELECT name,    gnp,    population FROM  country WHERE continent = 'North America'  AND region = 'US' GROUP BY name, gnp, population ORDER BY gnp desc;
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
nmedium pred: SELECT gnp,    population FROM  country WHERE continent = 'North America'  AND region = 'US' GROUP BY gnp, population HAVING count(*) > 0;
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:324
easy pred: SELECT governmentform,    count(*) FROM  country WHERE continent = 'Africa' GROUP BY governmentform ORDER BY count DESC;
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
nmedium pred: SELECT sum(percentage) FROM  countrylanguage     JOIN country ON countrycode = code WHERE name = 'Aruba';
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: SELECT COUNT(*) FROM countrylanguage WHERE countrycode = 'ABW';
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
nmedium pred: SELECT count(*) FROM countrylanguage WHERE countrycode = 'AFG'  AND isofficial = 'true';
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
nmedium pred: SELECT count(*) FROM  countrylanguage WHERE isofficial = 'true'  AND countrycode = 'AFG';
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
nextra pred: SELECT name FROM  country WHERE code = (SELECT countrycode            FROM  countrylanguage            GROUP BY countrycode            ORDER BY count(*) desc            LIMIT 1);
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:325
extra pred: WITH nation_language_count  SELECT name,     count(*)  FROM  country     LEFT JOIN countrylanguage ON code = countrycode  GROUP BY name  ORDER BY language_count desc  limit 1) SELECT nation_language_count;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:326
extra pred: SELECT continent,    count(distinct language) FROM  country   left join countrylanguage on code = countrycode GROUP BY continent ORDER BY language_count desc;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:327
extra pred: SELECT continent,    count(*) FROM  countrylanguage     join country on countrycode = code GROUP BY continent ORDER BY language_count DESC;
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:328
easy pred: SELECT count(*) FROM  country c WHERE code IN (SELECT countrycode          FROM  countrylanguage          WHERE language = 'English'            or language = 'Dutch');
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:329
easy pred: SELECT count(*) FROM  country c WHERE Name in (SELECT Name          FROM  country          WHERE Code in (SELECT CountryCode                      FROM  countrylanguage                      WHERE Language = 'English'                       or Language = 'D;
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
nextra pred: SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               or language = 'French') ORDER BY name;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
nextra pred: SELECT DISTINCT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               or language = 'French') ORDER BY name;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:330
extra pred: SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               and isofficial = 'true') and code in (SELECT countrycode                                       FROM  countrylanguage;
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:331
extra pred: SELECT name    FROM  country    WHERE code in (SELECT countrycode                FROM  countrylanguage                WHERE language in ('English', 'French'));
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:332
medium pred: SELECT COUNT(DISTINCT continent) FROM country WHERE name = 'China' AND continent IS NOT NULL;
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:333
medium pred: SELECT continent,    count(*) FROM  countrylanguage join country on countrycode = code WHERE language = 'Chinese' GROUP BY continent ORDER BY num_speakers DESC;
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:334
hard pred: SELECT DISTINCT region FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE (language = 'English' or language = 'Dutch'));
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:335
hard pred: SELECT DISTINCT region FROM  countrylanguage JOIN  country on countrycode = code WHERE (language = 'Dutch' or language = 'English') ORDER BY region;
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
nextra pred: SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'English'               or language = 'Dutch') ORDER BY name;
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
neval_err_num:336
extra pred: SELECT name FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE isofficial = 'true'               and (language = 'English'                 or language = 'Dutch')) ORDER BY name;
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
neval_err_num:337
extra pred: WITH continent_languages  SELECT continent,     language,     percentage  FROM  countrylanguage join country      ON countrycode = code  WHERE continent = 'Asia' ), most_popular_language  SELECT continent;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
neval_err_num:338
extra pred: SELECT language,    isofficial,    percentage,    name,    continent,    region,    surfacearea,    indepyear,    population,    lifeexpectancy,    gnp,;
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
neval_err_num:339
hard pred: WITH republic_countries  SELECT name,     code  FROM  country  WHERE governmentform ='republic' ), single_country_languages  SELECT language  FROM  countrylanguage  JOIN  country on countrycode = ;
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:340
hard pred: WITH country_republics  SELECT name,     code  FROM  country  WHERE governmentform ='republic') SELECT language FROM  country_republics cr, countrylanguage WHERE code = countrycode GROUP;
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
nextra pred: SELECT name,    population FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE language = 'English' ORDER BY population desc LIMIT 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
nextra pred: SELECT name,    population FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE language = 'English' ORDER BY population desc LIMIT 1;
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
neval_err_num:341
hard pred: SELECT name,    population,    life_expectancy FROM  country WHERE continent = 'Asia' ORDER BY surface_area desc LIMIT 1;
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:342
hard pred: SELECT name,    population,    life_expectancy FROM  country WHERE continent = 'Asia' ORDER BY population desc, life_expectancy desc LIMIT 1;
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:343
extra pred: SELECT name,    life_expectancy,    region FROM  country WHERE code not in (select countrycode               from  countrylanguage               where language = 'English') GROUP BY name, life_expectancy, country;
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
neval_err_num:344
extra pred: SELECT name,    life_expectancy FROM  country WHERE code not in (select countrycode               from  countrylanguage               where language = 'English') GROUP BY name, life_expectancy HAVING count(*) = (;
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
nextra pred: SELECT sum(population) FROM  country WHERE code NOT IN (SELECT countrycode              FROM  countrylanguage              WHERE language = 'English');
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:345
extra pred: SELECT name,    population,    surfacearea,    indepyear,    lifeexpectancy,    gnp,    gnpold,    localname,    governmentform,    headofstate,    capital;
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:346
medium pred: SELECT language FROM  countrylanguage join country on countrycode = code WHERE headofstate = 'Beatrix' and name = countryname and isofficial = 'true';
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:347
medium pred: SELECT count(distinct language) FROM  countrylanguage     left join country on countrycode = code WHERE indepyear < 1930;
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:348
medium pred: SELECT name,    count(distinct language) FROM  country   LEFT JOIN countrylanguage ON code = countrycode WHERE indepyear < 1930 GROUP BY name ORDER BY total_distinct;
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:349
hard pred: WITH european_countries  SELECT name,     surfacearea  FROM  country  WHERE continent = 'European Union' ) SELECT name FROM  country WHERE surfacearea > (SELECT max(surfacearea)                FROM  europe;
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
neval_err_num:350
hard pred: WITH country_area  SELECT name,     surfacearea  FROM  country  WHERE continent = 'Europe' ) SELECT name FROM  country WHERE surfacearea > (SELECT surfacearea                FROM  country_area) ORDER BY ;
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
nextra pred: SELECT name FROM  country WHERE continent = 'Africa'  AND population < (SELECT population              FROM  country              WHERE continent = 'Asia');
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
nextra pred: SELECT name,    population FROM  country WHERE continent = 'Africa'  AND population < (SELECT population               FROM  country               WHERE continent = 'Asia') ORDER BY population asc;
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
nextra pred: SELECT name,    population FROM  country WHERE continent = 'Asia'  AND population > (SELECT max(population)               FROM  country               WHERE continent = 'Africa');
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
nextra pred: SELECT name FROM  country WHERE continent = 'Asia'  AND population > (SELECT max(population)               FROM  country               WHERE continent = 'Africa');
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
nhard pred: SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language = 'English');
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
nhard pred: SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language = 'English');
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neasy pred: SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language = 'English') ORDER BY code;
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neasy pred: SELECT code FROM  country WHERE code not in (SELECT countrycode               FROM  countrylanguage               WHERE language!= 'English');
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
nhard pred: SELECT code FROM  country WHERE governmentform!= 'Republic'  AND code not in (SELECT countrycode              FROM  countrylanguage              WHERE language = 'English') ORDER BY code;
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
nhard pred: SELECT code FROM  country WHERE governmentform!= 'Republic'  AND code not in (SELECT countrycode              FROM  countrylanguage              WHERE language = 'English') ORDER BY code;
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
nextra pred: SELECT DISTINCT name FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE continent = 'Europe'  AND language!= 'English'  AND isofficial!= 'true';
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
nextra pred: SELECT name FROM  city join country on countrycode = code join countrylanguage on code = countrycode WHERE continent = 'Europe'  AND language!= 'English' ORDER BY name;
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
nmedium pred: SELECT name,        indepyear,        surfacearea    FROM  country    WHERE population = (SELECT MIN(population)                  FROM  country)    ORDER BY population asc;
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
nmedium pred: SELECT name,        indepyear,        surfacearea    FROM  country    WHERE population = (SELECT MIN(population)                  FROM  country)    ORDER BY population ASC;
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
nmedium pred: SELECT population,    name,    headofstate FROM  country WHERE code = (SELECT code            FROM  country            ORDER BY surfacearea desc            LIMIT 1);
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:351
medium pred: SELECT name,    population,    head_of_state FROM  country WHERE surface_area = (SELECT MAX(surface_area)                FROM  country) ORDER BY surface_area DESC;
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:352
medium pred: SELECT name,    count(language) FROM  country  LEFT JOIN countrylanguage ON code = countrycode GROUP BY name HAVING count(language) >= 3 ORDER BY num_languages desc;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:353
medium pred: SELECT name,    count(language) FROM  country   LEFT JOIN countrylanguage ON code = countrycode GROUP BY name HAVING count(language) > 2 ORDER BY language_count DESC;
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
nextra pred: SELECT district,    count(*) FROM  city GROUP BY district HAVING population > (SELECT avg(population)              FROM  city);
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
nextra pred: SELECT district,    count(*) FROM  city GROUP BY district HAVING population > (SELECT avg(population)              FROM  city);
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
nmedium pred: SELECT governmentform,    population FROM  country WHERE lifeexpectancy > 72 ORDER BY governmentform;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:354
medium pred: SELECT governmentform,    sum(population) FROM  country WHERE lifeexpectancy > 72 GROUP BY governmentform ORDER BY total_population DESC;
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:355
medium pred: SELECT continent,    avg(lifeexpectancy),    sum(population) FROM  country GROUP BY continent HAVING avg(lifeexpectancy) < 72 ORDER BY avg_life_exp;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:356
medium pred: SELECT continent,    name,    population,    life_expectancy,    avg_life_expectancy FROM  country WHERE avg_life_expectancy < 72 ORDER BY continent, name;
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:357
hard pred: SELECT continent,    name,    population,    surfacearea,    avg(surfacearea) OVER (PARTITION BY continent) FROM  country WHERE continent = 'North America'  AND surfacearea >;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
neval_err_num:358
hard pred: SELECT name,    surfacearea,    population,    avg(surfacearea) OVER (PARTITION BY continent) FROM  country WHERE continent = 'North America'  AND surfacearea > 3000;
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
neval_err_num:359
hard pred: WITH country_language_count  SELECT language,     count(*)  FROM  countrylanguage  GROUP BY language  ORDER BY count DESC ) SELECT language FROM  country_language_count WHERE count =;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
neval_err_num:360
hard pred: WITH country_language_count  SELECT language,     count(*)  FROM  countrylanguage  GROUP BY language  ORDER BY count DESC) SELECT language FROM  country_language_count WHERE count = (;
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
neval_err_num:361
medium pred: SELECT name,    language,    percentage FROM  country  LEFT JOIN countrylanguage ON code = countrycode ORDER BY percentage desc nulls last, name;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:362
medium pred: SELECT code,    name,    language,    percentage FROM  country  LEFT JOIN countrylanguage   ON code = countrycode ORDER BY percentage desc;
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:363
extra pred: WITH country_spanish_speakers  SELECT name,     code,     percentage  FROM  country     INNER JOIN countrylanguage ON code = countrycode  WHERE language = 'Spanish' ) SELECT country_spanish_speak;
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nextra pred: SELECT count(*) FROM country WHERE code in (SELECT countrycode            FROM  countrylanguage            WHERE language = 'Spanish'             AND isofficial = 'Y');
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
nmedium pred: SELECT code FROM  country JOIN  countrylanguage ON code = countrycode WHERE language = 'Spanish' ORDER BY percentage desc LIMIT 1;
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:364
medium pred: SELECT code FROM  country WHERE code in (SELECT countrycode             FROM  countrylanguage             WHERE language = 'Spanish'             GROUP BY countrycode             HAVING count(*) >= ALL (SELECT count(*)                        FROM  countrylanguage                        WHERE;
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neasy pred: SELECT record_company, year_of_founded    FROM  orchestra    ORDER BY year_of_founded desc;
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
neasy pred: SELECT record_company, year_of_founded    FROM  orchestra    ORDER BY year_of_founded DESC;
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
neval_err_num:365
medium pred: SELECT MIN(share::float),    MAX(share::float) FROM  performance WHERE type!= 'Live final';
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:366
medium pred: SELECT MIN(share::float), MAX(share::float)    FROM  performance    WHERE type!= 'Live final';
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neasy pred: SELECT name,    age,    year_of_work FROM  conductor ORDER BY year_of_work desc;
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
nmedium pred: SELECT name FROM  conductor WHERE year_of_work = (SELECT MAX(year_of_work)                 FROM  conductor) ORDER BY name;
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
nmedium pred: SELECT name,    orchestra FROM  conductor join orchestra on conductor_id = conductor_id ORDER BY name;
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
nmedium pred: SELECT name FROM  conductor WHERE conductor_id in (   SELECT conductor_id   FROM  orchestra   GROUP BY conductor_id   HAVING count(*) > 1) ORDER BY name asc;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
nmedium pred: SELECT name FROM  conductor WHERE conductor_id in (   SELECT conductor_id   FROM  orchestra   GROUP BY conductor_id   HAVING count(*) > 1) ORDER BY name;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
nextra pred: SELECT name FROM conductor JOIN orchestra on conductor_id = conductor_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
nextra pred: SELECT name FROM conductor JOIN orchestra on conductor_id = conductor_id GROUP BY name ORDER BY count(*) desc LIMIT 1;
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
nmedium pred: SELECT name FROM conductor WHERE conductor_id in (   SELECT conductor_id   FROM orchestra   WHERE year_of_founded > 2008) ORDER BY name;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
nmedium pred: SELECT name    FROM  conductor join orchestra        ON conductor_id = conductor_id    WHERE year_of_work >= 2008;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
neval_err_num:367
medium pred: SELECT record_company,    count(orchestra_id)  orchestra GROUP BY record_company ORDER BY number_of_orchest;
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
neval_err_num:368
medium pred: SELECT record_company,    count(orchestra_id) FROM  orchestra GROUP BY record_company ORDER BY orchestra_count desc;
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
nmedium pred: SELECT Major_Record_Format,    count(*) FROM  orchestra GROUP BY Major_Record_Format ORDER BY count(*) ASC;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:369
medium pred: SELECT Major_Record_Format,    count(*) FROM  orchestra GROUP BY Major_Record_Format ORDER BY frequency desc;
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:370
hard pred: SELECT record_company,    count(*)  orchestra GROUP BY record_company ORDER BY num_of_orchest LIMIT 1;
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:371
hard pred: SELECT record_company,    count(*)  orchestra GROUP BY record_company ORDER BY num_of_orchest LIMIT 1;
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:372
hard pred: SELECT orchestra    FROM orchestra    LEFT JOIN performance    ON Orchestra_ID = Orchestra_ID    WHERE Performance_ID IS NULL;
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:373
hard pred: SELECT orchestra FROM orchestra LEFT JOIN performance ON orchestra_id = orchestra_id WHERE performance_id IS NULL;
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
nhard pred: SELECT DISTINCT record_company FROM  orchestra WHERE year_of_founded < 2003  OR year_of_founded > 2003;
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
neval_err_num:374
medium pred: SELECT count(*) FROM  orchestra WHERE major_record_format in ('CD', 'DVD');
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
neval_err_num:375
medium pred: SELECT count(*) FROM  orchestra WHERE major_record_format in ('CD', 'DVD');
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
nmedium pred: SELECT year_of_founded FROM  orchestra WHERE orchestra_id in (SELECT orchestra_id                  FROM  performance                  GROUP BY orchestra_id having count(*) > 1) ORDER BY year_of_founded asc;
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
nmedium pred: SELECT year_of_founded FROM  orchestra WHERE orchestra_id in (SELECT orchestra_id                  FROM  performance                  GROUP BY orchestra_id having count(*) > 1) ORDER BY year_of_founded asc;
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
nmedium pred: SELECT name,    grade    FROM  highschooler    ORDER BY name;
medium gold: SELECT name ,  grade FROM Highschooler
nmedium pred: SELECT name,    grade    FROM  highschooler    ORDER BY name;
medium gold: SELECT name ,  grade FROM Highschooler
neasy pred: SELECT grade    FROM  highschooler    WHERE grade > 9    ORDER BY grade asc;
easy gold: SELECT grade FROM Highschooler
neasy pred: SELECT name,      grade    FROM  highschooler    ORDER BY grade asc;
easy gold: SELECT grade FROM Highschooler
neval_err_num:376
medium pred: SELECT count(*) FROM  highschooler WHERE grade in (9, 10);
medium gold: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10
nmedium pred: SELECT grade,      count(*)    FROM  highschooler    GROUP BY grade    ORDER BY grade;
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
nmedium pred: SELECT grade,      count(*)    FROM  highschooler    GROUP BY grade    ORDER BY grade;
medium gold: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade
neval_err_num:377
hard pred: SELECT grade,        count(*)    FROM  highschooler    GROUP BY grade    ORDER BY num_highschoolers DESC    LIMIT 1;
hard gold: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1
neval_err_num:378
easy pred: SELECT DISTINCT grade FROM  highschooler hs WHERE id in (SELECT student_id         FROM  friend         WHERE friend_id in (SELECT id                       FROM  highschooler hs                       GROUP BY id                       HAVING count(*) >= 4));
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
neasy pred: SELECT grade    FROM  highschooler    WHERE grade >= 4    GROUP BY grade    ORDER BY grade;
easy gold: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4
neval_err_num:379
medium pred: SELECT id,    count(friend_id)    FROM  highschooler    LEFT JOIN friend ON id = student_id    GROUP BY id    ORDER BY num_friends DESC;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
neval_err_num:380
medium pred: SELECT id,    count(friend_id) FROM  highschooler     left join friend on id = student_id GROUP BY id;
medium gold: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id
neval_err_num:381
medium pred: SELECT name,    count(friend_id)    FROM  highschooler    LEFT JOIN friend ON id = student_id    WHERE grade = 10    GROUP BY name    ORDER BY number;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:382
medium pred: SELECT name,    count(friend_id) FROM  highschooler     left join friend on id = student_id GROUP BY name ORDER BY friend_count desc;
medium gold: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:383
extra pred: SELECT name    FROM  highschooler    LEFT JOIN friend      ON id = student_id    GROUP BY name    ORDER BY count(*) desc    LIMIT 1;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:384
extra pred: WITH friend_counts  SELECT name,     count(*)  FROM  friend join highschooler      on student_id = id  GROUP BY name  ORDER BY friend_count desc nulls last limit 1 ) SELECT;
extra gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
nmedium pred: SELECT name FROM  highschooler join friend on id = student_id GROUP BY name HAVING count(*) >= 3;
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
nmedium pred: SELECT name FROM  highschooler join friend on id = student_id GROUP BY name HAVING count(*) >= 3;
medium gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3
neval_err_num:385
hard pred: WITH kyle_friends  SELECT friend_id  FROM  friend  WHERE student_id = 1000000 ) SELECT name FROM  highschooler, kyle_friends WHERE id = kyle_;
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
nhard pred: SELECT friend_id,        name    FROM  friend join highschooler on friend_id = id    WHERE student_id = (SELECT id                  FROM  highschooler                  WHERE name = 'Kyle');
hard gold: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  "Kyle"
neval_err_num:386
medium pred: WITH kyle_friends  SELECT count(*)  FROM  friend  WHERE student_id = (SELECT id                FROM  highschooler                WHERE name = 'Kyle') ) SELECT kyle_friend_count FROM;
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
neval_err_num:387
medium pred: WITH kyle_friends  SELECT count(*)  FROM  friend  WHERE student_id = (SELECT id                FROM  highschooler                WHERE name = 'Kyle') ) SELECT kyle_friend_count;
medium gold: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
nhard pred: SELECT id    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend)    ORDER BY id asc;
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
nhard pred: SELECT id    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend)    AND grade = 13;
hard gold: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend
nhard pred: SELECT name    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend) and grade = 13;
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
nhard pred: SELECT name    FROM  highschooler    WHERE id not in (SELECT student_id                   FROM  friend);
hard gold: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id
neval_err_num:388
hard pred: WITH friend_and_like  SELECT student_id  FROM  friend join highschooler on friend_id = id  WHERE friend_id in (select distinct liked_id from likes) ) SELECT id FROM;
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:389
hard pred: WITH friend_ids  SELECT friend_id  FROM  friend  GROUP BY friend_id  HAVING count(*) > 1 ), liked_ids  SELECT student_id  FROM  likes  GROUP BY student_id  HAVING count(*) > 0 ) SELECT friend;
hard gold: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes
neval_err_num:390
hard pred: WITH friend_of_someone  SELECT student_id  FROM  friend  GROUP BY student_id  HAVING count(*) > 0 ), liked_by_someone  SELECT student_id  FROM  likes  GROUP BY student;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
neval_err_num:391
hard pred: SELECT name FROM  highschooler WHERE id in (SELECT student_id               FROM  friend               WHERE friend_id in (SELECT liked_id                            FROM  likes                            WHERE student_id in (SELECT student;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id
neval_err_num:392
medium pred: SELECT id,    count(student_id) FROM  highschooler    left join likes on id = student_id GROUP BY id ORDER BY number_of_likes desc;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
neval_err_num:393
medium pred: SELECT id,    count(student_id) FROM  highschooler    left join likes on id = student_id GROUP BY id ORDER BY likes_count desc;
medium gold: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id
neval_err_num:394
medium pred: SELECT name,    count(student_id) FROM  highschooler    left join friend on id = student_id    left join likes on id = student_id WHERE ;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:395
medium pred: SELECT name,    count(student_id) FROM  highschooler     left join friend on id = student_id     left join likes on id = student_id WHERE friend_id is;
medium gold: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id
neval_err_num:396
extra pred: SELECT name    FROM  highschooler    JOIN  (SELECT student_id,           count(*)        FROM  likes        GROUP BY student_id        ORDER BY num_likes desc        limit 1) on id =;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:397
extra pred: SELECT name    FROM  highschooler    JOIN  (SELECT student_id,           count(*)        FROM  likes        GROUP BY student_id        ORDER BY likes_count desc        limit 1) on id =;
extra gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:398
medium pred: SELECT name FROM  highschooler,    likes WHERE id = student_id GROUP BY name, id HAVING count(*) >= 2;
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
neval_err_num:399
medium pred: SELECT name FROM  highschooler,    likes WHERE id = student_id GROUP BY name, id HAVING count(*) >= 2;
medium gold: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2
nhard pred: SELECT name    FROM  highschooler    WHERE grade > 5    GROUP BY name    HAVING count(*) >= 2;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
nhard pred: SELECT name FROM  highschooler join friend on id = student_id WHERE grade > 5 GROUP BY name HAVING count(*) >= 2;
hard gold: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2
nmedium pred: SELECT count(*) FROM  Likes WHERE student_id = (SELECT ID              FROM  Highschooler              WHERE name = 'Kyle');
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
nmedium pred: SELECT count(*)  FROM  Likes  WHERE student_id = (SELECT ID               FROM  Highschooler               WHERE name = 'Kyle');
medium gold: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  "Kyle"
neval_err_num:400
hard pred: WITH student_friends  SELECT student_id,     friend_id  FROM  friend  GROUP BY student_id, friend_id  HAVING count(*) > 0 ) SELECT avg(grade) FROM;
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:401
hard pred: WITH student_friends  SELECT student_id,     friend_id  FROM  friend  WHERE friend_id IS NOT NULL  GROUP BY student_id, friend_id ) SELECT avg(grade) FROM;
hard gold: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:402
extra pred: SELECT min(grade)    FROM  highschooler hs    WHERE id not in (SELECT student_id              FROM  friend);
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:403
extra pred: SELECT min(grade)    FROM  highschooler hs    WHERE id not in (SELECT student_id              FROM  friend);
extra gold: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)
neval_err_num:404
hard pred: WITH owner_states  SELECT DISTINCT state  FROM  owners ), prof_states  SELECT DISTINCT state  FROM  professionals ) SELECT DISTINCT state FROM  owner_states INTERSECT SELECT DISTINCT state FROM  prof_states;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
neval_err_num:405
hard pred: WITH owner_states  SELECT DISTINCT state  FROM  owners ), prof_states  SELECT DISTINCT state  FROM  professionals ) SELECT DISTINCT state FROM  owner_states INTERSECT SELECT DISTINCT state FROM  prof_states;
hard gold: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals
neval_err_num:406
hard pred: SELECT avg(age::float) FROM  dogs WHERE dog_id in (SELECT dog_id            FROM  treatments);
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
neval_err_num:407
hard pred: SELECT avg(age::float) FROM  dogs WHERE dog_id in (SELECT dog_id            FROM  treatments);
hard gold: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )
neval_err_num:408
extra pred: SELECT professional_id,    last_name,    cell_number FROM  professionals p WHERE state = 'Indiana'  or (SELECT count(*)   FROM  treatments t   WHERE professional_id = professional_;
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
neval_err_num:409
extra pred: SELECT professional_id,    last_name,    cell_number FROM  professionals p WHERE state = 'Indiana'  or (SELECT count(*)   FROM  treatments t   WHERE professional_id = professional_;
extra gold: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2
neval_err_num:410
hard pred: SELECT DISTINCT name FROM  dog d WHERE owner_id NOT IN (SELECT owner_id              FROM  owner o              WHERE owner_id in (SELECT owner_id                        FROM  dog d                        WHERE dog_id in (SELECT dog;
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
nhard pred: SELECT DISTINCT name FROM  dogs WHERE owner_id NOT IN (SELECT dog_id               FROM  treatments               WHERE cost_of_treatment > 1000);
hard gold: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )
neval_err_num:411
hard pred: SELECT DISTINCT first_name FROM  professionals WHERE first_name NOT IN (SELECT name                     FROM  dog) UNION SELECT DISTINCT first_name FROM  owners WHERE first_name NOT IN (SELECT name;
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:412
hard pred: SELECT DISTINCT first_name FROM  professionals WHERE first_name NOT IN (SELECT name                     FROM  dog) UNION SELECT DISTINCT first_name FROM  owners WHERE first_name NOT IN (SELECT name;
hard gold: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs
neval_err_num:413
extra pred: SELECT professional_id,    role_code,    email_address FROM  professionals p WHERE professional_id not in (SELECT professional_id                 FROM  treatments t                 WHERE dog_id in (SELECT dog;
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:414
extra pred: SELECT professional_id,        role_code,        email_address    FROM  professionals prof    WHERE professional_id not in (SELECT professional_id                      FROM  professionals prof                      JOIN treatments trt on professional_id;
extra gold: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id
neval_err_num:415
extra pred: SELECT owner_id,        first_name,        last_name    FROM  owners    LEFT JOIN (SELECT dog_id,             owner_id          FROM  dogs) ON owner_id = owner_id    WHERE owned_;
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:416
extra pred: SELECT owner_id,        first_name,        last_name    FROM  owners    WHERE owner_id in (SELECT owner_id                 FROM  dog                 GROUP BY owner_id                 ORDER BY count(*) DESC                 LIMIT 1);
extra gold: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:417
medium pred: SELECT professional_id,    role_code,    first_name FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(*);
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:418
medium pred: SELECT professional_id,    role_code,    first_name FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(*);
medium gold: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:419
extra pred: SELECT breed_name    FROM  breeds    LEFT JOIN (SELECT breed_code,             count(*)          FROM  dogs          GROUP BY breed_code) ON breed_code = breed_code;
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:420
extra pred: SELECT breed_name    FROM  breeds    JOIN  (SELECT breed_code,            count(*)        FROM  dogs        GROUP BY breed_code        ORDER BY count(*) DESC        LIMIT 1)    ON breeds;
extra gold: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:421
extra pred: SELECT owner_id,    last_name FROM  (SELECT owner_id,         dog_id,         count(*)     FROM  dog d     LEFT JOIN treatments t on dog_id = dog_id     WHERE d;
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:422
extra pred: SELECT owner_id,    last_name FROM  (SELECT owner_id,         last_name,         sum(cost_of_treatment)     FROM  dog d join treatments t on dog_id = dog_;
extra gold: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1
nextra pred: SELECT treatment_type_description FROM  treatment_types WHERE treatment_type_code in (SELECT treatment_type_code                        FROM  treatments                        ORDER BY cost_of_treatment asc                        LIMIT 1);
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
nextra pred: SELECT treatment_type_description FROM  treatment_types WHERE treatment_type_code in (SELECT treatment_type_code                        FROM  treatments                        ORDER BY cost_of_treatment asc                        LIMIT 1);
extra gold: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1
neval_err_num:423
extra pred: SELECT owner_id,    zip_code FROM  owners WHERE owner_id in (SELECT owner_id              FROM  dog              WHERE dog_id in (SELECT dog_id                         FROM  treat                         WHERE professional_id in;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:424
extra pred: SELECT owner_id,    zip_code FROM  owners WHERE owner_id in (SELECT owner_id              FROM  dog              WHERE dog_id in (SELECT dog_id                         FROM  treat                         WHERE professional_id in;
extra gold: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1
neval_err_num:425
medium pred: SELECT professional_id,    cell_number FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(treatment_type_;
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:426
medium pred: SELECT DISTINCT professional_id, cell_number FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               GROUP BY professional_id               HAVING count(*) >= 2) ORDER BY;
medium gold: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2
neval_err_num:427
extra pred: SELECT first_name,    last_name FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               WHERE cost_of_treatment < (SELECT avg(cost_of_treatment);
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
neval_err_num:428
extra pred: WITH avg_treatment_cost  SELECT avg(cost_of_treatment)  FROM  treatments ) SELECT first_name,    last_name FROM  professionals p JOIN  treatments t on professional_id = t;
extra gold: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )
nmedium pred: SELECT date_of_treatment,        first_name    FROM  treatments        JOIN professionals ON professional_id = professional_id    ORDER BY date_of_treatment asc;
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
nmedium pred: SELECT date_of_treatment,        first_name    FROM  treatments        JOIN professionals ON professional_id = professional_id    ORDER BY date_of_treatment asc;
medium gold: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id
nmedium pred: SELECT treatment_id,        cost_of_treatment,        treatment_type_description    FROM  treatments join treatment_types        ON treatment_type_code = treatment_type_code    ORDER BY ;
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
nmedium pred: SELECT treatment_id,    cost_of_treatment,    treatment_type_description FROM  treatments join treatment_types on treatment_type_code = treatment_type_code ORDER BY ;
medium gold: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code
neval_err_num:429
medium pred: SELECT first_name,        last_name,        size_description    FROM  owners join dogs on owner_id = owner_id join sizes on size_code = size_code    WHERE owner_id = owner;
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:430
medium pred: SELECT first_name,        last_name,        size_description    FROM  owners    LEFT JOIN dogs on owner_id = owner_id    LEFT JOIN sizes on size_code = size_code;
medium gold: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:431
medium pred: SELECT first_name, name    FROM  owners o,       dogs d    WHERE owner_id = owner_id;
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:432
medium pred: SELECT first_name,        name    FROM  owners       left join dogs on owner_id = owner_id    ORDER BY first_name;
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id
neval_err_num:433
extra pred: SELECT name,        date_of_treatment    FROM  dog    LEFT JOIN (SELECT dog_id,             date_of_treatment          FROM  treatments          ORDER BY date_of_treatment ASC NULLS FIRST) treatment ON dog_id = dog_id    WHERE;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:434
extra pred: SELECT name,    treatment_type_description FROM  (SELECT dog_id,         name,         date_of_birth,         date_of_treatment     FROM  Dogs d     WHERE breed_code = (SELECT b;
extra gold: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )
neval_err_num:435
medium pred: SELECT first_name, name    FROM  owners o join dogs d on owner_id = owner_id    WHERE state = 'VA';
medium gold: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'
neval_err_num:436
medium pred: SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  (SELECT dog_id,            date_of_birth,            date_arrived,            date_departed        FROM  dogs        WHERE dog_id in (SELECT;
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:437
medium pred: SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  (SELECT dog_id,            date_of_birth,            date_arrived,            date_departed        FROM  dog_table        WHERE dog_id in (SELECT dog_id;
medium gold: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id
neval_err_num:438
extra pred: SELECT last_name    FROM  (SELECT owner_id,            date_of_birth        FROM  Dogs d        WHERE owner_id is not null        ORDER BY date_of_birth asc) t inner join Owners o on owner_id = o;
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
neval_err_num:439
extra pred: SELECT last_name    FROM  (SELECT dog_id,           owner_id,           last_name        FROM  Dogs d        JOIN  Owners o ON owner_id = owner_id        WHERE age = 'Puppy'        ORDER;
extra gold: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )
neval_err_num:440
medium pred: SELECT DISTINCT email_address    FROM  professionals    WHERE state in ('Hawaii', 'Wisconsin');
medium gold: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'
nmedium pred: SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  dogs    ORDER BY dog_id;
medium gold: SELECT date_arrived ,  date_departed FROM Dogs
nmedium pred: SELECT dog_id,        date_of_birth,        date_arrived,        date_departed    FROM  dogs    ORDER BY dog_id;
medium gold: SELECT date_arrived ,  date_departed FROM Dogs
neasy pred: SELECT count(*) FROM  (SELECT DISTINCT dog_id     FROM  Treatments);
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neval_err_num:441
easy pred: SELECT count(*)  FROM  dog_table  WHERE dog_id in (SELECT dog_id           FROM  treatments);
easy gold: SELECT count(DISTINCT dog_id) FROM Treatments
neval_err_num:442
easy pred: SELECT count(distinct professional_id) FROM  professionals p LEFT JOIN treatments t  ON professional_id = professional_id WHERE dog_id is not null;
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments
neval_err_num:443
easy pred: SELECT count(distinct professional_id) FROM  professionals p WHERE professional_id in (SELECT professional_id               FROM  treatments t               WHERE dog_id in (SELECT dog_id                         FROM;
easy gold: SELECT count(DISTINCT professional_id) FROM Treatments
neval_err_num:444
medium pred: SELECT role_code,        first_name,        street,        city,        state     FROM professionals     WHERE city ilike '%West%'     ORDER BY role_code, profession;
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
neval_err_num:445
medium pred: SELECT role_code,        street,        city,        state     FROM professionals     WHERE city ilike '%West%'     ORDER BY role_code;
medium gold: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'
nmedium pred: SELECT first_name,        last_name,        email_address    FROM  owners    WHERE state like '%North%'    ORDER BY first_name, last_name;
medium gold: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'
neval_err_num:446
hard pred: WITH avg_age  SELECT avg(cast(age))  FROM  Dogs ) SELECT count(*) FROM  Dogs WHERE cast(age) < (SELECT avg_age from avg_age);
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
neval_err_num:447
hard pred: SELECT count(*) FROM  (SELECT dog_id     FROM  dogs     WHERE age::float < (SELECT avg(age::float)               FROM  dogs));
hard gold: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )
nmedium pred: SELECT cost_of_treatment FROM  treatments WHERE treatment_id = (SELECT MAX(treatment_id)                 FROM  treatments);
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
nmedium pred: SELECT cost_of_treatment FROM  treatments WHERE date_of_treatment = (SELECT MAX(date_of_treatment)                    FROM  treatments) ORDER BY cost_of_treatment DESC;
medium gold: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1
nextra pred: SELECT count(*) FROM  (SELECT dog_id     FROM  Dogs     WHERE dog_id not in (SELECT dog_id                FROM  Treatments));
extra gold: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )
neval_err_num:448
extra pred: SELECT count(*) FROM  dog WHERE dog_id not in (SELECT dog_id              FROM  treatments);
extra gold: select count(*) from dogs where dog_id not in ( select dog_id from treatments )
neval_err_num:449
extra pred: SELECT count(*)Number of owners temporarily do not have any dogs" FROM  (SELECT DISTINCT owner_id     FROM  owners     LEFT JOIN dogs on owner_id = owner_id     WHERE dog_id is null     AND  owner_;
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
neval_err_num:450
extra pred: SELECT count(*)Number of owners who do not own any dogs at this " FROM  owners WHERE owner_id not in (select owner_id from dogs);
extra gold: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )
neval_err_num:451
extra pred: SELECT count(*) FROM  professionals p WHERE professional_id not in (select professional_id                 from  treatments);
extra gold: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )
nmedium pred: SELECT dog_id,        name,        age,        weight    FROM  dogs    WHERE abandoned_yn = '1';
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
nmedium pred: SELECT dog_id,        name,        age,        weight    FROM  dogs    WHERE abandoned_yn = '1';
medium gold: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1
neval_err_num:452
easy pred: SELECT AVG(CAST(age))    FROM  Dogs;
easy gold: SELECT avg(age) FROM Dogs
neval_err_num:453
easy pred: SELECT AVG(CAST(age))    FROM  Dogs;
easy gold: SELECT avg(age) FROM Dogs
neval_err_num:454
easy pred: SELECT dog_id,        age    FROM  (SELECT dog_id,            age        FROM  dogs        WHERE age!= ''        ORDER BY age asc)    LIMIT 1;
easy gold: SELECT max(age) FROM Dogs
neval_err_num:455
easy pred: SELECT dog_id,        age    FROM  (SELECT dog_id,            age        FROM  dogs        WHERE age!= ''        ORDER BY age asc)    LIMIT 1;
easy gold: SELECT max(age) FROM Dogs
nmedium pred: SELECT charge_type,        charge_amount    FROM  charges    ORDER BY charge_type;
medium gold: SELECT charge_type ,  charge_amount FROM Charges
nmedium pred: SELECT charge_type,        charge_amount    FROM  charges    ORDER BY charge_type;
medium gold: SELECT charge_type ,  charge_amount FROM Charges
neval_err_num:456
easy pred: SELECT max(charged_amount)::float    FROM  charges    WHERE charge_type = 'Most Expensive Charge Type';
easy gold: SELECT max(charge_amount) FROM Charges
nmedium pred: SELECT first_name,        last_name,        email_address,        cell_number,        home_phone    FROM  professionals;
medium gold: SELECT email_address ,  cell_number ,  home_phone FROM professionals
neval_err_num:457
medium pred: SELECT breed_name,        size_description    FROM  breeds, sizes    WHERE breed_code = size_code    GROUP BY breed_name, size_description    ORDER BY breed_;
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
nmedium pred: SELECT DISTINCT breed_name,            size_description     FROM dogs     JOIN breeds ON breed_code = breed_code     JOIN sizes ON size_code = size_code;
medium gold: SELECT DISTINCT breed_code ,  size_code FROM dogs
neval_err_num:458
medium pred: SELECT first_name,        treatment_type_description    FROM  professionals        LEFT JOIN treatments           ON professional_id = professional_id    ORDER BY first_name;
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
neval_err_num:459
medium pred: SELECT first_name,    treatment_type_description FROM  professionals p join treatments t on professional_id = professional_id;
medium gold: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code
nmedium pred: SELECT birth_year,    citizenship    FROM singer    ORDER BY birth_year asc;
medium gold: SELECT Birth_Year ,  Citizenship FROM singer
nmedium pred: SELECT name,        birth_year,        citizenship    FROM  singer    ORDER BY name;
medium gold: SELECT Birth_Year ,  Citizenship FROM singer
neval_err_num:460
medium pred: SELECT name    FROM  singer    WHERE birth_year in (1948, 1949);
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
nmedium pred: SELECT name    FROM  singer    WHERE birth_year = 1948    UNION    SELECT name    FROM  singer    WHERE birth_year = 1949;
medium gold: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949
nmedium pred: SELECT name FROM  singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions)                   FROM  singer) ORDER BY net_worth_millions DESC;
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
nmedium pred: SELECT name FROM  singer WHERE net_worth_millions = (SELECT MAX(net_worth_millions)                   FROM  singer);
medium gold: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1
neval_err_num:461
medium pred: SELECT citizenship,    count(*) FROM  singer GROUP BY citizenship ORDER BY number_of_singers desc;
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
neval_err_num:462
medium pred: SELECT citizenship,    count(*) FROM  singer GROUP BY citizenship ORDER BY num_singers desc;
medium gold: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship
neval_err_num:463
hard pred: SELECT citizenship,        count(*)    FROM  singer    GROUP BY citizenship    ORDER BY frequency DESC    LIMIT 1;
hard gold: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:464
hard pred: SELECT citizenship,    count(*) FROM  singer GROUP BY citizenship ORDER BY frequency DESC LIMIT 1;
hard gold: select citizenship from singer group by citizenship order by count(*) desc limit 1
neval_err_num:465
medium pred: SELECT citizenship,    max(net_worth_millions) FROM  singer GROUP BY citizenship ORDER BY max_net_worth desc;
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
nmedium pred: SELECT citizenship,    max(net_worth_millions) FROM  singer GROUP BY citizenship HAVING max(net_worth_millions) > 0;
medium gold: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship
neval_err_num:466
medium pred: SELECT name,    sum(sales) FROM  singer join song on singer_id = singer_id GROUP BY name ORDER BY total_sales desc;
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
neval_err_num:467
medium pred: SELECT name,    sum(sales) FROM  singer join song on singer_id = singer_id GROUP BY name ORDER BY total_sales desc;
medium gold: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name
nhard pred: SELECT DISTINCT citizenship    FROM  singer    WHERE birth_year between 1945 and 1955;
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
nhard pred: SELECT DISTINCT citizenship FROM  singer WHERE birth_year between 1945 and 1955;
hard gold: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955
nmedium pred: SELECT feature_type_name    FROM  ref_feature_types    WHERE feature_type_code = 'AIRCON';
medium gold: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  "AirCon"
neval_err_num:468
medium pred: SELECT property_type_code,        property_type_description    FROM  properties        LEFT JOIN ref_property_types            ON property_type_code = property_type_code    WHERE property_type_code = 'PROPTYPE;
medium gold: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code
neval_err_num:469
hard pred: SELECT property_name    FROM  properties    WHERE property_type_code in ('H', 'A')      and room_count > 1;
hard gold: SELECT property_name FROM Properties WHERE property_type_code  =  "House" UNION SELECT property_name FROM Properties WHERE property_type_code  =  "Apartment" AND room_count  >  1
nn                    easy                 medium               hard                 extra                all                 
count                248                  446                  174                  166                  1034                
=====================   EXECUTION ACCURACY     =====================
execution            0.609                0.267                0.161                0.054                0.297               
====================== EXACT MATCHING ACCURACY =====================
exact match          0.601                0.220                0.121                0.024                0.263               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.857                0.816                0.946                0.778                0.844               
select(no AGG)       0.872                0.856                0.946                0.778                0.867               
where                0.820                0.565                0.409                0.353                0.588               
where(no OP)         0.830                0.584                0.500                0.529                0.633               
group(no Having)     0.545                0.682                0.333                0.500                0.574               
group                0.455                0.591                0.333                0.125                0.447               
order                0.556                0.238                0.250                0.381                0.314               
and/or               1.000                0.935                0.904                0.915                0.942               
IUEN                 0.000                0.000                1.000                0.000                0.500               
keywords             0.836                0.552                0.432                0.390                0.600               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.677                0.457                0.402                0.211                0.461               
select(no AGG)       0.690                0.480                0.402                0.211                0.474               
where                0.759                0.478                0.287                0.128                0.435               
where(no OP)         0.769                0.495                0.351                0.191                0.469               
group(no Having)     0.300                0.113                0.051                0.051                0.100               
group                0.250                0.098                0.051                0.013                0.077               
order                0.909                0.333                0.145                0.101                0.264               
and/or               0.988                0.993                0.956                0.993                0.986               
IUEN                 0.000                0.000                0.024                0.000                0.013               
keywords             0.747                0.323                0.184                0.096                0.325               
---------------------- PARTIAL MATCHING F1 --------------------------
select               0.757                0.586                0.565                0.332                0.597               
select(no AGG)       0.770                0.615                0.565                0.332                0.613               
where                0.788                0.518                0.338                0.187                0.500               
where(no OP)         0.798                0.536                0.412                0.281                0.538               
group(no Having)     0.387                0.194                0.089                0.092                0.170               
group                0.323                0.168                0.089                0.023                0.132               
order                0.690                0.278                0.184                0.160                0.287               
and/or               0.994                0.963                0.929                0.953                0.963               
IUEN                 1.000                1.000                0.047                1.000                0.026               
keywords             0.789                0.407                0.258                0.155                0.422               
