
eval_err_num:1
easy pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT count(*) FROM singer
neval_err_num:2
easy pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT count(*) FROM singer
neval_err_num:3
medium pred: show name, country, age for all singers ordered by age from the youngest to the oldest.
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
neval_err_num:4
medium pred: SELECT * FROM singer_in_concertWHERE singer_in_concert.singer_id = 1ORDER BY singer_in_concert.singer_id, singer_in_concert.concert_idSELECT * FROM singer_in_concertWHERE singer_in_concert
medium gold: SELECT name ,  country ,  age FROM singer ORDER BY age DESC
neval_err_num:5
medium pred: show the name and the release year of the song by the oldest singer.
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
neval_err_num:6
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'
neval_err_num:7
medium pred: |country,singer_id,singer_name,song_name,song_release_year,age||:---:|:---:|:---:|:---:|:---:||USA,1,John,John,2000,20||USA,2
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:8
medium pred: select country, count(singer_id) from singer_in_concert group by country;select country, count(singer_id) from singer_in_concert where country = 'United States';select country, count(singer_id) from singer_in_concert where
medium gold: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1
neval_err_num:9
easy pred: select * from singer_in_concertwhere singer_in_concert.singer_id = 1and singer_in_concert.concert_id = 1and singer_in_concert.singer_id = 2and singer_in_concert.concert_
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20
neval_err_num:10
easy pred: list all songs by singers above the average age.|table singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]|list all songs by singers above the average age.|table singer, columns = [
easy gold: SELECT DISTINCT country FROM singer WHERE age  >  20
neval_err_num:11
medium pred: select * from singer_in_concertwhere singer_in_concert.singer_id = 1and singer_in_concert.singer_id = singer.singer_idand singer_in_concert.concert_id = 1and singer_in_
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
neval_err_num:12
medium pred: select * from stadium where capacity >= 5000 and capacity <= 10000select * from stadium where capacity >= 5000 and capacity <= 10000select * from stadium where capacity >= 5000 and capacity <= 10000select *
medium gold: SELECT country ,  count(*) FROM singer GROUP BY country
neval_err_num:13
hard pred: select * from stadium where capacity >= 5000 and capacity <= 10000select * from stadium where capacity >= 5000 and capacity <= 10000select * from stadium where capacity >= 5000 and capacity <= 10000select *
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
neval_err_num:14
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)
neval_err_num:15
medium pred: |what is the average and maximum capacities for all stadiums?||what is the average and maximum capacities for all stadiums?||what is the average and maximum capacities for all stadiums?||what is the average and maximum capacities for all stadiums?||what is
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
neval_err_num:16
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000
neval_err_num:17
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: select max(capacity), average from stadium
nmedium pred: select * from concert where year = 2014 or year = 2015;select * from concert where year = 2014 or year = 2015 and stadium.capacity > 10000;select * from concert where year = 2014 or
medium gold: select avg(capacity) ,  max(capacity) from stadium
nmedium pred: SELECT * FROM concert WHERE year = 2014 OR year = 2015;SELECT * FROM concert WHERE year = 2014 OR year = 2015;SELECT * FROM concert WHERE year = 2014 OR year = 2015;
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
neval_err_num:18
medium pred: show the number of concerts in each stadium.
medium gold: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1
neval_err_num:19
medium pred: for each singer, how many concerts play there?|for each concert, how many singers play there?|for each singer, how many concerts play there?|for each concert, how many singers play there?|for each singer, how many concerts play there?|for each concert, how many singers play there?|for each
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
neval_err_num:20
medium pred: select stadium.name, stadium.capacityfrom stadiumwhere stadium.capacity > (select stadium.capacity from stadium where stadium.year >= 2014)order by stadium.capacity desclimit 1;select stadium.name, stadium.capacityfrom stadiumwhere stadium.capacity
medium gold: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015
neval_err_num:21
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:22
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id
neval_err_num:23
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:24
extra pred: show the concert names without any stadium.
extra gold: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1
neval_err_num:25
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:26
hard pred: show names for all stadiums except for stadiums having a concert in year 2014.
hard gold: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:27
hard pred: What is the name of the stadium that hosted the most concerts in 2014?|What is the name of the stadium that hosted the most concerts in 2014?|What is the name of the stadium that hosted the most concerts in 2014?|What is the name of the
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
neval_err_num:28
hard pred: select * from concertswhere concert_id in (select concert_id from singer_in_concert)order by concert_id,concert_name;select * from concertswhere concert_id in (select concert_id from singer_in_concert)order by concert_
hard gold: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)
neval_err_num:29
hard pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
hard gold: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30
neval_err_num:30
hard pred: list stadium names and number of concerts for each stadium.|table singer,columns=singer_id,name,country,song_name,song_release_year,age,is_male|table stadium,columns=stadium_id,location,name,capacity,highest,lowest,average|
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:31
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014
neval_err_num:32
medium pred: list all concerts in year 2014.|table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]|table singer, columns = [*,singer_id,name,country,song_name,song_release_year,age
medium gold: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id
neval_err_num:33
medium pred: |what are the names of the concerts that took place in 2014?||what are the names of the concerts that took place in 2014?||what are the names of the concerts that took place in 2014?||what are the names of the concerts that took place in
medium gold: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id
neval_err_num:34
medium pred: select * from singer_in_concert where singer_in_concert.singer_id = 1 and singer_in_concert.song_name = 'hey'select * from singer_in_concert where singer_in_concert.singer_id = 1
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:35
medium pred: select * from singer_in_concert where singer_id = 1 and song_name = 'hey'select * from singer_in_concert where singer_id = 2 and song_name = 'hey'select * from singer_in_
medium gold: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id
neval_err_num:36
hard pred: select * from stadium where year = 2014 or year = 2015select * from stadium where year = 2014 or year = 2015select * from stadium where year = 2014 or year = 2015select *
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:37
hard pred: select * from stadiumwhere name = 'Stadium A'and year = 2014and capacity > 10000and location = 'Europe'and name = 'Stadium B'and year = 2015and capacity >
hard gold: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014
neval_err_num:38
medium pred: find the number of concerts happened in the stadium with the lowest capacity.
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:39
medium pred: find the number of pets whose weight is heavier than 10.
medium gold: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'
neval_err_num:40
extra pred: how much does the youngest dog weigh?||||||||||||||||||||||||||||||
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
neval_err_num:41
extra pred: list the maximum weight and type for each type of pet.
extra gold: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015
neval_err_num:42
hard pred: select * from has_pet where petid in (select petid from pets where pettype = 'dog')select * from has_pet where petid in (select petid from pets where pettype = 'dog')select * from has_pet where
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neval_err_num:43
hard pred: select distinct type from pets;select distinct pet_age from pets;select distinct weight from pets;select distinct pet_age, weight from pets;select distinct pet_age, weight from pets where pet_age > 10;select distinct pet_age, weight from
hard gold: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)
neasy pred: select * from has_pet where petid = 1;select * from has_pet where petid = 2;select * from has_pet where petid = 3;select * from has_pet where petid = 4;select
easy gold: SELECT count(*) FROM pets WHERE weight  >  10
neval_err_num:44
easy pred: select * from student where has_pet.petid in (select petid from pets where pettype = 'cat' or pettype = 'dog')select * from student where has_pet.petid in (select petid from pets where pettype = '
easy gold: SELECT count(*) FROM pets WHERE weight  >  10
neval_err_num:45
medium pred: find the first name of students who have both cat and dog pets.
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:46
medium pred: select st.stuid, st.lname, st.fname, st.age, st.sex, st.major, st.advisor, st.city_codefrom student stwhere st.petid is nulland st.stuid not in (select st.stuid from pets
medium gold: SELECT weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:47
medium pred: select * from student where not exists (select * from pets where petid = student.stuid)select * from student where not exists (select * from pets where petid = student.stuid and pet_age > 10)select * from
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
neval_err_num:48
medium pred: select first_name, age from student where has_pet.petid = 1 and has_pet.pettype = 'dog' and not exists (select * from pets where petid = 1 and pettype = 'cat')||||
medium gold: SELECT max(weight) ,  petType FROM pets GROUP BY petType
nmedium pred: select * from pets where pet_age = (select min(pet_age) from pets)select * from pets where pet_age = (select max(pet_age) from pets)select * from pets where pet_age = (select avg(
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
nmedium pred: select * from has_pet where petid = 1;select * from pets where petid = 1;select * from student where stuid = 1;select * from student where stuid = 2;select * from student where stuid
medium gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20
neval_err_num:49
hard pred: find the id and weight of all pets whose age is older than 1.
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:50
hard pred: select avg(age) as "Average Age", max(age) as "Max Age" from has_pet where pettype = 'dog' group by pettype;select avg(age) as "Average Age", max(age) as "Max Age" from has_pet
hard gold: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'
neval_err_num:51
easy pred: select avg(weight) from has_pet where pettype = 'dog'select avg(weight) from has_pet where pettype = 'cat'select avg(weight) from has_pet where pettype = 'fish'select avg(weight) from has_pet
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:52
easy pred: select st.stuid, st.lname, st.fname, st.age, st.sex, st.major, st.advisor, st.city_codefrom student stjoin pets p on st.petid = p.petidwhere p.pettype = '
easy gold: SELECT count(DISTINCT pettype) FROM pets
neval_err_num:53
extra pred: select * from student, has_pet where student.stuid = has_pet.stuid and has_pet.petid = 1;select * from student, has_pet where student.stuid = has_pet.stuid and has_pet.petid
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:54
extra pred: find the id of the pet owned by student whose last name is ‘smith’ and whose age is ‘25’.|
extra gold: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'
neval_err_num:55
extra pred: select st.stuid, count(p.petid) as pet_countfrom student stleft join pets p on st.stuid = p.petidgroup by st.stuidhaving count(p.petid) > 0order by st.stuid;
extra gold: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'
neval_err_num:56
extra pred: select st.stuid, st.lname, st.fname, st.age, st.sex, st.major, st.advisor, st.city_codefrom student stwhere st.petid in (select petid from pets where pet_age > 1)order
extra gold: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'
neval_err_num:57
extra pred: select * from student, has_pet where student.stuid = has_pet.stuid and student.lname = 'Smith' and student.fname = 'John' and student.age > 18 and student.sex = 'M' and student.major
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:58
extra pred: find the last name of the student who has a dog that is age 3.
extra gold: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:59
hard pred: find the average age of students who have a pet.
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:60
hard pred: how many countries are there?|how many model names are there?|how many model makers are there?|how many cars are there?|how many car names are there?|how many models are there?|how many countries are there?|how many model makers are there?|how many cars are there?|how
hard gold: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'
neval_err_num:61
extra pred: what is the number of countries?||2||what is the number of model?||3||what is the number of car makers?||4||what is the number of model names?||5||what is the number of cars?||6||what
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:62
extra pred: how many cars does each car maker have? list the car maker id, car maker name and the number of cars.||||||||||||||||||||||
extra gold: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')
neval_err_num:63
medium pred: for each country, list its id, name, and how many continents it has?|for each country, list its id, name, and how many continents it has?|for each continent, list its id, name, and how many countries it has?|for each country, list its id, name, and
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:64
medium pred: how many car makers are listed?|how many models are listed?|how many cars are listed?|how many cars are listed?|how many cars are listed?|how many cars are listed?|how many cars are listed?|how many cars are listed?|how many cars are listed?|how many cars are
medium gold: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1
neval_err_num:65
medium pred: |countries||---||1||2||3||4||5||6||7||8||9||10||11||12||13||14||15
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
neval_err_num:66
medium pred: how many cars does each model produce? list model full name, id and the number.|countries, continents, model_list, car_makers, car_names, cars_data|countries.continent, car_makers.country, model_list.maker, car_names.model, cars_
medium gold: SELECT petid ,  weight FROM pets WHERE pet_age  >  1
neval_err_num:67
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:68
medium pred: select * from cars_data where horsepower = min(horsepower)||||||||||||||||||||||||||
medium gold: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype
neval_err_num:69
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:70
medium pred: table car_makers, columns = [*,id,maker,fullname,country]table car_names, columns = [*,makeid,model,make]table cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight
medium gold: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype
neval_err_num:71
medium pred: table car_makers, columns = [*,id,maker,fullname,country]table car_names, columns = [*,makeid,model,make]table cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:72
medium pred: what is the name of the different car makers who produced a car in 1970?|||||||||||||||||||||||||
medium gold: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid
neval_err_num:73
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
neval_err_num:74
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'
neval_err_num:75
medium pred: what are the different models for the cars produced after 1980?|||||||||||||||||||||||||||
medium gold: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid
neval_err_num:76
medium pred: how many car makers are there in each countries? list the country name and the count.|countries.continent |countries.country |model_list.maker |car_names.model |car_makers.id |car_names.makeid |cars_data.id
medium gold: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid
neval_err_num:77
medium pred: |countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|countries|
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:78
medium pred: which of the countries has the most car makers? list the country name.|countries.continent = continents.continent,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars
medium gold: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1
neval_err_num:79
hard pred: |countries||--||continent||--||country||--||maker||--||model||--||id||--||name||--||country||--||
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:80
hard pred: how many car models are produced by each country? only list the count and the country full name.|countries.continent = continents.continent,|countries.country = countries.countryid,|model_list.maker = car_makers.id,|car_names.model
hard gold: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'
neval_err_num:81
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)
neval_err_num:82
extra pred: what is the horsepower of the car make amc hornet sportabout (sw)?|||||||||||||||||||||||||
extra gold: select avg(age) from student where stuid not in (select stuid from has_pet)
neval_err_num:83
easy pred: how much does the car accelerate that makes amc hornet sportabout (sw)?|||||||||||||||||||||||||
easy gold: SELECT count(*) FROM CONTINENTS;
neval_err_num:84
easy pred: how many car makers are there in france?|countries.continent = 'France'|car_makers.country = 'France'|model_list.maker = 'Peugeot'|car_names.model = 'Citroen'|cars
easy gold: SELECT count(*) FROM CONTINENTS;
neval_err_num:85
medium pred: what is the number of makers of care in france?||||||||||||||||||||||||||||
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:86
medium pred: how many car models are produced in the usa?|countries.continent = continents.continent = continents.continent = continents.continent = continents.continent = continents.continent = continents.continent = continents.continent = continents.continent = continents
medium gold: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;
neval_err_num:87
easy pred: |countries.continent = continents.continent = 'United States'||car_makers.country = countries.country = 'United States'||model_list.maker = car_makers.id = 'Ford'||car_names.
easy gold: SELECT count(*) FROM COUNTRIES;
neval_err_num:88
easy pred: what is the average weight(weight) of the cars with 4 cylinders?||what is the average horsepower(horsepower) of the cars with 4 cylinders?||what is the average weight(weight) of the cars with 4 cylinders?||what is the average horsepower(horsepower) of
easy gold: SELECT count(*) FROM COUNTRIES;
neval_err_num:89
medium pred: |what is the average weight of all the cars with 4 cylinders?||what is the average horsepower of all the cars with 4 cylinders?||what is the average weight of all the cars with 4 cylinders?||what is the average horsepower of all the cars with 4 cylinders?|
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:90
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;
neval_err_num:91
hard pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:92
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;
neval_err_num:93
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:94
extra pred: |countries||--||continent||--||country||--||maker||--||model||--||id||--||name||--||countryid||--|
extra gold: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)
neval_err_num:95
extra pred: |countries.continent |countries.country |car_makers.country |car_makers.id |model_list.maker |car_names.model |cars_data.id ||:---------------:|:---------------:|:---------------:|:
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:96
extra pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
extra gold: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';
neval_err_num:97
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
neval_err_num:98
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);
neval_err_num:99
hard pred: select *, avg(weight) as weight, avg(year) as year from cars_data group by year, avg(weight) order by avg(year) descselect *, avg(weight) as weight, avg(year) as year from cars_data group by year, avg(weight) order
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
neval_err_num:100
hard pred: |countries.continent |countries.country |countries.countryid |countries.continent |countries.countryid |countries.continent |countries.countryid |countries.continent |countries.countryid |countries.cont
hard gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;
neval_err_num:101
hard pred: |countries.continent |countries.country |model_list.maker |car_names.model |cars_data.id ||:---------------:|:---------------:|:---------------:|:---------------:|:---------------:||France |
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:102
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;
neval_err_num:103
extra pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:104
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;
neval_err_num:105
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;
neval_err_num:106
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;
neval_err_num:107
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
neval_err_num:108
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';
neval_err_num:109
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
neval_err_num:110
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';
neval_err_num:111
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:112
hard pred: |countries.continent |countries.country |model_list.maker |car_names.model |cars_data.id ||:---------------:|:---------------:|:---------------:|:---------------:|:---------------:|| |
hard gold: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';
neval_err_num:113
easy pred: select * from car_makers, cars_data, model_list, countries, continents, model_list, car_names, cars_data, model_list, countries, continents, model_list, car_names, cars_data, model_list, countries, continents, model_list, car_
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
neval_err_num:114
easy pred: |count(*)||--||4|||||||||||||||||||||||||||||||||||||
easy gold: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;
neval_err_num:115
medium pred: |count(*)||--||4|||||||||||||||||||||||||||||||||||||
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
nmedium pred: SELECT * FROM cars_data WHERE year = 1980;||||||||||||||||||||||||||
medium gold: select min(weight) from cars_data where cylinders  =  8 and year  =  1974
neval_err_num:116
medium pred: in 1980, how many cars were made?||in 1980, how many cars were made?||in 1980, how many cars were made?||in 1980, how many cars were made?||in 1980, how many cars were made?|
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
neval_err_num:117
medium pred: |countries.continent = continents.continent = 'america'||car_makers.country = countries.countryid = 'america'||model_list.maker = car_makers.id = 'american'||car_names
medium gold: SELECT Maker ,  Model FROM MODEL_LIST;
neval_err_num:118
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:119
medium pred: |countries||continent||country||countryid||continentid||countryname||continentname||model||maker||modelid||makerid||id||name||country||
medium gold: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;
neval_err_num:120
easy pred: what are the names and ids of all makers with more than 3 models?||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
neval_err_num:121
easy pred: ||||||||||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;
neval_err_num:122
medium pred: table cars, columns = [*,id,year,weight]table car_makers, columns = [*,id,maker,country]table car_names, columns = [*,makeid,model,year]table cars_data, columns = [*,id,year,
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:123
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;
neval_err_num:124
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:125
extra pred: for model volvo, how many cylinders does the car with the most accelerate have?||||||||||||||||||||||||||
extra gold: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;
neval_err_num:126
extra pred: for a volvo model, how many cylinders does the version with least accelerate have?||||||||||||||||||||||||||
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:127
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:128
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;
neval_err_num:129
hard pred: |countries.continent = continents.continent = 2||countries.continent = continents.continent = 3||countries.continent = continents.continent = 4||countries.continent = continents.continent
hard gold: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;
neasy pred: SELECT * FROM cars_data WHERE cylinders > 6;| | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;
neval_err_num:130
easy pred: what is the number of cars with over 6 cylinders?||||||||||||||||||||||||||||
easy gold: select avg(horsepower) from cars_data where year  <  1980;
neval_err_num:131
medium pred: for the cars with 4 cylinders, which model has the largest horsepower?|||||||||||||||||||||||||||
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
neval_err_num:132
medium pred: for all of the 4 cylinder cars, which model has the most horsepower?||||||||||||||||||||||||||
medium gold: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';
neval_err_num:133
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
neval_err_num:134
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;
neval_err_num:135
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neval_err_num:136
hard pred: |countries.continent = continents.continent = 'Europe'||countries.continent = continents.continent = 'Asia'||countries.continent = continents.continent = 'Africa'||countries.continent
hard gold: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;
neval_err_num:137
easy pred: |countries.continent = continents.continent = 'Europe'||countries.continent = continents.continent = 'Asia'||countries.continent = continents.continent = 'Africa'||countries.continent
easy gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
neval_err_num:138
easy pred: table car_makers, columns = [*,id,maker,fullname,country]table car_names, columns = [*,makeid,model,make]table cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight
easy gold: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;
neval_err_num:139
easy pred: |country||---||US||||||||||||||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
neval_err_num:140
easy pred: what is the name of the largest airport in the united states?||what is the name of the largest airport in the united states?||what is the name of the largest airport in the united states?||what is the name of the largest airport in the united states?||what is the name
easy gold: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;
neval_err_num:141
medium pred: select * from flights where sourceairport = 'jfk' and destairport = 'boston';|airline |abbreviation |country |countryabbrev ||jetblue airways |JFK |US |USA ||jet
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
neval_err_num:142
medium pred: which abbreviation corresponds to united airlines?||||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';
neval_err_num:143
medium pred: table airlines, columns = [*,uid,airline,abbreviation]|list all airport names and their country codes in "usa".|table airports, columns = [*,country,countryabbrev]|list all flight numbers in "usa".|table flights, columns =
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:144
medium pred: what are the airport codes for airports in the usa?|||||||||||||||||||||||||||||
medium gold: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:145
extra pred: list the airport code and name in the city of anthony.|table airports, columns = [*,city,airportcode,airportname,country,countryabbrev]|list the airport code and name in the city of anthony.|table flights, columns = [*,air
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:146
extra pred: give the city and country of the airport corresponding to the city anthony.||||||||||||||||||||||||||
extra gold: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;
neval_err_num:147
easy pred: table airlines, columns = [*,uid,airline,abbreviation,country]|count(*) as "count"|where country = "United States"|limit 10|sort count|format count|limit 10|format count|format count|
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neval_err_num:148
easy pred: table airlines, columns = [*,uid,airline,abbreviation,country]|count airlines|where country = "United States"|format count|sort count desc|limit 10|format count|sort count desc|limit 10|format count
easy gold: select distinct year from cars_data where weight between 3000 and 4000;
neval_err_num:149
medium pred: table airports, columns = [*,airportcode,airportname,country]|count airports||count airports||count airports||count airports||count airports||count airports||count airports||count airports||count airports||count airports
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
neval_err_num:150
medium pred: return the number of  airports.airportcode|||||||||||||||||||||||||||||
medium gold: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;
neval_err_num:151
extra pred: table flights, columns = [*,airline,flightno,sourceairport,destairport]|count(*) as "total"|where "total" > 1000|limit 10|sort "total"|format "%d"|table flights,
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
neval_err_num:152
extra pred: return the number of flights.
extra gold: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;
neval_err_num:153
hard pred: which airline has abbreviation 'aa'?||which airline has abbreviation 'aa'?||which airline has abbreviation 'ua'?||which airline has abbreviation 'ua'?||which airline has abbreviation 'ua'?||which airline has abbreviation 'ua
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
neval_err_num:154
hard pred: give the airport with code 'lhr'.|||||||||||||||||||||||||||||
hard gold: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );
neval_err_num:155
medium pred: how many airlines are from europe?||how many airlines are from europe?||how many airlines are from europe?||how many airlines are from europe?||how many airlines are from europe?||how many airlines are from europe?||how many airlines are from europe?|
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:156
medium pred: return the number of airlines in the usa.
medium gold: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2
neval_err_num:157
easy pred: select * from flights where sourceairport = 'alton' and destairport = 'alton';|airportcode |airportname |country |countryabbrev |sourceairport |destairport ||:--------- |:--------- |
easy gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
neval_err_num:158
easy pred: give the city and country for the alton airport.||||||||||||||||||||||||||||
easy gold: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;
neval_err_num:159
extra pred: what is the airport code for airport 'akp'?||airportcode|airportname|country|countryabbrev||ako|Ako|Japan|JP||akp|Aki|Japan|JP||airportcode|airportname|country|countryabbre
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:160
extra pred: return the name of the airport with code 'akp'.|
extra gold: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;
neval_err_num:161
extra pred: what are airport codes at city 'aberdeen'?||airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports
extra gold: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;
neval_err_num:162
extra pred: what are the names of airports in aberdeen?||airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|airports|air
extra gold: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;
neval_err_num:163
medium pred: how many flights arrive at'sfo'?|||||||||||||||||||||||||||||
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:164
medium pred: count the number of flights arriving at'sfo'.|
medium gold: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980
neval_err_num:165
extra pred: table flights, columns = [*,airline,flightno,sourceairport,destairport]foreign_keys = [flights.airline = airlines.uid,flights.sourceairport = airports.airportcode]primary_keys = [flights.
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
neval_err_num:166
extra pred: count the number of flights from ato to bto.select count(*) from flights where sourceairport = 'ato' and destairport = 'bto';select count(*) from flights where sourceairport = 'bto' and destairport = 'ato';
extra gold: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';
neval_err_num:167
hard pred: how many flights arrive in city aberdeen?||how many flights depart from city aberdeen?||how many flights arrive in city aberdeen?||how many flights depart from city aberdeen?||how many flights arrive in city aberdeen?||how many flights depart from city aberdeen
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
neval_err_num:168
hard pred: return the number of flights departing from aberdeen.
hard gold: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;
neval_err_num:169
extra pred: select * from flights where sourceairport = 'ABZ' and destairport = 'EDI';
extra gold: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;
neval_err_num:170
extra pred: return the number of flights departing from aberdeen.
extra gold: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;
neval_err_num:171
extra pred: select * from flights where sourceairport = 'aberdeen' and destairport = 'ashley';select * from flights where sourceairport = 'aberdeen' and destairport = 'ashley' and flightno = '123
extra gold: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';
neval_err_num:172
extra pred: how many flights fly from aberdeen to ashley?|table flights, columns = [*,airline,flightno,sourceairport,destairport]|where (flights.sourceairport = 'aberdeen' and flights.destairport = 'ashley')
extra gold: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';
neval_err_num:173
easy pred: how many flights does airline 'jetblue airways' have?|||||||||||||||||||||||||||
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:174
easy pred: give the number of united airlines flights.|give the number of american airlines flights.|give the number of delta airlines flights.|give the number of southwest airlines flights.|give the number of us airways flights.|give the number of american eagle flights.|give the number of united express flights.
easy gold: SELECT Country FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:175
easy pred: how many 'united airlines' flights go to airport 'eve'?||||||||||||||||||||||||||
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:176
easy pred: count the number of united airlines flights departing from asy airport.|count the number of united airlines flights departing from asy airport.|count the number of united airlines flights arriving in asy airport.|count the number of united airlines flights departing from asy airport.|count the number of united airlines flights arriving
easy gold: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  "JetBlue Airways"
neval_err_num:177
medium pred: how many 'united airlines' flights depart from airport 'ahd'?||how many 'united airlines' flights depart from airport 'ahd'?||how many 'united airlines' flights depart from airport 'ahd'?||how many 'united airlines'
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:178
medium pred: return the number of united airlines flights leaving from ahd airport.|||||||||||||||||||||||||||
medium gold: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:179
medium pred: how many united airlines flights go to city 'aberdeen'?|||||||||||||||||||||||||||
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
neval_err_num:180
medium pred: count the number of united airlines flights that depart from aberdeen.|count the number of united airlines flights that depart from aberdeen.|count the number of united airlines flights that arrive in aberdeen.|count the number of united airlines flights that depart from aberdeen.|count the number of united airlines flights that
medium gold: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  "Anthony"
neval_err_num:181
easy pred: |city,arrivalcount||city,departurecount||airport,arrivalcount||airport,departurecount||airport,arrivalcount||airport,departurecount||airport,arrivalcount||airport
easy gold: SELECT count(*) FROM AIRLINES
neval_err_num:182
easy pred: select city,count(*) as cnt from flights group by city having cnt > 2|table flights, columns = [*,airportcode,airportname,country,countryabbrev,sourceairport,destairport]|where country = 'United States'|where
easy gold: SELECT count(*) FROM AIRLINES
neval_err_num:183
easy pred: |city,count(flightno)||city,count(sourceairport)||city,count(destairport)||city,count(airline)||city,count(airportcode)||city,count(airportcode,sourceairport)||city,count(
easy gold: SELECT count(*) FROM AIRPORTS
neval_err_num:184
easy pred: select city,count(*) as cnt from flights group by city order by cnt desc limit 10;|city|cnt||:---|:---||LHR|2||LON|1||AMS|1||FRA|1||MUC|
easy gold: SELECT count(*) FROM AIRPORTS
neval_err_num:185
easy pred: table flights, columns = [*,airportcode,destairport,sourceairport,count(*) as flights]|where flights.count > 1000|limit 1|format flights.airportcode, flights.destairport, flights.sourceairport, flights.count|
easy gold: SELECT count(*) FROM FLIGHTS
neval_err_num:186
easy pred: The result should be:|airportcode,airportname||-------------|-------------||LHR,London Heathrow||CDG,Charles de Gaulle||FCO,London Gatwick||AMS,Amsterdam||MUC,Mun
easy gold: SELECT count(*) FROM FLIGHTS
neval_err_num:187
easy pred: |airline,count(*) as flights||airline,count(*) as flights||airline,count(*) as flights||airline,count(*) as flights||airline,count(*) as flights||airline,count(*) as flights||airline,count(*) as
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
neval_err_num:188
easy pred: table flights, columns = [*,airline,sourceairport,destairport]|table flights, columns = [*,airline,sourceairport,destairport]|table flights, columns = [*,airline,sourceairport,destairport]|table flights
easy gold: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  "UAL"
neval_err_num:189
easy pred: find the country of the airline that has most number of flights?|
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:190
easy pred: select * from flights where country = 'US' and airline = 'AA'select * from flights where country = 'US' and airline = 'AA' and sourceairport = 'LAX'select * from flights where country =
easy gold: SELECT count(*) FROM AIRLINES WHERE Country  =  "USA"
neval_err_num:191
medium pred: select * from flights where sourceairport = 'ahd' and destairport ='sfo';select * from flights where sourceairport = 'ahd' and destairport ='sfo' and flightno = '123';
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
neval_err_num:192
medium pred: which airlines have a flight with dest airport and source airport?||which airlines have a flight with source airport ahd?||which airlines have a flight with dest airport and source airport?||which airlines have a flight with source airport and dest airport?||which airlines have a flight with source airport and
medium gold: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  "Alton"
neval_err_num:193
easy pred: foreign_keys = [flights.airline = airlines.uid]primary_keys = [flights.airportcode = airports.airportcode]foreign_keys = [flights.airportcode = airports.airportcode]
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
neval_err_num:194
easy pred: |airlines|airports|flights||---|---|---||1|1|1||2|2|1||3|3|1||4|4|1||5|5|1||6|6|1|
easy gold: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  "AKO"
neval_err_num:195
easy pred: find all flights that have a source airport of 'apg' and a destination airport of 'cvo'.|
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
neval_err_num:196
easy pred: select * from flights where sourceairport in (apg, cvo) and destairport in (apg, cvo)select * from flights where sourceairport in (apg, cvo) and destairport in (apg, cvo) and
easy gold: SELECT AirportName FROM AIRPORTS WHERE City = "Aberdeen"
neval_err_num:197
easy pred: find all airlines that have flights from airport 'cvo' but not from 'apg'.|project airline = 'airline'|project country = 'country'|project countryabbrev = 'countryabbrev'|project uid = 'uid
easy gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
neval_err_num:198
easy pred: find all airports that have at least 10 flights.|find all airlines that have at least 10 flights.|find all airports that have at least 10 flights.|find all airlines that have at least 10 flights.|find all airports that have at least 10 flights.|find all airlines
easy gold: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  "APG"
neasy pred: select * from flights where flights.airline = 'American Airlines' and flights.destairport = 'LAX' and flights.sourceairport = 'DFW';select * from flights where flights.airline = 'American Airlines' and flights.dest
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
neval_err_num:199
easy pred: find all airports that have fewer than 100 flights.|find all airlines that have fewer than 200 flights.|find all airports that have fewer than 100 flights.|find all airlines that have fewer than 200 flights.|find all airports that have fewer than 100 flights.|find all airlines
easy gold: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  "ATO"
neval_err_num:200
medium pred: |airlines||airports||flights||airlines||airports||flights||airlines||airports||flights||airlines||airports||flights||airlines||air
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:201
medium pred: select * from flights where airline = 'united airlines'select * from flights where airline = 'united airlines' and sourceairport = 'LAX'select * from flights where airline = 'united airlines' and destairport =
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:202
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:203
medium pred: what are flight numbers of flights departing from airport "apg" to "lhr"?||||||||||||||||||||||||
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:204
hard pred: give the flight numbers of flights arriving at apg.||||||||||||||||||||||||||||
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
neval_err_num:205
hard pred: what are flight numbers of flights departing from airport "apg"?||what are flight numbers of flights departing from airport "apg"?||what are flight numbers of flights arriving at airport "apg"?||what are flight numbers of flights departing from airport "apg"?||
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  "Ashley" AND T3.City  =  "Aberdeen"
neval_err_num:206
medium pred: give the flight numbers of flights departing from apg.The output should be:SELECT * FROM flights WHERE sourceairport = 'APG' AND destairport = 'APG';SELECT * FROM flights WHERE sourceairport = 'APG' AND destairport
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
neval_err_num:207
medium pred: table flights, columns = [*,airline,flightno,sourceairport,destairport]|where [flights.sourceairport = "aberdeen"]|where [flights.destairport = "aberdeen"]|where [flights
medium gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = "JetBlue Airways"
neval_err_num:208
medium pred: give the flight numbers of flights leaving from aberdeen.||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
neval_err_num:209
medium pred: what are flight numbers of flights departing from city "aberdeen"?||what are flight numbers of flights departing from city "aberdeen" to city "london"?||what are flight numbers of flights departing from city "aberdeen" to city "london" with a stop
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.DestAirport  =  "ASY"
neval_err_num:210
medium pred: give the flight numbers of flights departing from aberdeen.||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
neval_err_num:211
medium pred: how many flights land in aberdeen or abilene?||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  "United Airlines" AND T2.SourceAirport  =  "AHD"
neval_err_num:212
hard pred: table airports, columns = [*,airportcode,country]|find the name of airports which do not have any flight in and out.|table airports, columns = [*,airportcode,country]|find the name of airports which do not have any flight in and out.|
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
neval_err_num:213
hard pred: select * from flights where not exists (select * from flights where flights.airportcode = airports.airportcode and flights.sourceairport = airports.airportcode)select * from flights where not exists (select * from flights where flights.airportcode
hard gold: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  "Aberdeen" AND T3.Airline  =  "United Airlines"
neval_err_num:214
extra pred: how many shops are there?|how many products are there?|how many employees are there?|how many employees are there?|how many employees are there?|how many employees are there?|how many employees are there?|how many employees are there?|how many employees are there?|how many employees are there
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:215
extra pred: count the number of shops|count the number of employees|count the number of evaluations|count the number of employees|count the number of shops|count the number of evaluations|count the number of employees|count the number of shops|count the number of evaluations|count the number of employees|count the number of shops|count the
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:216
extra pred: sort evaluation names by their year_awarded in descending order.|sort hiring names by their start_from in descending order.|sort shop names by their number_products in descending order.|sort evaluation names by their bonus in descending order.|sort hiring names by their manager_name in descending order.
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:217
extra pred: list the names of employees and sort in descending order of age.|table employee, columns = [*,employee_id,name,age]|list the names of employees and sort in ascending order of age.|list the names of employees and sort in descending order of age.|list the names
extra gold: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1
neval_err_num:218
extra pred: |city|employees||---|---||London|3||Paris|2||New York|1||Berlin|1|||||||||||||||||||||
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
neval_err_num:219
extra pred: select city, count(*) as number_employees from evaluation group by city|count the number of employees for each shop.|select shop, count(*) as number_employees from evaluation group by shop|count the number of employees for each year.|select year, count(*) as number_employees from evaluation
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1
neval_err_num:220
extra pred: |employee_id |name |age |city || --- | --- | --- | --- || 1 | John | 30 | New York || 2 | Jane | 30 | New York
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:221
extra pred: select shop_id, count(*) as number_of_shops from shop group by shop_id having count(*) > 1||||||||||||||||||||
extra gold: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1
neval_err_num:222
extra pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:223
extra pred: select * from evaluationwhere employee_id = 1order by employee_id, year_awardedlimit 1, 1select * from evaluationwhere employee_id = 2order by employee_id, year_awardedlimit 1,
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1
neval_err_num:224
extra pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:225
extra pred: sort all the shops by number products in ascending order, and return the name, location and district of each shop.|sort all the shops by number products in descending order, and return the name, location and district of each shop.|sort all the shops by number products in ascending order, and return the name, location and
extra gold: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1
neval_err_num:226
medium pred: select * from evaluationwhere employee_id in (select employee_id from evaluation where year_awarded > 2010)and bonus > 1000and shop_id in (select shop_id from shop where number_products > 1000)and manager
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:227
medium pred: which employee received the most awards in evaluations? give me the employee name.||||||||||||||||||||||||||
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "AHD"
neval_err_num:228
medium pred: |what is the name of the shop that is hiring the largest number of employees?||what is the name of the shop that is hiring the largest number of employees?||what is the name of the shop that is hiring the largest number of employees?||what is the name of the shop that is
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
neval_err_num:229
medium pred: which shop has the most employees? give me the shop name.|||||||||||||||||||||||||||
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  "AHD"
neval_err_num:230
extra pred: |where employee.employee_id is null||where employee.employee_id is not null||where employee.employee_id is not null and employee.employee_id = 1||where employee.employee_id is not null and employee.employee_id
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:231
extra pred: select * from employeewhere shop_id = 1select * from employeewhere shop_id = 2select * from employeewhere shop_id = 3select * from employeewhere shop_id = 4select
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO"
neval_err_num:232
extra pred: |shop_id|employees||---|---||1|3||2|2||3|1||4|1||5|1||6|1||7|1||8|1||9|1
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:233
extra pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
extra gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "CVO" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  "APG"
neval_err_num:234
medium pred: give me all the information about evaluation.|give me all the information about shop.|give me all the information about employee.|give me all the information about employee.|give me all the information about employee.|give me all the information about employee.|give me all the information about employee.
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
neval_err_num:235
medium pred: what is all the information about evaluation?||what is all the information about shop?||what is all the information about employee?||what is all the information about bonus?||what is all the information about year_awarded?||what is all the information about city?|
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10
neval_err_num:236
medium pred: how many employees are there?|how many products are there?|how many employees are there?|how many products are there?|how many employees are there?|how many products are there?|how many employees are there?|how many products are there?|how many employees are there?|how many products are there
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
neval_err_num:237
medium pred: select distinct shop.name, shop.location from shop;|count the number of distinct employees.|count the number of distinct employees.|count the number of distinct employees.|count the number of distinct employees.|count the number of distinct employees.|count the number of distinct employees.|
medium gold: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200
neval_err_num:238
medium pred: how many paragraphs do we have?||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
neval_err_num:239
medium pred: count the number of documents.|count the number of documents.|count the number of documents.|count the number of documents.|count the number of documents.|count the number of documents.|count the number of documents.|count the number of documents.|count the number of
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  "United Airlines"
neval_err_num:240
easy pred: list paragraph ids, paragraph texts, and paragraph descriptions for all paragraphs.|table [*,document_id,document_name,document_description]|table [*,paragraph_id,paragraph_text,paragraph_description]|table [*,template_type_code,template_type_description]
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neval_err_num:241
easy pred: what are the ids, names, and descriptions for all templates?||table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]||table paragraphs, columns = [*,paragraph_id,document_id,paragraph_text
easy gold: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  "APG"
neval_err_num:242
easy pred: what is the document name and template id for document with description with the letter 'w' in it?|||||||||||||||||||||||
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neval_err_num:243
easy pred: return the names and template ids for documents that contain the letter w in their description.|||||||||||||||||||||||||
easy gold: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  "APG"
neval_err_num:244
medium pred: what is the document id, template id and description for document named "robbin cv"?||||||||||||||||||||||||
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:245
medium pred: return the document id, template id, and description for the document with the name robbin cv.||||||||||||||||||||||||
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:246
medium pred: how many different templates do all documents use?||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:247
medium pred: count the number of different templates used for documents.|count the number of different templates used for documents.|count the number of different templates used for documents.|count the number of different templates used for documents.|count the number of different templates used for documents.|count the number of different templates used for
medium gold: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  "Aberdeen"
neval_err_num:248
hard pred: how many documents are using the template with type code 'ppt'?|| | | | | | | | | | | | | | | | | | | | | | | | | |
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
neval_err_num:249
hard pred: count the number of documents that use the ppt template type.|project = [*,document_id,template_id,document_name,document_description,other_details]|table documents, columns = [*,document_id,template_id,document_name,document_description,
hard gold: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  "Aberdeen" OR T2.city  =  "Abilene"
neval_err_num:250
hard pred: show all documents and their template ids.|project _id=documents.document_id,template_id=templates.template_id,document_name=documents.document_name,document_description=documents.document_description,other_details=documents.other_details|project
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
neval_err_num:251
hard pred: what are all different paragraph ids used for documents, and how many times were each of them used?||documents||documents||documents||documents||documents||documents||documents||documents||documents||documents||documents||doc
hard gold: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)
neval_err_num:252
easy pred: what is the id and type code for the template used by the most documents?||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM employee
neval_err_num:253
easy pred: return the id and type code of the template that is used for the greatest number of documents.||||||||||||||||||||||||
easy gold: SELECT count(*) FROM employee
neval_err_num:254
easy pred: show ids for all templates that are used by more than one document.|where document_id in (select document_id from documents where document_id = 1)|where document_id in (select document_id from documents where document_id = 2)|where document_id
easy gold: SELECT name FROM employee ORDER BY age
neval_err_num:255
easy pred: what are the template ids of any templates used in more than a single document?||||||||||||||||||||||||||
easy gold: SELECT name FROM employee ORDER BY age
neval_err_num:256
medium pred: show ids for all documents not used by any template.
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city
neval_err_num:257
medium pred: what are the ids for documents that are not used in any templates?||templates|||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT count(*) ,  city FROM employee GROUP BY city
neval_err_num:258
medium pred: how many documents do we have?||how many paragraphs do we have?||how many ref_template_types do we have?||how many ref_template_types do we have?||how many ref_template_types do we have?||how many ref_template_
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
neval_err_num:259
medium pred: count the number of documents.|count the number of paragraphs.|count the number of ref_template_types.|count the number of templates.|count the number of documents.|count the number of paragraphs.|count the number of ref_template_types.|count the number of
medium gold: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1
neval_err_num:260
medium pred: show template ids, version numbers, and template type codes for all templates.|where template_type_code = 'document'|where template_type_code = 'paragraph'|where template_type_code ='ref'|where template_type_code =
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
neval_err_num:261
medium pred: what are the ids, version numbers, and type codes for each document?||table templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]||table documents, columns = [
medium gold: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION
neval_err_num:262
medium pred: show all distinct document types for all documents.|where template_type_code = 'document'|where document_type_code = 'document'|where document_type_code = 'document'|where document_type_code = 'document'|where
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:263
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1
neval_err_num:264
medium pred: what are the ids of documents with document id 1?||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1|
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop
neval_err_num:265
medium pred: return the ids of templates that have the code ppt or pps.||||||||||||||||||||||||||
medium gold: SELECT min(Number_products) ,  max(Number_products) FROM shop
neval_err_num:266
medium pred: how many documents have template id cv?|how many paragraphs have template id cv?|how many ref template types have template type code cv?|how many ref template types have template id cv?|how many ref template types have template type code cv?|how many ref template types have template id cv?|how many ref template
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
neval_err_num:267
medium pred: count the number of templates of the type cv.|count the number of templates of the type cv.|count the number of templates of the type cv.|count the number of templates of the type cv.|count the number of templates of the type cv.|count the number of templates of the type
medium gold: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC
neval_err_num:268
hard pred: what is the version number and template type code for the template with version number earlier than 5?||5||||||||||||||||||||||||||||||||||||||||||||
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
neval_err_num:269
hard pred: return the version numbers and template type codes of templates with a version number less than 5.||||||||||||||||||||||||
hard gold: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)
neval_err_num:270
extra pred: show all document types and number of documents for each.|project _id=documents.document_id,document_name,document_description,other_details|project _id=paragraphs.paragraph_id,paragraph_text,other_details|project _id=ref_template_
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:271
extra pred: foreign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]primary_keys = [templates.template_type_code = ref_template_types.template
extra gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:272
hard pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
neval_err_num:273
hard pred: return the type code of the template type that the most documents belong to.||||||||||||||||||||||||||
hard gold: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1
neval_err_num:274
hard pred: show all template type codes with more than three templates.|where template_type_code = 'template_type_code'|where template_type_code = 'template_type_code'|where template_type_code = 'template_type_code'|where
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
neval_err_num:275
hard pred: what are the codes of template types that have more than 3 templates?||||||||||||||||||||||||||
hard gold: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)
neval_err_num:276
extra pred: what the largest version number and its template type code?||date_effective_from|date_effective_to|||date_effective_from|date_effective_to|||date_effective_from|date_effective_to|||date_effective_from|date_effective
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:277
extra pred: return the highest version number, along with its corresponding template type code.|||||||||||||||||||||||||||
extra gold: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:278
hard pred: what is the template type code of the template used by document with the name "data base"?||templates|||||||||||||||||||||||||||||||||||||||||||
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
neval_err_num:279
hard pred: return the template type code of the template that is used by a document named data base.|||||||||||||||||||||||||
hard gold: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)
neval_err_num:280
medium pred: show all document names using templates with template type code bk.|table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]|table paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
neval_err_num:281
medium pred: what are the names of documents that use templates with the code bk?||||||||||||||||||||||||||
medium gold: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name
neval_err_num:282
easy pred: show all template type codes and the number of documents using each type.|where template_type_code = 'document'|format template_type_code, count(document_id) as num_docs|sort num_docs desc|limit 10|format template_type_code,
easy gold: SELECT sum(bonus) FROM evaluation
neval_err_num:283
easy pred: select * from templates where template_type_code in (1,2,3)select * from documents where document_id in (1,2,3)select * from paragraphs where document_id in (1,2,3)select * from
easy gold: SELECT sum(bonus) FROM evaluation
neval_err_num:284
easy pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT * FROM hiring
neval_err_num:285
easy pred: return the code of the template type that is most commonly used in documents.||||||||||||||||||||||||||
easy gold: SELECT * FROM hiring
neval_err_num:286
hard pred: show all template type codes that are not used by any document.|where template_type_code not in (select template_type_code from documents)|where template_type_code not in (select template_type_code from documents)|where template_type_code not in (select
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
neval_err_num:287
hard pred: what are the codes of template types that are not used for any document?||||||||||||||||||||||||||
hard gold: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000
neval_err_num:288
easy pred: show all document types and descriptions.||||||||||||||||||||||||||||||
easy gold: SELECT count(DISTINCT LOCATION) FROM shop
neval_err_num:289
easy pred: ||||||||||||||||||||||||||||||||||
easy gold: SELECT count(DISTINCT LOCATION) FROM shop
neval_err_num:290
easy pred: what is the template type descriptions for template type code "ad".||template_type_code|template_type_description||:---|:---||ad|Ads||ad|Ads||ad|Ads||ad|Ads||ad
easy gold: SELECT count(*) FROM Documents
neval_err_num:291
easy pred: return the template type description of the template type with the code ad.|||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM Documents
neval_err_num:292
medium pred: what is the template type code for template type description "book".||template_type_description|book||template_type_code|book||version_number|1||date_effective_from|2010-01-01||date_effective_to|2010
medium gold: SELECT document_id ,  document_name ,  document_description FROM Documents
neval_err_num:293
medium pred: return the type code of the template type with the description "book".|return the type code of the template type with the description "book".|return the type code of the template type with the description "book".|return the type code of the template type with the description "book".|return the type code
medium gold: SELECT document_id ,  document_name ,  document_description FROM Documents
neval_err_num:294
medium pred: what are the distinct document names for the documents ever used by any template?||table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|table|
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
neval_err_num:295
medium pred: return the different descriptions for templates that have been used in a document.|||||||||||||||||||||||||||
medium gold: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE "%w%"
neval_err_num:296
medium pred: what are the template ids with template type description "report".||presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|presentation|present
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
neval_err_num:297
medium pred: return the ids corresponding to templates with the description 'presentation' and the version number '1'.|||||||||||||||||||||||
medium gold: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  "Robbin CV"
neval_err_num:298
easy pred: how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in total?|how many paragraphs in
easy gold: SELECT count(DISTINCT template_id) FROM Documents
neval_err_num:299
easy pred: count the number of documents.|count the number of templates.|count the number of ref_template_types.|count the number of paragraphs.|count the number of documents.|count the number of templates.|count the number of ref_template_types.|count the number of
easy gold: SELECT count(DISTINCT template_id) FROM Documents
neval_err_num:300
medium pred: how many paragraphs for the document with name'summer show' and template type code'summer show'?||How many paragraphs for the document with name'summer show' and template type code'summer show'?||How many paragraphs for the document with name'summer show' and template type code
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
neval_err_num:301
medium pred: count the number of paragraphs in the document named'summer show'|count |summer show||---|---||1|||||||||||||||||||||||||
medium gold: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'
neval_err_num:302
medium pred: show paragraph details for paragraph with text 'korea '.
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
neval_err_num:303
medium pred: what are the details for the paragraph that includes the text 'korea '?||||||||||||||||||||||||
medium gold: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id
neval_err_num:304
extra pred: show all paragraph ids and texts for the document with name 'welcome to ny' and template id 'welcome to ny'|where document_name = 'welcome to ny'|where template_id = 'welcome to ny'|where document_id = '
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:305
extra pred: what are the ids and texts of paragraphs in the document titled 'welcome to ny'?|title|welcome to ny||id|welcome to ny||text|welcome to ny||id|welcome to ny||text|welcome to ny||id|
extra gold: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:306
easy pred: show all paragraph texts for the document "customer reviews"|table paragraphs,columns=*,document_id,paragraph_text,other_details|table ref_template_types,columns=*,template_type_code,template_type_description|table templates,columns=*,template_id,version_
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:307
easy pred: ||||||||||||||||||||||||||||||||||
easy gold: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1
neval_err_num:308
hard pred: show all document ids and the number of paragraphs in each document. order by document id.|project document_id,document_name,document_description,other_details|project document_id,document_name,document_description,other_details|project document_id,document_name,document_description
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:309
hard pred: return the different document ids along with the number of paragraphs corresponding to each, ordered by id.||||||||||||||||||||||||
hard gold: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents
neval_err_num:310
easy pred: show all document ids, names and the number of paragraphs in each document.select * from documents;select * from paragraphs;select * from ref_template_types;select * from templates;select * from foreign_keys;select * from primary
easy gold: SELECT count(*) FROM Templates
neval_err_num:311
easy pred: what are the ids and names of each document, as well as the number of paragraphs in each?|what are the ids and names of each document, as well as the number of paragraphs in each?|what are the ids and names of each document, as well as the number of paragraphs in each?
easy gold: SELECT count(*) FROM Templates
neval_err_num:312
medium pred: list all document ids with at least two paragraphs.|table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]|table paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neval_err_num:313
medium pred: what are the ids of documents that have 2 or more paragraphs?|||||||||||||||||||||||||||
medium gold: SELECT template_id ,  version_number ,  template_type_code FROM Templates
neval_err_num:314
easy pred: what is the document id and name with greatest number of paragraphs?|||||||||||||||||||||||||||
easy gold: SELECT DISTINCT template_type_code FROM Templates
neval_err_num:315
easy pred: return the id and name of the document with the most paragraphs.|||||||||||||||||||||||||||
easy gold: SELECT DISTINCT template_type_code FROM Templates
neval_err_num:316
medium pred: what is the document id with most number of paragraphs?||what is the document id with least number of paragraphs?||what is the document id with most number of paragraphs?||what is the document id with least number of paragraphs?||what is the document id with most number of paragraphs?|
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
neval_err_num:317
medium pred: return the id of the document with the fewest paragraphs.||||||||||||||||||||||||||||
medium gold: SELECT template_id FROM Templates WHERE template_type_code  =  "PP" OR template_type_code  =  "PPT"
neval_err_num:318
easy pred: what is the document id with 3 to 4 paragraphs?||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1||1
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
neval_err_num:319
easy pred: give the ids of documents that have between one and two paragraphs.|||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM Templates WHERE template_type_code  =  "CV"
neval_err_num:320
medium pred: show the document id with paragraph text 'brazil' and 'ireland'|where document_id = 'brazil' and paragraph_text = 'brazil' and paragraph_text = 'ireland'|where document_id = 'brazil' and paragraph
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
neval_err_num:321
medium pred: what are the ids of documents that contain the paragraph text 'brazil' and 'ireland'?||table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]||table paragraphs, columns = [*,paragraph_
medium gold: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5
neval_err_num:322
medium pred: how many courses are there?||course_arrange|course_arrange|course_arrange||course_arrange|course_arrange|course_arrange||course_arrange|course_arrange|course_arrange||course_arrange|course_arr
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
neval_err_num:323
medium pred: what is the total count of courses?||course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_
medium gold: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code
neval_err_num:324
hard pred: list the names of teachers in descending order of age.|table teacher, columns = [*,teacher_id,name,age]|list the names of teachers in ascending order of age.|list the names of teachers in descending order of age.|table teacher, columns = [*,teacher
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:325
hard pred: select * from teacher;select * from course;select * from course_arrange;select * from teacher_arrange;select * from teacher_arrange where teacher_id = 1;select * from teacher_arrange where teacher_id =
hard gold: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:326
easy pred: table teacher, columns = [*,teacher_id,name,hometown]foreign_keys = [teacher.teacher_id,course_arrange.teacher_id]primary_keys = [teacher.teacher_id = teacher.teacher_id,course_arrange.
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neval_err_num:327
easy pred: table teacher_arrange, columns = [*,teacher_id,hometown]foreign_keys = [teacher.teacher_id,teacher_arrange.teacher_id]primary_keys = [teacher_arrange.teacher_id = teacher.teacher_id]
easy gold: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3
neval_err_num:328
medium pred: select * from teacher where age = 32 or age = 33select * from teacher where age = 32 or age = 33select * from teacher where age = 32 or age = 33select * from teacher where age =
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
neval_err_num:329
medium pred: where is the youngest teacher from?|
medium gold: SELECT min(Version_Number) ,  template_type_code FROM Templates
neval_err_num:330
medium pred: table teacher_hometown, columns = [*,teacher_id,hometown]foreign_keys = [teacher.teacher_id,teacher.hometown]primary_keys = [teacher.teacher_id = teacher.teacher_id]primary_keys = [
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
neval_err_num:331
medium pred: for each teacher, how many students are there?|
medium gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  "Data base"
neval_err_num:332
medium pred: table teacher_hometown, columns = [*,hometown]foreign_keys = [teacher.teacher_id]primary_keys = [teacher.teacher_id]primary_keys = [teacher.teacher_id]foreign_keys = [teacher.
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
neval_err_num:333
medium pred: select * from teacher_arrange where teacher_id = 1;select * from teacher_arrange where teacher_id = 2;select * from teacher_arrange where teacher_id = 3;select * from teacher_arrange where teacher_id
medium gold: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  "BK"
neval_err_num:334
medium pred: select * from teacher_arrange where teacher_id = 1;select * from teacher_arrange where teacher_id = 2;select * from teacher_arrange where teacher_id = 3;select * from teacher_arrange where teacher_id
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:335
medium pred: select * from teacher_arrange where teacher_id = 1select * from teacher_arrange where teacher_id = 2select * from teacher_arrange where teacher_id = 3select * from teacher_arrange where teacher_id =
medium gold: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code
neval_err_num:336
extra pred: show the name of the teacher for the math course.
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:337
extra pred: what are the names of the people who teach math courses?||course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arrange|course_arr
extra gold: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:338
hard pred: select * from teacher_arrangewhere teacher_id = 1select * from teacher_arrangewhere teacher_id = 2select * from teacher_arrangewhere teacher_id = 3select * from teacher_arrange
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:339
hard pred: select * from teacher_arrange where teacher_id = 1;select * from teacher_arrange where teacher_id = 2;select * from teacher_arrange where teacher_id = 3;select * from teacher_arrange where teacher_id
hard gold: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id
neval_err_num:340
medium pred: table teacher_arrange, columns = [*,teacher_id,course_id]foreign_keys = [teacher.teacher_id,course.course_id]primary_keys = [teacher.teacher_id = teacher.teacher_id,course.course_id =
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neval_err_num:341
medium pred: select * from visit where visitor.age < 30;select * from visit where visitor.age > 30;select * from visit where visitor.age >= 30 and visitor.age <= 30;select * from visit where visitor.age
medium gold: SELECT template_type_code ,  template_type_description FROM Ref_template_types
neval_err_num:342
easy pred: select * from visit where museum_id = 1select * from visit where museum_id = 2select * from visit where museum_id = 3select * from visit where museum_id = 4select * from visit where
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
neval_err_num:343
easy pred: ||||||||||||||||||||||||||||||||||
easy gold: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  "AD"
neval_err_num:344
easy pred: find the total number of matches.||||||||||||||||||||||||||||||
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
neval_err_num:345
easy pred: how many matches are there?|how many rankings are there?|how many tables are there?|how many players are there?|how many matches are there?|how many rankings are there?|how many tables are there?|how many players are there?|how many matches are there?|how many rankings are there
easy gold: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  "Book"
neval_err_num:346
medium pred: find the total number of matches.SELECT COUNT(*) AS total_matches FROM matches;SELECT COUNT(*) AS total_matches FROM matches;SELECT COUNT(*) AS total_matches FROM matches;SELECT COUNT(*) AS total_matches FROM matches;SELECT COUNT(*) AS total_matches
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
neval_err_num:347
medium pred: count the number of players.SELECT COUNT(*) AS count FROM matches;SELECT COUNT(*) AS count FROM players;SELECT COUNT(*) AS count FROM rankings;SELECT COUNT(*) AS count FROM matches WHERE winner_id = 1;SELECT COUNT(*) AS count FROM matches WHERE loser_id
medium gold: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID
neval_err_num:348
medium pred: list the first name and birth date of all players from the country with code uk.|table players, columns = [*,first_name,last_name,birth_date,country_code]|list the first name and birth date of all players from the country with code uk.|table players,
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
neval_err_num:349
medium pred: what are the first names and birth dates of players from the usa?||1||||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  "Presentation"
neval_err_num:350
easy pred: find the average age of losers and winners of all matches.SELECT avg(loser_age) AS loser_age, avg(winner_age) AS winner_ageFROM matchesGROUP BY loser_age, winner_ageORDER BY loser_age, winner_ageSELECT avg(loser_
easy gold: SELECT count(*) FROM Paragraphs
neval_err_num:351
easy pred: what are the average heights of losers and winners across matches?|what are the average hand sizes of losers and winners across matches?|what are the average birth dates of losers and winners across matches?|what are the average country codes of losers and winners across matches?|what are the average hand sizes of losers and winners across matches?
easy gold: SELECT count(*) FROM Paragraphs
neval_err_num:352
medium pred: find the average rank of losers in all matches.|||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
neval_err_num:353
medium pred: what is the average rank for losers in all matches?||1|||||||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'
neval_err_num:354
medium pred: find the highest rank of winners in all matches.|||||||||||||||||||||||||||||
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
neval_err_num:355
medium pred: what is the best rank of winners across all matches?|The output should be:|loser_id|loser_rank|loser_rank_points|loser_name|loser_rank_points|loser_rank_points|loser_rank_points|loser_rank
medium gold: select other_details from paragraphs where paragraph_text like 'korea'
neval_err_num:356
medium pred: find the number of distinct country codes of all players.
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:357
medium pred: how many times have players played in the same tourney?||country_code|country_code|country_code|country_code|country_code|country_code|country_code|country_code|country_code|country_code|country_code|country_code|country_code|country
medium gold: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'
neval_err_num:358
medium pred: find the number of distinct name of winners.
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:359
medium pred: how many different loser names are there?||1|||2|||3|||4|||5|||6|||7|||8|||9|||10|||11|||12|
medium gold: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  "Customer reviews"
neval_err_num:360
medium pred: find the name of tourney that has more than 10 matches.SELECT DISTINCT tourney_nameFROM matchesWHERE matches.tourney_id IN (SELECT tourney_id FROM matches GROUP BY tourney_id HAVING COUNT(*) > 10)SELECT DISTIN
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neval_err_num:361
medium pred: what are the names of tournaments that have more than 10 matches?|table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_
medium gold: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id
neval_err_num:362
medium pred: table winners, columns = [*,winner_id,winner_name,winner_rank_points]|table winners, winners.winner_id, winners.winner_name, winners.winner_rank_points|table winners, winners.winner_id, winners.winner_name, winners.winner_
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neval_err_num:363
medium pred: what are the names of players who won in both 2013 and 2016?|foreign_keys = [matches.loser_id = players.player_id,rankings.player_id = players.player_id]primary_keys = [matches.los
medium gold: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id
neval_err_num:364
easy pred: table matches, columns = [*,year,loser_id,loser_name,loser_rank,loser_rank_points,loser_seed,loser_ht,loser_ioc,loser_name,loser_rank_points,loser_seed,loser
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neval_err_num:365
easy pred: how many matches were played in 2013 or 2016?||2013|2016||2013|2016||2013|2016||2013|2016||2013|2016||2013|2016||2013|
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2
neval_err_num:366
extra pred: what are the country code and first name of the players who won in both tourney wta championships and australian open?||||||||||||||||||||||
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:367
extra pred: SELECT * FROM matches WHERE winner_id = 1 AND loser_id = 2;SELECT * FROM players WHERE player_id = 1;SELECT * FROM rankings WHERE ranking_date = '2018-01-01';SELECT * FROM matches WHERE
extra gold: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:368
hard pred: find the first name and country code of the youngest player.|find the first name and country code of the oldest player.|find the first name and country code of the youngest player.|find the first name and country code of the oldest player.|find the first name and country code of the youngest player.
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:369
hard pred: what is the first name and country code of the youngest player?||||||||||||||||||||||||||||
hard gold: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:370
easy pred: list the first and last name of all players in the order of hand.|table players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]|list the first and last name of all players in the order of hand.|table
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:371
easy pred: what are the full names of all players, sorted by country code?||1||||||||||||||||||||||||||||||||||||||||||||||||||
easy gold: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2
neval_err_num:372
hard pred: table players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]|table rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]|table players, columns =
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
neval_err_num:373
hard pred: what are the full names of all right handed players, in order of birth date?||table|matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc
hard gold: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'
neval_err_num:374
easy pred: find the first name and country code of the player who did the most number of tours.|||||||||||||||||||||||||
easy gold: SELECT count(*) FROM teacher
neval_err_num:375
easy pred: what is the first name and country code of the player with the most tours?||1||||||||||||||||||||||||||||||||||||||||||||||||
easy gold: SELECT count(*) FROM teacher
neval_err_num:376
easy pred: find the year that has the most number of matches.SELECT year, COUNT(*) AS matches FROM matches GROUP BY year ORDER BY matches DESC LIMIT 1;SELECT year, COUNT(*) AS matches FROM matches GROUP BY year ORDER BY matches DESC LIMIT 1;SELECT year, COUNT(*) AS
easy gold: SELECT Name FROM teacher ORDER BY Age ASC
neval_err_num:377
easy pred: which year had the most matches?||2018||2018||2018||2018||2018||2018||2018||2018||2018||2018||2018||2018||2018||2018||2018
easy gold: SELECT Name FROM teacher ORDER BY Age ASC
neval_err_num:378
medium pred: find the name and rank points of the winner who won the most times.||||||||||||||||||||||||||
medium gold: SELECT Age ,  Hometown FROM teacher
neval_err_num:379
medium pred: what is the name of the player who has won the most matches, and how many rank points does this player have?||table|matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_
medium gold: SELECT Age ,  Hometown FROM teacher
neval_err_num:380
easy pred: find the name of the winner who has the highest rank points and participated in the australian open tourney.
easy gold: select name from teacher where hometown != "little lever urban district"
neval_err_num:381
easy pred: what is the name of the winner with the most rank points who participated in the australian open tournament?||1|||||||||||||||||||||||||||||||||||||||||||
easy gold: select name from teacher where hometown != "little lever urban district"
neval_err_num:382
medium pred: find the names of loser and winner who played in the match with greatest number of points.|find the names of loser and winner who played in the match with greatest number of seed.|find the names of loser and winner who played in the match with greatest number of rank.|find the names of loser and winner who
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
neval_err_num:383
medium pred: what are the names of the winner and loser who played in the longest match?||1||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33
neval_err_num:384
medium pred: SELECT player_id, AVG(ranking) AS avg_ranking, FIRST_NAMEFROM playersGROUP BY player_id, FIRST_NAMEORDER BY avg_ranking DESCLIMIT 10SELECT player_id, AVG(ranking) AS avg_ranking, FIRST_NAMEFROM
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:385
medium pred: what are the first names of all players, and their average rankings?|||||||||||||||||||||||||||
medium gold: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1
neval_err_num:386
medium pred: find the total ranking points for each player and their last name.|||||||||||||||||||||||||||
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:387
medium pred: what are the first names of all players, and their total ranking points?||table players, columns = [*,first_name,last_name,hand,birth_date,country_code]||table rankings, columns = [*,ranking_date,ranking,player_id,ranking
medium gold: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown
neval_err_num:388
hard pred: find the number of players for each country.foreign_keys = [countries.country_code = players.country_code]primary_keys = [countries.country_code]foreign_keys = [countries.country_code = players.country
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:389
hard pred: how many players are from each country?|foreign_keys = [matches.loser_id = players.player_id,rankings.player_id = players.player_id]primary_keys = [matches.loser_id = players.player_id
hard gold: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:390
easy pred: find the code of the country where has the greatest number of players.
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:391
easy pred: what is the code of the country with the most players?||2|||3|||4|||5|||6|||7|||8|||9|||10|||11|||12||
easy gold: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2
neval_err_num:392
medium pred: find the codes of countries that have more than 50 players.table countries, columns = [*,country_code,country_name]table players, columns = [*,player_id,country_code,country_name]foreign_keys = [countries.country_
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:393
medium pred: what are the codes of countries with more than 50 players?|table countries, columns = [*,country_code,country_name]foreign_keys = [countries.country_code]primary_keys = [countries.country_code]table
medium gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID
neval_err_num:394
hard pred: find the total number of tours for each ranking date.SELECT tourney_date, COUNT(*) AS total_toursFROM rankingsGROUP BY tourney_dateORDER BY tourney_date;SELECT tourney_date, COUNT(*) AS total_toursFROM rankingsGROUP BY tour
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
neval_err_num:395
hard pred: how many total tours were there for each ranking date?||tourney_id|tourney_name|tourney_level|tourney_date|tourney_id|tourney_name|tourney_level|tourney_date|tourney_id|tourney_name|tourney_level
hard gold: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name
neval_err_num:396
hard pred: find the number of matches happened in each year.SELECT year, COUNT(*) AS matches FROM matches GROUP BY year;SELECT year, COUNT(*) AS matches FROM matches GROUP BY year ORDER BY year;SELECT year, COUNT(*) AS matches FROM matches GROUP BY year ORDER BY year DESC;
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:397
hard pred: how many matches were played in each year?||2018||2019||2020||2021||2022||2023||2024||2025||2026||2027||2028||2029||2030||2031||
hard gold: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  "Math"
neval_err_num:398
medium pred: find the name and rank of the 3 oldest winners across all matches.||||||||||||||||||||||||||
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:399
medium pred: what are the names and ranks of the three oldest winners across all matches?||table|matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,los
medium gold: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name
neval_err_num:400
medium pred: how many different winners both participated in the wta championships and were born in 1990?||1|||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:401
medium pred: SELECT COUNT(DISTINCT player_id)FROM matchesWHERE winner_hand = 'left'AND winner_ht = 'left'AND winner_id IN (SELECT player_id FROM players WHERE player_id IN (SELECT player_id FROM matches))
medium gold: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2
neval_err_num:402
hard pred: find the first name, country code and birth date of the winner who has the highest rank points in all matches.||||||||||||||||||||||
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
neval_err_num:403
hard pred: what is the first name, country code, and birth date of the player with the most loser rank points across all matches?||||||||||||||||||||||
hard gold: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)
neval_err_num:404
easy pred: find the number of players for each hand type.SELECT hand, COUNT(*) AS num_playersFROM matchesGROUP BY handORDER BY hand;SELECT hand, COUNT(*) AS num_playersFROM playersGROUP BY handORDER BY hand;SELECT hand, COUNT(*) AS num
easy gold: SELECT count(*) FROM visitor WHERE age  <  30
neval_err_num:405
medium pred: how many players are there for each hand type?|| || || || || || || || || || || || || || |
medium gold: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC
neval_err_num:406
easy pred: SELECT count(*) FROM battle WHERE lost_in_battle = 1SELECT count(*) FROM battle WHERE lost_in_battle = 0SELECT count(*) FROM battle WHERE lost_in_battle = 0 AND id = 1SELECT count(*) FROM battle WHERE
easy gold: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4
neval_err_num:407
medium pred: table ship, columns = [*,name,tonnage]|table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]|table death, columns = [*,caused_by_ship_id,id
medium gold: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC
neval_err_num:408
medium pred: table battle, columns = [*,id,name,date,result]table death, columns = [*,caused_by_ship_id,id,note,killed,injured]table ship, columns = [*,lost_in_battle,id,name,ton
medium gold: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1
neval_err_num:409
easy pred: select * from battle, death, ship where battle.id = death.battle_id and death.caused_by_ship_id = ship.id and battle.lost_in_battle = 1;
easy gold: SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009
neval_err_num:410
medium pred: select avg(injured) from death where battle.lost_in_battle = trueselect avg(injured) from death where battle.lost_in_battle = falseselect avg(injured) from death where battle.lost_in_battle = false and death
medium gold: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'
neval_err_num:411
hard pred: |ship|death|injury||---|---|---||1|1|1||2|1|1||3|1|1||4|1|1||5|1|1||6|1|1||7
hard gold: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)
neval_err_num:412
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1
neval_err_num:413
extra pred: |battle.lost_in_battle = battle.id,||ship.lost_in_battle = ship.id,||death.caused_by_ship_id = ship.id,||death.id = battle.id,||
extra gold: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1
neval_err_num:414
extra pred: |battle||---||id||name||date||bulgarian_commander||latin_commander||result||---||1||1||1||1||1||
extra gold: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1
neval_err_num:415
hard pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
hard gold: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)
neval_err_num:416
hard pred: table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]table ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]
hard gold: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1
neval_err_num:417
medium pred: SELECT * FROM battle WHERE lost_in_battle = 0SELECT * FROM battle WHERE lost_in_battle = 1SELECT * FROM battle WHERE lost_in_battle = 2SELECT * FROM battle WHERE lost_in_battle
medium gold: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit
neval_err_num:418
medium pred: what are all the courses including department name and degree summary name?||table|addresses, columns = [*,address_id,line_1,line_2,city,zip_postcode,state_province_county,country,other_address_details]||table|c
medium gold: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1
neval_err_num:419
extra pred: what is the first and second line for all courses?||table|addresses, columns = [*,address_id,line_1,line_2,city,zip_postcode,state_province_county,country,other_address_details]||table|courses,
extra gold: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011
neval_err_num:420
extra pred: how many students are listed?||:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---
extra gold: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)
neval_err_num:421
medium pred: how many students are there?||table||table||table||table||table||table||table||table||table||table||table||table||table||table||table||table||table||table||table||table|
medium gold: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008
neval_err_num:422
easy pred: how is the math course described?||how is the math course described?||how is the math course described?||how is the math course described?||how is the math course described?||how is the math course described?||how is the math course described?|
easy gold: SELECT count(*) FROM players
neval_err_num:423
easy pred: what are the descriptions for all the math courses?||what are the descriptions for all the math courses?||what are the descriptions for all the math courses?||what are the descriptions for all the math courses?||what are the descriptions for all the math courses?||what are the
easy gold: SELECT count(*) FROM players
neval_err_num:424
easy pred: what is the zip code of the address in the city port chelsea?||what is the zip code of the address in the city port chelsea?||what is the zip code of the address in the city port chelsea?||what is the zip code of the address in the city
easy gold: SELECT count(*) FROM matches
neval_err_num:425
easy pred: what is the zip code for port chelsea?||what is the zip code for port chelsea?||what is the zip code for port chelsea?||what is the zip code for port chelsea?||what is the zip code for port chelsea?|
easy gold: SELECT count(*) FROM matches
neval_err_num:426
medium pred: which department offers the most number of degrees? list department name and id.|table||--||departments||--||department_id|department_name|department_description||1|Computer Science|Computer Science is the study of computers and their applications.|
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
neval_err_num:427
medium pred: what is the name and id of the department with the most number of students?||table|addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_
medium gold: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'
neval_err_num:428
medium pred: how many students are enrolled in any semester?||how many students are enrolled in any semester?||how many students are enrolled in any semester?||how many students are enrolled in any semester?||how many students are enrolled in any semester?||how many students are enrolled in any semester
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches
neval_err_num:429
medium pred: how many students are enrolled in each department?||how many students are enrolled in each semester?||how many students are enrolled in each course?||how many students are enrolled in each semester?||how many students are enrolled in each course?||how many students are enrolled in each semester
medium gold: SELECT avg(loser_age) ,  avg(winner_age) FROM matches
neval_err_num:430
easy pred: how many different departments are offered?|how many different sections are offered?|how many different semesters are offered?|how many different students are enrolled?|how many different students are enrolled in each semester?|how many different students are enrolled in each department?|how many different students are enrolled in each section?|how many
easy gold: SELECT avg(winner_rank) FROM matches
neval_err_num:431
easy pred: how many students are enrolled in each degree program?||*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*
easy gold: SELECT avg(winner_rank) FROM matches
neval_err_num:432
easy pred: how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students
easy gold: SELECT min(loser_rank) FROM matches
neval_err_num:433
easy pred: how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students are enrolled in the engineering department?||how many students
easy gold: SELECT min(loser_rank) FROM matches
neval_err_num:434
easy pred: what are the names and descriptions of all the departments?||*||*||*||*||*||*||*||*||*||*||*||*||*||*|
easy gold: SELECT count(DISTINCT country_code) FROM players
neval_err_num:435
easy pred: what are the names and descriptions for all the departments?||*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|*|
easy gold: SELECT count(DISTINCT country_code) FROM players
neval_err_num:436
easy pred: what are the names and id of departments having at most 2 degree programs?||table courses, columns = [*,course_id,course_name,course_description,other_details]||table departments, columns = [*,department_id,department_name,department
easy gold: SELECT count(DISTINCT loser_name) FROM matches
neval_err_num:437
easy pred: what are the names and ids of every course with more than 2 sections?||table courses, columns = [*,course_id,course_name,course_description,course_type,course_level,course_units,course_credit_hours,course_semester,course_start_date
easy gold: SELECT count(DISTINCT loser_name) FROM matches
neval_err_num:438
easy pred: list the section_name in lexicographical order.|table sections, columns = [*,section_id,section_name,section_description,other_details]|table semesters, columns = [*,semester_id,semester_name,semester_description,other_details
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:439
easy pred: what are the names of the sections in reverse alphabetical order?|table sections, columns = [*,section_id,course_id,section_name,section_description,other_details]table student_enrolment_courses, columns = [*,student_course_id,course_
easy gold: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10
neval_err_num:440
hard pred: table student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]|table student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:441
hard pred: for each student, what is the name and id of the one with the most courses registered?|for each course, what is the name and id of the one with the most students registered?|for each student, what is the name and id of the one with the most courses registered?|for each transcript, what is the name
hard gold: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016
neval_err_num:442
medium pred: what is the description of the department whose name has the substring the computer?||what is the description of the department whose name has the substring the computer?||what is the description of the department whose name has the substring the computer?||what is the description of the department whose name has the
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
neval_err_num:443
medium pred: what is the department description for the one whose name has the word computer?||2||what is the department description for the one whose name has the word computer?||3||what is the department description for the one whose name has the word computer?||4||what is the department description
medium gold: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016
neval_err_num:444
extra pred: who are enrolled in 2 degree programs in one semester? list the first name, middle name and last name and the id.| | | | | | | | | | | | | | | | | | | | |
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
neval_err_num:445
extra pred: |first_name|middle_name|last_name|cell_mobile_number|email_address|ssn|date_first_registered|date_left|other_student_details||---|---|---|---|---|---|---|---|---||John|Smith
extra gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'
neval_err_num:446
medium pred: who is enrolled in a bachelor degree program? list the first name, middle name, last name.|who is enrolled in a bachelor degree program? list the first name, middle name, last name.|who is enrolled in a bachelor degree program? list the first name, middle name, last name.|who is
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:447
medium pred: what are the first, middle, and last names for everybody enrolled in a masters program?||table|addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address
medium gold: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1
neval_err_num:448
medium pred: find the kind of program which most number of students are enrolled in?select * from student_enrolment_courses where student_enrolment_courses.student_enrolment_id = 1select * from student_enrolment_courses where student_enrol
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
neval_err_num:449
medium pred: what is the degree summary name that has the most number of students enrolled?||2||what is the degree summary name that has the most number of students enrolled?||3||what is the degree summary name that has the most number of students enrolled?||4||what is the degree summary
medium gold: SELECT first_name ,  last_name FROM players ORDER BY birth_date
neval_err_num:450
medium pred: table students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
neval_err_num:451
medium pred: |what is the program id and the summary of the degree that has the most students enrolled?||what is the program id and the summary of the degree that has the most students enrolled?||what is the program id and the summary of the degree that has the most students enrolled?||what is the
medium gold: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date
neval_err_num:452
hard pred: table students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
neval_err_num:453
hard pred: select * from student_enrolment_courses where student_enrolment_id = 1 order by student_enrolment_courses.student_enrolment_id, student_enrolment_courses.student_course_id;select * from student_
hard gold: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1
neval_err_num:454
hard pred: table student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]|table student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:455
hard pred: what is the name of the semester with no students enrolled?||2||what is the name of the semester with no students enrolled?||3||what is the name of the semester with no students enrolled?||4||what is the name of the semester with no students enrolled?|
hard gold: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1
neval_err_num:456
hard pred: what are all the course names of the courses which ever have students enrolled in?||table||||||||||||||||||||||||||||||||||||||||||||||||
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:457
hard pred: what are the names of all courses that have some students enrolled?|table courses, columns = [*,course_id,course_name,course_description,other_details]|table student_enrolment, columns = [*,student_enrolment_id,degree_program_id
hard gold: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:458
hard pred: what's the name of the course with most number of enrollments?||what's the name of the course with most number of enrollments?||what's the name of the course with most number of enrollments?||what's the name of the course with most number of enrollments
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:459
hard pred: what is the name of the course with the most students enrolled?||what is the name of the course with the most students enrolled?||what is the name of the course with the most students enrolled?||what is the name of the course with the most students enrolled?||what is the name
hard gold: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1
neval_err_num:460
medium pred: table students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:461
medium pred: |table|addresses|courses|departments|degree_programs|sections|semesters|students|student_enrolment|student_enrolment_courses|transcripts||---|---|---|---|---|---|---|---|---|---|
medium gold: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1
neval_err_num:462
medium pred: table transcripts, columns = [*,transcript_id,transcript_date,course_id,other_details]foreign_keys = [transcripts.transcript_id = transcripts.transcript_id,transcripts.course_id = courses.course_id]
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:463
medium pred: select * from transcript_contents where transcript_id = '123456789' and transcript_contents.student_course_id = '123456789'select * from transcript_contents where transcript_id = '123456789' and transcript_contents.student_course
medium gold: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:464
medium pred: what is the phone number of the man with the first name timmothy and the last name ward?||what is the phone number of the man with the first name timmothy and the last name ward?||what is the phone number of the man with the first name timmothy and the last name ward
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:465
medium pred: what is the mobile phone number of the student named timmothy ward?||timothy ward||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name
neval_err_num:466
medium pred: who is the last student to register? list the first name, middle name and last name.|who is the first student to register? list the first name, middle name and last name.|who is the last student to register? list the first name, middle name and last name.|who is the first student
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
neval_err_num:467
medium pred: what is the first, middle, and last name of the first student to register?||2|what is the first, middle, and last name of the first student to register?||3|what is the first, middle, and last name of the first student to register?||4|what is
medium gold: SELECT count(*) ,  country_code FROM players GROUP BY country_code
neval_err_num:468
hard pred: who is the earliest graduate of the school? list the first name, middle name and last name.|table||addresses||address_id||address_id||address_id||address_id||address_id||address_id||address
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:469
hard pred: what is the first, middle, and last name of the latest school graduate?||table students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ss
hard gold: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:470
easy pred: table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]|table courses, columns = [*,course_id,course_name,course
easy gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
neval_err_num:471
easy pred: |table||addresses||address_id||address_id||address_id||address_id||address_id||address_id||address_id||address_id||address_id||address_id
easy gold: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50
neval_err_num:472
medium pred: table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]|table courses, columns = [*,course_id,course_name,course
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
neval_err_num:473
medium pred: what is the id, line 1, and line 2 of the address with the most students?||table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_
medium gold: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date
neval_err_num:474
medium pred: on average, when were the transcripts printed?|on average, when were the transcripts printed?|on average, when were the transcripts printed?|on average, when were the transcripts printed?|on average, when were the transcripts printed?|on average, when were the transcripts printed?|on average, when were the transcripts printed
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
neval_err_num:475
medium pred: what is the average transcript date?||what is the average transcript date?||what is the average transcript date?||what is the average transcript date?||what is the average transcript date?||what is the average transcript date?||what is the average transcript date?|
medium gold: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR
neval_err_num:476
medium pred: when is the last transcript released? list the date and details.|when is the first transcript released? list the date and details.|when is the last transcript released? list the date and details.|when is the first transcript released? list the date and details.|when is the last transcript released? list
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
neval_err_num:477
medium pred: I'm not sure if I'm on the right track, but I'm trying to get the earliest date of a transcript release, and the details of the student who released it.I'm using the following code:SELECT * FROM transcript_contents WHERE transcript_id = '000000
medium gold: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3
neval_err_num:478
medium pred: how many transcripts are released?||how many transcripts are released?||how many transcripts are released?||how many transcripts are released?||how many transcripts are released?||how many transcripts are released?||how many transcripts are released?||how many transcripts are released
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:479
medium pred: how many transcripts are listed?||:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---|:---
medium gold: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'
neval_err_num:480
hard pred: what is the last transcript release date?||what is the last transcript release date?||what is the last transcript release date?||what is the last transcript release date?||what is the last transcript release date?||what is the last transcript release date?||what is
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:481
hard pred: when was the last transcript released?|when was the last transcript released?|when was the last transcript released?|when was the last transcript released?|when was the last transcript released?|when was the last transcript released?|when was the last transcript released?|when was the last transcript released?|when was the last
hard gold: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1
neval_err_num:482
medium pred: table courses, columns = [*,course_id,course_name,course_description,course_credit_hours,course_semester,course_instructor,course_department_id,course_department_name,course_department_description,course_department_other_details,course
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
neval_err_num:483
medium pred: select * from transcript_contentswhere transcript_id = '123456789'and student_course_id = '123456789'and transcript_contents.student_course_id = '123456789'and transcript_contents.student_course_id
medium gold: SELECT count(*) ,  hand FROM players GROUP BY hand
neval_err_num:484
easy pred: table transcripts, columns = [*,transcript_id,transcript_date,other_details]I'm not sure if I'm on the right track, but I'm trying to get the results to show the date of the transcript with the least number of results. You can use the
easy gold: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'
neval_err_num:485
medium pred: select * from transcript_contents where transcript_id = '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
medium gold: SELECT name ,  tonnage FROM ship ORDER BY name DESC
neval_err_num:486
medium pred: table students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]
medium gold: SELECT name ,  date FROM battle
neval_err_num:487
medium pred: what is the id of the semester that had only bachelors students enrolled?||2|||||||||||||||||||||||||||||||||||||||||||||||||
medium gold: SELECT max(killed) ,  min(killed) FROM death
neval_err_num:488
easy pred: how many different courses are currently being taken?||table|addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]||table|c
easy gold: SELECT avg(injured) FROM death
neval_err_num:489
medium pred: what are the different courses that students are enrolled in?||table|addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]||table
medium gold: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'
neval_err_num:490
medium pred: table students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]
medium gold: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'
neval_err_num:491
medium pred: The output should be:|student_id|first_name|middle_name|last_name|cell_mobile_number|email_address|ssn|date_first_registered|date_left|other_student_details||:---:|:---:|:---:|
medium gold: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'
neval_err_num:492
hard pred: describe the section h.The problem is that I get the following error:ERROR:  relation "student_enrolment_courses" does not existLINE 1:...ion_id,course_id,student_enrolment_id,student_enrolment_courses
hard gold: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10
neval_err_num:493
extra pred: what is the description for the section named h?||h||h||h||h||h||h||h||h||h||h||h||h||h||h||h||h||h||h||h
extra gold: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1
neval_err_num:494
medium pred: find the first name of the students who permanently live in the country haiti or have the cell phone number 09700166582.The result should be:|first_name|middle_name|last_name|cell_mobile_number|email_address|ssn|date_first_registered
medium gold: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'
neval_err_num:495
easy pred: select * from student_enrolment_courses where student_enrolment_id = '09700166582' and student_enrolment_id = '09700166582' and student_enrolment_id = '09700166582'
easy gold: SELECT count(DISTINCT RESULT) FROM battle
neval_err_num:496
extra pred: table cartoons, columns = [*,title,id,channel]|list the title of all cartoons in alphabetical order.|list the title of all cartoons in alphabetical order.|list the title of all cartoons in alphabetical order.|list the title of all cartoons in alphabetical order.
extra gold: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );
neval_err_num:497
extra pred: table cartoons, columns = [*,id,title,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]
extra gold: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'
neval_err_num:498
extra pred: list all tv_series directed by "ben jones".|table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]|table tv_series, columns = [*,id,series_name,country
extra gold: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'
neval_err_num:499
medium pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_
medium gold: SELECT note FROM death WHERE note LIKE '%East%'
neval_err_num:500
medium pred: select * from tv_series where channel = 'cartoon' and series_name = 'the simpsons' and episode ='s06e10'select * from tv_series where channel = 'cartoon' and series_name = 'the
medium gold: SELECT line_1 ,  line_2 FROM addresses
neval_err_num:501
medium pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_
medium gold: SELECT line_1 ,  line_2 FROM addresses
neval_err_num:502
easy pred: table cartoon, columns = [*,id,title,directed_by,original_air_date,production_code,channel]|list all tv series ordered by their air date and their directors|table tv_series, columns = [*,id,series_name,country,language,content,pixel
easy gold: SELECT count(*) FROM Courses
neval_err_num:503
easy pred: table tv_series, columns = [*,id,channel,air_date,episode,rating,share,18_49_rating_share,viewers_m,weekly_rank,original_air_date]table tv_channel, columns = [*,id,series_name,country
easy gold: SELECT count(*) FROM Courses
neval_err_num:504
easy pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:505
easy pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_
easy gold: SELECT course_description FROM Courses WHERE course_name  =  'math'
neval_err_num:506
easy pred: table tv_channel, columns = [*,id,country,number_of_channels]table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]foreign_
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
neval_err_num:507
easy pred: table tv_channel, columns = [*,id,country,number_of_channels]|count||country|number_of_channels||:---|:---|:---||United States|  195||United Kingdom|  50||France|
easy gold: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'
neval_err_num:508
extra pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]|count||---||2||1|
extra gold: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:509
extra pred: how many different contents are listed in the tv series table?|how many different channels are listed in the tv channel table?|how many different countries are listed in the tv channel table?|how many different languages are listed in the tv channel table?|how many different content types are
extra gold: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1
neval_err_num:510
easy pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]||||||||
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
neval_err_num:511
easy pred: table sky_radio, columns = [*,id,title,description,url,image,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_
easy gold: SELECT count(DISTINCT department_id) FROM Degree_Programs
neval_err_num:512
easy pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
neval_err_num:513
easy pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
easy gold: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs
neval_err_num:514
medium pred: select * from tv_channel where language = 'english'select * from tv_channel where language = 'english' and country = 'USA'select * from tv_channel where language = 'english' and country = '
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
neval_err_num:515
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]||||||||
medium gold: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'
neval_err_num:516
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
medium gold: SELECT section_name ,  section_description FROM Sections
neval_err_num:517
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
medium gold: SELECT section_name ,  section_description FROM Sections
neval_err_num:518
medium pred: table language, columns = [*,id,name,country,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]|list each tv channel and the number of tv series using it.|list each tv series and the
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
neval_err_num:519
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]||||||||
medium gold: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2
neval_err_num:520
easy pred: table tv_series, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]||||||||
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC
neval_err_num:521
easy pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]||||||||
easy gold: SELECT section_name FROM Sections ORDER BY section_name DESC
neval_err_num:522
extra pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]|list the title of all  cartoons showed on tv channel with series name
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:523
extra pred: table cartools, columns = [*,id,title,description,created_at,updated_at,deleted_at,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv
extra gold: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:524
medium pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]|sort -rating desc|limit 10|table tv_series, columns = [*,
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
neval_err_num:525
medium pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]||||||||||||
medium gold: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'
neval_err_num:526
medium pred: table tv_series, columns = [*,id,episode,rating]|list top 3 highest rating  tv series. list the tv series's episode and rating.|table tv_series, columns = [*,id,episode,rating]|list top 3 highest rating
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:527
medium pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]foreign_keys = [tv_series.id,tv_channel.id]primary_
medium gold: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2
neval_err_num:528
hard pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]||||||||||||
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:529
hard pred: when did the episode "a love of a lifetime" air?||when did the episode "a love of a lifetime" air?||when did the episode "a love of a lifetime" air?||when did the episode "a love of a lifetime" air?||
hard gold: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'
neval_err_num:530
extra pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]||||||||||||
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:531
extra pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]||||||||||||
extra gold: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:532
extra pred: table tv_series, columns = [*,id,title,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]foreign_keys = [tv_channel.id,tv_series.id]primary
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:533
extra pred: table tv_series, columns = [*,id,title,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]table tv_episode, columns = [*,id,episode,air_date,rating
extra gold: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:534
extra pred: table tv_series, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]|where series_name = "sky radio"|limit
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:535
extra pred: table tv_series, columns = [*,id,title,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]|where episode = "sky radio"|limit 1|format episode|format
extra gold: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:536
hard pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table director, columns = [*,id,name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:537
hard pred: SELECT * FROM tv_seriesWHERE id IN (SELECT id FROM tv_director)ORDER BY id;SELECT * FROM tv_directorWHERE id IN (SELECT id FROM tv_series)ORDER BY id;SELECT * FROM tv_channelWHERE id IN
hard gold: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )
neval_err_num:538
easy pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
neval_err_num:539
easy pred: table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_
easy gold: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id
neval_err_num:540
extra pred: find the package choice and series name of the tv channel that has high definition tv.
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:541
extra pred: table tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel,package_option]table tv_channel, columns = [*,id,series_name,country,language
extra gold: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1
neval_err_num:542
extra pred: table tv_series, columns = [*,id,title,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_channel, columns = [*,id,series_name,country
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:543
extra pred: table countries, columns = [*,country,population]table tv_channel, columns = [*,id,country,population]foreign_keys = [countries.country = tv_channel.country]primary_keys = [tv_channel.country = tv
extra gold: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id
neval_err_num:544
medium pred: table tv_channel, cartoon, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_per_view_ppv, package_option, series_name, country, language, content, pixel_aspect_ratio_par, hight_definition_tv, pay_
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
neval_err_num:545
medium pred: select * from tv_channel where channel = 'Cartoon Network' and country = 'United States' and language = 'English' and pixel_aspect_ratio_par = '1.333' and hight_definition_tv = 'HD' and pay_
medium gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2
neval_err_num:546
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
medium gold: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'
neval_err_num:547
medium pred: table tv_channel, columns = [*,id,country,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,air_date,rating,
medium gold: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'
neval_err_num:548
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]||||||||
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:549
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1
neval_err_num:550
medium pred: table tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]table tv_series, columns = [*,id,episode,
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:551
medium pred: how many people are there?||how many poker players are there?||how many people are there?||how many poker players are there?||how many people are there?||how many poker players are there?||how many people are there?||how many
medium gold: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1
neval_err_num:552
easy pred: count the number of people.|count the number of people.|count the number of people.|count the number of people.|count the number of people.|count the number of people.|count the number of people.|count the number of people.|count the number of
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
neval_err_num:553
easy pred: table poker_player, columns = [*,poker_player_id,earnings]|table poker_player, columns = [*,poker_player_id,earnings]|table poker_player, columns = [*,poker_player_id,earnings]|table poker
easy gold: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id
neval_err_num:554
extra pred: list the poker players who have made the final table and the best finishes of the final tables they have made.|table final_table_made, best_finish, money_rank, earnings|where final_table_made = 'final table'|and best_finish = 'best finish'
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:555
extra pred: return the money rank of the player with the greatest earnings.
extra gold: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:556
easy pred: what are the names of people?|what are the names of poker tables?|what are the names of final tables?|what are the names of best finishes?|what are the names of money ranks?|what are the names of earnings?|what are the names of people?|what are the names of poker tables?
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:557
easy pred: return the names of all the people who have played in the final table.||||||||||||||||||||||||||
easy gold: SELECT avg(transcript_date) FROM Transcripts
neval_err_num:558
medium pred: list the names of poker players ordered by the final tables made in descending order.|table people, columns = [*,people_id,nationality,name,birth_date,height]|table poker_player, columns = [*,poker_player_id,people_id,final_table
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:559
medium pred: return the name of the poker player with the highest earnings.
medium gold: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1
neval_err_num:560
easy pred: return the money rank of the poker player with the greatest height.
easy gold: SELECT count(*) FROM Transcripts
neval_err_num:561
easy pred: table poker_player, columns = [*,poker_player_id,height]|give average earnings of poker players who are taller than 200.||table poker_player, columns = [*,poker_player_id,height]|||give average earnings of poker players who are
easy gold: SELECT count(*) FROM Transcripts
neval_err_num:562
medium pred: return the names of poker players sorted by their final table made descending.|||||||||||||||||||||||||||
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:563
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1
neval_err_num:564
hard pred: how many people are there of each nationality?||||||||||||||||||||||||||||||
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:565
hard pred: what is the most common nationality of poker_player?|||||||||||||||||||||||||||||
hard gold: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1
neval_err_num:566
extra pred: select * from people where nationality = 'American'select * from people where nationality = 'British'select * from people where nationality = 'French'select * from people where nationality = 'German'select * from people where
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:567
extra pred: what are the names of people who have made it to the final table?|what are the names of people who have made it to the final table and have the highest earnings?|what are the names of people who have made it to the final table and have the highest earnings and have the highest finish?|what are the names of
extra gold: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1
neval_err_num:568
extra pred: table people, columns = [*,people_id,nationality]table poker_player, columns = [*,poker_player_id,people_id,nationality]foreign_keys = [poker_player.people_id = people.people_id]primary_
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:569
extra pred: table people, columns = [*,people_id,name,birth_date]|list the names and birth dates of people in descending alphabetical order of name.|table people, columns = [*,people_id,name,birth_date]|list the names and birth dates of people
extra gold: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'
neval_err_num:570
easy pred: what are the names and birth dates of people, ordered by their names in alphabetical order?||||||||||||||||||||||||
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neval_err_num:571
easy pred: select * from people where nationality!= 'russia'select * from people where nationality = 'russia'select * from people where nationality = 'russia' and height > 180select * from people where nationality = 'r
easy gold: SELECT count(DISTINCT current_address_id) FROM Students
neval_err_num:572
easy pred: what are the names of people who are not from russia?select * from people where nationality = 'russian'select * from people where nationality = 'russian'select * from people where nationality = 'russian'select * from people
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:573
easy pred: list the names of poker players that are not in the final table.|table final_table, columns = [*,final_table_made,best_finish,money_rank,earnings]|list the names of poker players that have made it to the final table.|list the names of poker
easy gold: SELECT other_student_details FROM Students ORDER BY other_student_details DESC
neval_err_num:574
easy pred: what are the names of people who do not play poker?|people_id |name |birth_date |height || | | | || | | | || | | | || | | |
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neval_err_num:575
easy pred: how many people are there?|how many people are there?|how many people are there?|how many people are there?|how many people are there?|how many people are there?|how many people are there?|how many people are there?|how many people are there?|how many people are there
easy gold: SELECT section_description FROM Sections WHERE section_name  =  'h'
neval_err_num:576
hard pred: count the number of people who have made it to the final table.|count the number of people who have finished in the top 3.|count the number of people who have finished in the top 3 and have made it to the final table.|count the number of people who have finished in the top
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neval_err_num:577
hard pred: select * from votes where state = 'CA'select * from votes where state = 'CA' and phone_number = '555-555-5555'select * from votes where state = 'CA' and phone_number = '
hard gold: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'
neval_err_num:578
easy pred: list the contestant numbers and names, ordered by contestant number ascending.|table votes, columns = [*,vote_id,phone_number,state,contestant_number,created]|table contestants, columns = [*,contestant_number,contestant_name]|table
easy gold: SELECT Title FROM Cartoon ORDER BY title
neval_err_num:579
easy pred: table votes, columns = [*,vote_id,phone_number,state]|table votes, columns = [*,vote_id,phone_number,state,contestant_number]|table votes, columns = [*,vote_id,phone_number,state,cont
easy gold: SELECT Title FROM Cartoon ORDER BY title
neval_err_num:580
easy pred: what are the names of the contestants whose names are not 'jessie alloway' and whose phone numbers are not '555-555-5555'|
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
neval_err_num:581
easy pred: select distinct state, created from votes where phone_number = '555-555-5555'select distinct state, created from votes where phone_number = '555-555-5555' and contestant_number = '123456'select distinct state, created from votes
easy gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones";
neval_err_num:582
easy pred: select * from votes where votes.contestant_number = 2 and votes.state = 'CA'select * from votes where votes.contestant_number = 2 and votes.state = 'CA' and votes.contestant_number =
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
neval_err_num:583
easy pred: select * from votes where votes.contestant_number = 1 and votes.state = 'CA'select * from votes where votes.contestant_number = 2 and votes.state = 'CA'select * from votes where votes.
easy gold: SELECT count(*) FROM Cartoon WHERE Written_by = "Joseph Kuhr";
neval_err_num:584
medium pred: select * from votes where contestant_number = 'tabatha gehling'select * from votes where contestant_number = 'tabatha gehling' and state = 'CA'select * from votes where contestant_number = 'tabatha ge
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
neval_err_num:585
medium pred: table votes, columns = [*,vote_id,phone_number,state,contestant_number,created]|where phone_number = '555-555-5555'|where state = 'CA'|where contestant_number = 'tabatha geh
medium gold: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date
neval_err_num:586
medium pred: table contestants, columns = [*,contestant_name]table votes, columns = [*,contestant_name,state,phone_number,created]foreign_keys = [contestants.contestant_name]primary_keys = [contest
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:587
medium pred: |countrycode,countryname,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2||A,Africa,Africa,Africa,Africa,Africa,Africa,Africa,Africa,
medium gold: SELECT Title FROM Cartoon WHERE Directed_by = "Ben Jones" OR Directed_by = "Brandon Vietti";
neval_err_num:588
hard pred: table nations, columns = [*,name,founded,population]||||||||||||||||||||||||||
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:589
hard pred: how many countries have a monarch as their head of state?||how many countries have a republic as their form of government?||how many countries have a monarch as their head of state?||how many countries have a republic as their form of government?||how many countries have a monarch as their
hard gold: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;
neval_err_num:590
medium pred: how many countries have governments that are monarchies?||how many countries have governments that are republics?||how many countries have governments that are monarchies?||how many countries have governments that are republics?||how many countries have governments that are monarchies?||how many countries
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:591
medium pred: |countrycode,country,continent,surfacearea||countrycode,country,continent,surfacearea||countrycode,country,continent,surfacearea||countrycode,country,continent,surfacearea||countrycode,country,continent,surfacearea||country
medium gold: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;
neval_err_num:592
easy pred: which country is anguilla in?|
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:593
easy pred: what is the country name which anguilla belongs to?||countrycode|anguilla||countryname|Anguilla||continent|Americas||region|Caribbean||surfacearea|0.001||indepyear|0.001||population|
easy gold: SELECT Content FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:594
easy pred: which country is the city kabul located in?||city|country|countrylanguage|sqlite_sequence||---|---|---|---||kabul|Afghanistan|English|1||kabul|Afghanistan|English|2||kabul|Afghan
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:595
easy pred: what is the population of kabul?||city|country|countrylanguage|sqlite_sequence||---|---|---|---||Kabul|Afghanistan|English|1||Kabul|Afghanistan|Pashto|2||Kabul|Afghan
easy gold: SELECT Package_Option FROM TV_Channel WHERE series_name = "Sky Radio";
neval_err_num:596
easy pred: select countrycode, name, population from countrylanguage where countrycode = 'ARU' order by population desc limit 1||ARU|Aruba|||ARU|Aruba|||ARU|Aruba|||ARU|Aruba|||ARU
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
neval_err_num:597
easy pred: what is the capital of aruba?|what is the population of aruba?|what is the population of aruba?|what is the population of aruba?|what is the population of aruba?|what is the population of aruba?|what is the population of aruba?|what is the population of
easy gold: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = "English";
neval_err_num:598
hard pred: |city|country|countrylanguage|sqlite_sequence||---|---|---|---|| | | | || | | | || | | | || | | | || |
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:599
hard pred: select * from country where countrycode = ‘BR’select * from countrylanguage where countrycode = ‘BR’ and language = ‘Portuguese’select * from sqlite_sequence where name = ‘country’select * from city
hard gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;
neval_err_num:600
medium pred: what is the population of angola?||countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode|country|countrycode
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:601
medium pred: select countrycode, name, population from countrylanguage where countrycode = 'ANG'||what is the population of angola?||select countrycode, name, population from countrylanguage where countrycode = 'ANG'||what is the population of angola?||select country
medium gold: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE
neval_err_num:602
medium pred: |countrycode,lifeexpectancy||countrycode,gnp||countrycode,gnpold||countrycode,gnp,gnpold,localname,governmentform,headofstate,capital,code2||countrycode,code2,gnp,gnpold,
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
neval_err_num:603
medium pred: select countrycode, name, population, lifeexpectancy from country where continent = 'africa' order by lifeexpectancy desc limit 1|
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = "The Rise of the Blue Beetle!";
neval_err_num:604
medium pred: give the name of the country in asia with the highest life expectancy.||||||||||||||||||||||||||
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:605
medium pred: select * from country where continent = 'asia' and gnp > 1000000000;select * from countrylanguage where countrycode = 'asia' and language = 'english';select * from sqlite_sequence where name = '
medium gold: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:606
easy pred: select countrycode, name, population, gnp from countrylanguage where countrycode = 'asia' order by population desc limit 1;|countrycode |name |population |gnp ||:--------- |:--- |:-------- |:--- ||CN
easy gold: SELECT Episode FROM TV_series ORDER BY rating
neval_err_num:607
easy pred: |countrycode,lifeexpectancy||africa,||afghanistan,||albania,||algeria,||andorra,||angola,||argentina,||armenia,||aruba,||
easy gold: SELECT Episode FROM TV_series ORDER BY rating
neval_err_num:608
medium pred: |country, continent, surfacearea, lifeexpectancy||africa, africa, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
neval_err_num:609
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;
neval_err_num:610
medium pred: give the total surface area covered by countries in asia or europe.|||||||||||||||||||||||||||
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;
neval_err_num:611
medium pred: how many people live in gelderland district?|||||||||||||||||||||||||||||
medium gold: SELECT max(SHARE) , min(SHARE) FROM TV_series;
neval_err_num:612
easy pred: what is the total population of the netherlands?||what is the total population of the netherlands?||what is the total population of the netherlands?||what is the total population of the netherlands?||what is the total population of the netherlands?|
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:613
easy pred: table us, columns = [*,countrycode,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]table us_states, columns = [*,statecode
easy gold: SELECT Air_Date FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:614
easy pred: table countrylanguage, columns = [*,countrycode,language,isofficial,percentage]table country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headof
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:615
easy pred: ||||||||||||||||||||||||||||||||||
easy gold: SELECT Weekly_Rank FROM TV_series WHERE Episode = "A Love of a Lifetime";
neval_err_num:616
medium pred: how many type of governments are in africa?|countrycode,countryname,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2,isofficial,percentage,name,seq,country
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:617
medium pred: how many different forms of governments are there in africa?|countrycode,countryname,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2||AFRICA||||
medium gold: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = "A Love of a Lifetime";
neval_err_num:618
medium pred: what is the total number of languages used in aruba?|sqlite3 -init -file /tmp/aruba.db -column -header -separator "|" -out /tmp/aruba.sql -header -separator "|" -column
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:619
medium pred: how many languages are spoken in aruba?|||||||||||||||||||||||||||||
medium gold: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = "Sky Radio";
neval_err_num:620
medium pred: how many official languages does afghanistan have?| | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
neval_err_num:621
medium pred: how many official languages are spoken in afghanistan?||||||||||||||||||||||||||||
medium gold: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by
neval_err_num:622
medium pred: what is name of the country that speaks the largest number of languages?|
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
neval_err_num:623
medium pred: select * from countrylanguage where countrycode = 'US' and language = 'English' order by percentage desc limit 1;select * from countrylanguage where countrycode = 'US' and language = 'English' order by percentage desc limit 1;
medium gold: select production_code ,  channel from cartoon order by original_air_date desc limit 1
neval_err_num:624
medium pred: select * from countrylanguage where countrycode = 'US' and language = 'English'select * from countrylanguage where countrycode = 'US' and language = 'English' and countrycode = 'US'select * from countrylanguage where
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:625
medium pred: how many countries speak both english and dutch?|||||||||||||||||||||||||||||
medium gold: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  "yes"
neval_err_num:626
medium pred: |city,country,language||city,country,countrylanguage||country,countrylanguage||country,countrylanguage,language||country,countrylanguage,countrycode||country,countrylanguage,countrycode,language||country,countrylanguage,countrycode,countrylanguage|
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:627
medium pred: select * from country where countrycode in (select countrycode from countrylanguage where countrycode = 'fr')select * from country where countrycode in (select countrycode from countrylanguage where countrycode = 'en')select * from country where countrycode in
medium gold: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:628
hard pred: |countrycode,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2||1,United States,North America,United States,United States,United States,United States
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:629
hard pred: |countrycode |name |country |code ||:---------:|:-----:|:------:|:-----:|| | | | || | | | || | | | || |
hard gold: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'
neval_err_num:630
extra pred: |city,country,countrycode,continent,population||city,country,countrycode,continent,population||country,countrycode,continent,population||country,countrycode,continent,population||country,countrycode,continent,population||country,
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:631
extra pred: select * from country where continent = 'asia' and population > 1000000000;select * from country where continent = 'asia' and population > 1000000000 and country.population < 2000000000;select * from country
extra gold: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'
neval_err_num:632
medium pred: what are the regions that use english or dutch?|city,country,countrylanguage,sqlite_sequence,table,tablecity,tablecountry,tablecountrylanguage,tablesqlite_sequence,tabletablecity,tabletablecountry,tabletablecountrylanguage,tabletablesqlite_sequence,tabletabletablecity,
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neval_err_num:633
medium pred: table regions, columns = [*,name,continent,code,population]table languages, columns = [*,name,isofficial,code]table countries, columns = [*,code,name,continent,region,population]table countries_languages, columns = [
medium gold: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'
neval_err_num:634
easy pred: select * from countrylanguage where countrycode = 'NL' and language = 'dutch'|countrycode |language ||:---------:|:--------:||NL |dutch ||DE |german ||FR |
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neval_err_num:635
easy pred: |countrycode,countryname,countrylanguage.countrycode,countrylanguage.language,countrylanguage.percentage||DE,Germany,de,de,0.5||NL,Netherlands,nl,nl,0.5||FR,France,fr,fr,0.5
easy gold: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2
neval_err_num:636
hard pred: select countrycode, name, population from countrylanguage where countrycode = 'AS' order by population desc limit 1|
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
neval_err_num:637
hard pred: what is the language that is used by the largest number of asian nations?foreign_keys = [country.code = countrylanguage.countrycode,countrylanguage.countrycode = country.code]primary_keys = [country.code = countrylanguage.countrycode,countrylanguage
hard gold: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'
neval_err_num:638
hard pred: |countrycode,country,language,population||:---|:---|:---|:---||DE,Germany,Deutsch,0||FR,France,Français,0||GB,United Kingdom,English,0||IT,Italy,Italiano
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neval_err_num:639
hard pred: table country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]table countrylanguage, columns = [*,countrycode,language
hard gold: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')
neval_err_num:640
easy pred: select * from city where population > (select max(population) from city where countrycode = 'GB')select * from country where continent = 'Europe' and population > (select max(population) from country where continent = 'Europe')select
easy gold: SELECT count(*) FROM poker_player
neval_err_num:641
easy pred: find the name, population and expected life length of european country with the largest area?|
easy gold: SELECT count(*) FROM poker_player
neval_err_num:642
easy pred: |countrycode |name |population |life expectancy ||:---------:|:---:|:---------:|:------------:||KR |South Korea | | ||JP |Japan | | ||CN |China |
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
neval_err_num:643
easy pred: |countrycode,meanlifeexpectancy||countrycode,meanlifeexpectancy||countrycode,meanlifeexpectancy||countrycode,meanlifeexpectancy||countrycode,meanlifeexpectancy||countrycode,meanlifeexpectancy||countrycode,meanlifeexpect
easy gold: SELECT Earnings FROM poker_player ORDER BY Earnings DESC
neval_err_num:644
medium pred: select countrycode, name, population from country where countrycode <> 'EN' order by population desc limit 10|||||||||||||||||||||
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neval_err_num:645
medium pred: what is the official language used in the country the name of whose head of state is beatrix.||||||||||||||||||||||||
medium gold: SELECT Final_Table_Made ,  Best_Finish FROM poker_player
neval_err_num:646
easy pred: |city,country,countrylanguage||city.name,country.name,countrylanguage.name||city.population,country.population,countrylanguage.population||city.continent,country.continent,countrylanguage.continent||city.code,country.code,country
easy gold: SELECT avg(Earnings) FROM poker_player
neval_err_num:647
easy pred: for the countries founded before 1930, what is the total number of distinct official languages?|||||||||||||||||||||||||
easy gold: SELECT avg(Earnings) FROM poker_player
neval_err_num:648
medium pred: |city,country,countrycode,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2||city,country,countrycode,continent,region,surfacearea,indep
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
neval_err_num:649
medium pred: |countrycode,countryname,area||:---|:---|:---||DE,Germany,357,000|IT,Italy,301,338|FR,France,303,000||GB,United Kingdom,243,000|ES,Spain,205,342|NL,
medium gold: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1
neval_err_num:650
easy pred: foreign_keys = [country.code = countrylanguage.countrycode]primary_keys = [country.code = countrylanguage.countrycode]foreign_keys = [country.code = countrylanguage.countrycode]primary_keys =
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
neval_err_num:651
easy pred: return the country codes for countries that do not speak english.
easy gold: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000
neval_err_num:652
easy pred: foreign_keys = [country.code = countrylanguage.countrycode]primary_keys = [country.code = countrylanguage.countrycode]foreign_keys = [country.code = countrylanguage.countrycode]primary_keys =
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
neval_err_num:653
easy pred: foreign_keys = [country.code = countrylanguage.countrycode,countrylanguage.name = countrylanguage.localname]primary_keys = [country.code = countrylanguage.countrycode,countrylanguage.name = countrylanguage.localname]foreign_
easy gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID
neval_err_num:654
medium pred: foreign_keys = [country.code = countrylanguage.countrycode,countrylanguage.countrycode = country.code]primary_keys = [country.code = countrylanguage.countrycode,countrylanguage.countrycode = country.code]foreign_keys
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:655
medium pred: table country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]table countrylanguage, columns = [*,countrycode,language
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000
neval_err_num:656
medium pred: |city,countrycode,name,countrylanguage.percentage||city,countrycode,name,countrylanguage.isofficial||city,countrycode,name,countrylanguage.localname||city,countrycode,name,countrylanguage.governmentform||city,countrycode,name
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:657
medium pred: |city,countrycode,name,population||city,countrycode,name,population||city,countrycode,name,population||city,countrycode,name,population||city,countrycode,name,population||city,countrycode,name,population||
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made
neval_err_num:658
hard pred: return the different names of countries that are in asia and for which chinese is the official language.||||||||||||||||||||||||
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
neval_err_num:659
hard pred: |countrycode,country,population,surfacearea,indepyear||countrycode,country,population,surfacearea,indepyear||countrycode,country,population,surfacearea,indepyear||countrycode,country,population,surfacearea,indepyear||countrycode
hard gold: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1
neval_err_num:660
hard pred: |countrycode,name,population,surfacearea||countrycode,name,population,surfacearea||countrycode,name,population,surfacearea||countrycode,name,population,surfacearea||countrycode,name,population,surfacearea||countrycode,name,population
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:661
hard pred: |countrycode,|name,|population,|headofstate||:---:|:---:|:---:|:---:||AUS|Australia|32,000,000|Prime Minister||CHN|China|1,300,000,000|President|
hard gold: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1
neval_err_num:662
medium pred: table country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]table countrylanguage, columns = [*,countrycode,language
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
neval_err_num:663
medium pred: select * from countrylanguage where countrycode = 'US' and language = 'English'select * from countrylanguage where countrycode = 'US' and language = 'Spanish'select * from countrylanguage where countrycode = 'US' and
medium gold: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200
neval_err_num:664
medium pred: select city.name, country.name, countrylanguage.name, country.population, countrylanguage.population, country.continent, country.code, country.name, country.continent, country.code, country.name, country.continent, country.code, country.name, country.continent
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
neval_err_num:665
medium pred: select * from city where countrycode = 'US' and population > (select avg(population) from city where countrycode = 'US')select * from city where countrycode = 'US' and population > (select avg(population) from city where
medium gold: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC
neval_err_num:666
medium pred: select country, avg(lifeexpectancy) as lifeexpectancy, avg(gnp) as gnp from countrylanguage group by country having avg(lifeexpectancy) < 72select country, avg(lifeexpectancy) as lifeexpectancy, avg(gnp) as gnp from countrylanguage
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neval_err_num:667
medium pred: select countrycode, name, population, lifeexpectancy, continent, region, surfacearea, indepyear, gnp, gnpold, localname, governmentform, headofstate, capital, code2, countrylanguage.isofficial, countrylanguage.percentagefrom country, countrylanguagewhere country.
medium gold: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality
neval_err_num:668
hard pred: |city.name |country.name |countrylanguage.name |country.continent |country.region |country.surfacearea |country.indepyear |country.population |country.lifeexpectancy |country.gnp |country.gnpold |country
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:669
hard pred: select name, surfacearea from country where countrycode = 'US' order by surfacearea desc limit 5select name, surfacearea from country where countrycode = 'US' order by surfacearea desc limit 5select name, surfacearea from country where countrycode = '
hard gold: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:670
easy pred: |countrycode,population||countrycode,population||countrycode,population||countrycode,population||countrycode,population||countrycode,population||countrycode,population||countrycode,population||countrycode,population||countrycode,
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
neval_err_num:671
easy pred: return the names of the 3 most populated countries.||||||||||||||||||||||||||||
easy gold: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2
neval_err_num:672
medium pred: table country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]table countrylanguage, columns = [*,countrycode,language
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
neval_err_num:673
medium pred: how many countries are in europe?||how many countries are in africa?||how many countries are in south america?||how many countries are in north america?||how many countries are in australia?||how many countries are in south africa?||how many countries are in
medium gold: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC
neval_err_num:674
easy pred: count the number of countries in europe.|count the number of countries in africa.|count the number of countries in south america.|count the number of countries in north america.|count the number of countries in australia.|count the number of countries in asia.|count the number of countries
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"
neval_err_num:675
easy pred: |city,country,population||country,countrylanguage,population||countrylanguage,country,population||country,countrylanguage,population,countrycode||country,countrylanguage,population,countrycode,continent||country,countrylanguage,population,countrycode,continent,
easy gold: SELECT Name FROM people WHERE Nationality != "Russia"
neval_err_num:676
hard pred: |country,population||europe,80000||europe,80000||europe,80000||europe,80000||europe,80000||europe,80000||europe,80000
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
neval_err_num:677
hard pred: give the total population and average surface area corresponding to countries in europe that have a surface area greater than 3000.|||||||||||||||||||||
hard gold: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)
neval_err_num:678
easy pred: |city.population >= 160000 && city.population <= 900000||city.population >= 160000 && city.population <= 900000||city.population >= 160000 && city.population <= 900000||city.population
easy gold: SELECT count(DISTINCT Nationality) FROM people
neval_err_num:679
easy pred: return the names of countries that have a population between 160000 and 900000.||||||||||||||||||||||||
easy gold: SELECT count(DISTINCT Nationality) FROM people
neval_err_num:680
easy pred: select countrycode, name, population from countrylanguage where countrycode = 'EN' order by population desc limit 1|||||||||||||||||||||
easy gold: SELECT count(*) FROM area_code_state
neval_err_num:681
medium pred: table countrylanguage, columns = [*,countrycode,language,isofficial,percentage]|||||||||||||||||||||||
medium gold: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC
neval_err_num:682
medium pred: select countrycode, name, population, countrylanguage.percentagefrom countrylanguagewhere countrycode = 'US'and countrylanguage.percentage > 50order by countrycode, populationlimit 10
medium gold: SELECT vote_id ,  phone_number ,  state FROM votes
neval_err_num:683
medium pred: |countrycode,country,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,countrylanguage,countrycode,country
medium gold: SELECT max(area_code) ,  min(area_code) FROM area_code_state
neval_err_num:684
easy pred: table countrylanguage, columns = [*,countrycode,language,percentage]table sqlite_sequence, columns = [*,name,seq]foreign_keys = [countrylanguage.countrycode = country.code]primary_keys = [countrylanguage.countrycode
easy gold: SELECT max(created) FROM votes WHERE state  =  'CA'
neval_err_num:685
easy pred: |countrycode,countryname,countrypopulation,countrycontinent,countryregion,countrysurfacearea,countrygnp,countrygnpold,countrylocalname,countrygovernmentform,countryheadofstate,countrycapital,countrycode2,countrycode,countryisofficial,countrypercentage||1,Spain,
easy gold: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'
neval_err_num:686
medium pred: table countrylanguage, columns = [*,countrycode,language,isofficial,percentage]table sqlite_sequence, columns = [*,name,seq]foreign_keys = [countrylanguage.countrycode = country.code]primary_keys = [countrylanguage
medium gold: SELECT DISTINCT state ,  created FROM votes
neval_err_num:687
medium pred: how many orchestras are there?|how many performances are there?|how many shows are there?|how many records are there?|how many companies are there?|how many records are there?|how many performances are there?|how many shows are there?|how many records are there?|how many companies are
medium gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2
neval_err_num:688
extra pred: count the number of orchestras.|count the number of performances.|count the number of shows.|count the number of records companies.|count the number of years of the orchestra founded.|count the number of major record formats.|count the number of records.|count the number of
extra gold: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1
neval_err_num:689
medium pred: list the names of orchestras in ascending order of year of founding.|table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]|table orchestra, columns = [*,orchestra_id,orchestra,conductor_id
medium gold: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'
neval_err_num:690
extra pred: what are the names of orchestras, ordered by year of founding?|what are the names of performances, ordered by attendance?|what are the names of shows, ordered by weekly rank?|what are the names of orchestras, ordered by major record format?|what are the names of performances, ordered by official ratings?|
extra gold: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )
neval_err_num:691
extra pred: return the names of conductors that do not have the nationality "usa" and the name "johann".|return the names of conductors that do not have the nationality "usa" and the name "johann" and the age "50".|return the names of conductors that do not have the nationality
extra gold: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1
neval_err_num:692
medium pred: |orchestra_id|record_company|year_of_founded||:---:|:---:|:---:||1|Sony|2000||2|Warner|2001||3|Universal|2002||4|EMI|200
medium gold: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'
neval_err_num:693
extra pred: return the record companies of orchestras, sorted descending by the years in which they were founded.|table record_companies, columns = [*,record_company_id,name,year_of_founded]|table record_companies, columns = [*,record_company_id,name
extra gold: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'
neval_err_num:694
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: select contestant_name from contestants where contestant_name like "%al%"
neval_err_num:695
easy pred: return the average attendance across all shows for each orchestra.||||||||||||||||||||||||||||
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950
neval_err_num:696
easy pred: return the maximum and minimum shares for performances that do not have the type "live final".
easy gold: SELECT Name FROM country WHERE IndepYear  >  1950
neval_err_num:697
easy pred: how many different record companies do orchestras have?||how many different record formats do orchestras have?||how many different performances do orchestras have?||how many different shows do performances have?||how many different conductors have?||how many different orchestras have?||
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
neval_err_num:698
easy pred: count the number of different nationalities of orchestras.|count the number of different nationalities of performances.|count the number of different nationalities of shows.|count the number of different nationalities of records companies.|count the number of different nationalities of years of founding.|count the number of
easy gold: SELECT count(*) FROM country WHERE GovernmentForm  =  "Republic"
neval_err_num:699
easy pred: list names of orchestras in descending order of years of existence.|table conductor, orchestra, performance, show, conductor_id, orchestra_id, performance_id, if_first_show, result, attendance|table conductor, orchestra, performance, show, conductor_id, orchestra_id, performance_id,
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neval_err_num:700
easy pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT sum(SurfaceArea) FROM country WHERE Region  =  "Caribbean"
neval_err_num:701
easy pred: table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]|where year_of_work = (select max(year_of_work) from conductor)|limit 1|format name|format age|format nationality
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
neval_err_num:702
easy pred: |what is the name of the orchestra that has performed the most concerts?||what is the name of the orchestra that has performed the most concerts in the last 10 years?||what is the name of the orchestra that has performed the most concerts in the last 10 years?||what is the
easy gold: SELECT Continent FROM country WHERE Name  =  "Anguilla"
neval_err_num:703
medium pred: show the names of orchestras and the conductors they have played with.|||||||||||||||||||||||||||
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
neval_err_num:704
medium pred: |what are the names of orchestras as well as the corresonding conductors that they have performed with?||what are the names of conductors as well as the corresonding orchestras that they have performed with?||what are the names of orchestras as well as the corresonding conductors
medium gold: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  "Kabul"
neval_err_num:705
extra pred: show the names of orchestras that have conducted more than one conductors.
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
neval_err_num:706
extra pred: what are the names of orchestras that have been conducted by more than one conductor?|
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba" ORDER BY Percentage DESC LIMIT 1
neval_err_num:707
medium pred: show the name of the orchestra that has performed the most number of shows.||||||||||||||||||||||||||
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
neval_err_num:708
medium pred: what is the name of the orchestra that has performed the most concerts?||what is the name of the orchestra that has performed the most concerts?||what is the name of the orchestra that has performed the most concerts?||what is the name of the orchestra that has performed the most concerts?||
medium gold: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  "Brazil"
neval_err_num:709
medium pred: please show the name of the orchestra that has performed in the show with the highest attendance.
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
neval_err_num:710
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT Population ,  Region FROM country WHERE Name  =  "Angola"
neval_err_num:711
easy pred: please show the different record companies and the corresponding number of orchestras.
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
neval_err_num:712
easy pred: how many performances does each orchestra have?||how many performances does each orchestra have?||how many performances does each orchestra have?||how many performances does each orchestra have?||how many performances does each orchestra have?||how many performances does each orchestra have?||how many
easy gold: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  "Central Africa"
neval_err_num:713
hard pred: please show the record formats of orchestras in descending order of count.|||||||||||||||||||||||||||
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
neval_err_num:714
hard pred: table record_company, columns = [*,record_company_id,name]|table orchestra, columns = [*,orchestra_id,record_company_id,record_company_name]|table performance, columns = [*,performance_id,orchestra_id
hard gold: SELECT Name FROM country WHERE Continent  =  "Asia" ORDER BY LifeExpectancy LIMIT 1
neval_err_num:715
medium pred: what is the record company used by the greatest number of conductors?||what is the record company used by the greatest number of orchestras?||what is the record company used by the greatest number of conductors?||what is the record company used by the greatest number of orchestras?||what is
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
neval_err_num:716
medium pred: list the names of performances that have no orchestra.|table orchestra, performance, show||where orchestra.orchestra_id is null||where performance.performance_id is null||where show.performance_id is null||group by orchestra.orchestra_id,performance.
medium gold: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  "Asia"
neval_err_num:717
medium pred: find the number of orchestras whose record format is "cd" or "dvd".|where orchestra.record_format = "cd" or orchestra.record_format = "dvd"|count orchestra.orchestra_id|sort orchestra.orchestra_id asc
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
neval_err_num:718
medium pred: count the number of orchestras that have cd or dvd as their record format.|count the number of orchestras that have cd or dvd as their record format.|count the number of orchestras that have cd or dvd as their record format.|count the number of orchestras that have cd or dvd as their record
medium gold: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  "Africa" AND GovernmentForm  =  "Republic"
neval_err_num:719
medium pred: how many high schoolers are there?|select * from highschooler;|select * from highschooler;|select * from highschooler;|select * from highschooler;|select * from highschooler;|select * from highschooler;
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neval_err_num:720
medium pred: select count(*) from highschooler||count the number of students who have at least one friend.|select count(*) from student||count the number of students who have at least one friend.|select count(*) from student||count the number of students who have at least one friend.|
medium gold: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  "Asia" OR Continent  =  "Europe"
neval_err_num:721
easy pred: select * from highschooler;select * from likes;select * from friend;select * from student;select * from friend_likes;select * from student_likes;select * from student_friend;
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
neval_err_num:722
easy pred: |student_id|name|grade||:---|:---|:---||1|John|A||2|Jane|B||3|Joe|C||4|Jim|D||5|Jack|E||6|Jill|F
easy gold: SELECT sum(Population) FROM city WHERE District  =  "Gelderland"
neval_err_num:723
medium pred: show all the friends of the high schoolers.|show all the likes of the high schoolers.|show all the friends of the high schoolers.|show all the likes of the high schoolers.|show all the friends of the high schoolers.|show all the likes of the high school
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:724
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  "US Territory"
neval_err_num:725
easy pred: SELECT * FROM highschooler WHERE student_id = 1;|SELECT * FROM highschooler WHERE student_id = 2;|SELECT * FROM highschooler WHERE student_id = 3;|SELECT * FROM highschooler WHERE student_id =
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
neval_err_num:726
easy pred: return the name of the high schooler named kyle.||||||||||||||||||||||||||||
easy gold: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage
neval_err_num:727
easy pred: show the names of all high schoolers who are friends with a student in grade 10.|show the names of all high schoolers who are friends with a student in grade 10.|show the names of all high schoolers who are friends with a student in grade 10.|show the names of all
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
neval_err_num:728
easy pred: what are the names of all high schoolers in grade 11?||what are the names of all high schoolers in grade 12?||what are the names of all high schoolers in grade 9?||what are the names of all high schoolers in grade 10?||
easy gold: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  "Africa"
neval_err_num:729
medium pred: show the id of the high schooler named kyle.
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
neval_err_num:730
medium pred: kyle's id is 1|what is kyle's name?|kyle's name is kyle|what is kyle's grade?|kyle's grade is 3|what is kyle's friend's id?|kyle's friend's id
medium gold: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Aruba"
neval_err_num:731
medium pred: how many high schoolers are there in grade 9 or 10?|select * from highschooler where grade = 9 or 10||select * from highschooler where grade = 9 or 10||select * from highschooler where grade = 9
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
neval_err_num:732
medium pred: select name, grade from highschooler where grade >= 9 or grade <= 10|count the number of high schoolers in grades 11 or 12.|select name, grade from highschooler where grade >= 11 or grade <= 12|count the number of high schoolers
medium gold: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  "Afghanistan" AND IsOfficial  =  "T"
neval_err_num:733
extra pred: select * from highschooler where grade = '10'select * from highschooler where grade = '11'select * from highschooler where grade = '12'select * from highschooler where grade = '9'
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:734
extra pred: select * from highschooler where grade = '10'||how many high schoolers are in each grade?||select * from highschooler where grade = '10'||how many high schoolers are in each grade?||select * from highschool
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:735
extra pred: select * from highschoolerwhere student_id in (select student_id from friend)group by student_idhaving count(*) > 1order by count(*) desclimit 1select * from highschoolerwhere student_id in (select student_
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:736
extra pred: return the grade that has the greatest number of high schoolers.
extra gold: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:737
easy pred: select * from gradeswhere grade >= 4and count(student_id) >= 4and count(student_id) >= 4and count(student_id) >= 4and count(student_id) >= 4and count(student_
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:738
easy pred: SELECT * FROM grades WHERE grade >= 4 AND COUNT(student_id) >= 4SELECT * FROM grades WHERE grade >= 4 AND COUNT(student_id) >= 4SELECT * FROM grades WHERE grade >= 4 AND COUNT(student
easy gold: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch")
neval_err_num:739
extra pred: SELECT * FROM student_friends;SELECT * FROM student_likes;SELECT * FROM student_likes;SELECT * FROM student_likes;SELECT * FROM student_likes;SELECT * FROM student_likes;SELECT
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:740
extra pred: select * from highschoolerwhere student_id in (select student_id from friend)and student_id in (select student_id from likes)and student_id in (select student_id from friend)and student_id in (select student_id from likes
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French"
neval_err_num:741
extra pred: SELECT * FROM highschoolerSELECT * FROM friendSELECT * FROM likesSELECT * FROM highschoolerSELECT * FROM friendSELECT * FROM likesSELECT * FROM highschoolerSELECT * FROM friendSELECT * FROM
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:742
extra pred: |student_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_id|friend_
extra gold: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "French" AND T2.IsOfficial  =  "T"
neval_err_num:743
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:744
medium pred: table highschooler, columns = [*,id,name,grade]table likes, columns = [*,student_id,liked_id]foreign_keys = [highschooler.id,likes.student_id]primary_keys = [likes.
medium gold: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Chinese"
neval_err_num:745
hard pred: SELECT * FROM highschooler WHERE friend_count >= 3;SELECT * FROM highschooler WHERE friend_count >= 3 ORDER BY name;SELECT * FROM highschooler WHERE friend_count >= 3 ORDER BY name DESC;SELECT * FROM
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:746
hard pred: ||||||||||||||||||||||||||||||||||
hard gold: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" OR T2.Language  =  "Dutch"
neval_err_num:747
extra pred: show the names of all of the high schooler kyle's friends.
extra gold: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "english" and isofficial  =  "t" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  "dutch" and isofficial  =  "t"
neval_err_num:748
extra pred: return the names of friends of the high school student kyle.
extra gold: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND IsOfficial  =  "T" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "Dutch" AND IsOfficial  =  "T"
neval_err_num:749
extra pred: select * from highschooler where student_id = 1||||||||||||||||||||||||||
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
neval_err_num:750
extra pred: select * from highschooler where name = 'kyle'|select * from friend where student_id = 'kyle'|select * from likes where student_id = 'kyle'|select * from highschooler where student_id = 'kyle
extra gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  "Asia" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1
neval_err_num:751
hard pred: select * from students where not exists (select * from friends where student_id = students.id)select * from students where not exists (select * from friends where student_id = students.id)select * from students where not exists (select
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:752
hard pred: select * from highschooler where student_id not in (select student_id from friend)select * from highschooler where student_id not in (select student_id from friend)select * from highschooler where student_id not in (select student_
hard gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  "Republic" GROUP BY T2.Language HAVING COUNT(*)  =  1
neval_err_num:753
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
neval_err_num:754
extra pred: select * from highschooler where student_id in (select student_id from friend where friend_id in (select friend_id from likes where liked_id in (select liked_id from likes where liked_id in (select liked_id from likes where liked_id in (
extra gold: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  "English" ORDER BY T1.Population DESC LIMIT 1
neval_err_num:755
hard pred: select * from student where student_id in (select student_id from friend) and student_id in (select student_id from likes) and student_id in (select student_id from highschooler)select * from student where student_id in (select student_
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:756
hard pred: select * from likes where student_id =?|count the number of friends for each student id.|select * from friend where student_id =?|select * from highschooler where student_id =?|select * from likes where liked_id
hard gold: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  "Asia" ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:757
extra pred: SELECT * FROM likes WHERE student_id = 1SELECT * FROM likes WHERE student_id = 2SELECT * FROM likes WHERE student_id = 3SELECT * FROM likes WHERE student_id = 4SELECT * FROM likes WHERE
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
neval_err_num:758
extra pred: select * from highschooler where name = 'John Doe'select * from highschooler where name = 'Jane Doe'select * from highschooler where name = 'Jane Doe'select * from highschooler where name = 'Jane Doe
extra gold: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English" AND T2.IsOfficial  =  "T")
neval_err_num:759
extra pred: select * from highschooler where student_id in (select student_id from likes)select * from highschooler where student_id in (select student_id from likes)select * from highschooler where student_id in (select student_id from likes
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:760
extra pred: table student, columns = [*,id,name,likes]table likes, columns = [*,student_id,liked_id]foreign_keys = [student.id,likes.student_id]primary_keys = [student.name =
extra gold: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  "English")
neval_err_num:761
medium pred: SELECT * FROM students WHERE (likes.student_id IN (SELECT student_id FROM likes WHERE liked_id = 2))SELECT * FROM students WHERE (likes.student_id IN (SELECT student_id FROM likes WHERE liked_id = 2))
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:762
medium pred: select * from students where grade > 5 and count(student_id) >= 2select * from students where grade > 5 and count(student_id) >= 2 and count(student_id) >= 2select * from students where grade
medium gold: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  "Beatrix" AND T2.IsOfficial  =  "T"
neval_err_num:763
medium pred: how many friends does kyle have?||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||kyle||k
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:764
medium pred: table highschooler, columns = [*,id,name,grade]table likes, columns = [*,student_id,liked_id]foreign_keys = [highschooler.id,friend.student_id,likes.student_id]primary_keys
medium gold: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  "T"
neval_err_num:765
hard pred: select avg(grade) from student where friend in (select student_id from friend where student_id = 1)select avg(grade) from student where friend in (select student_id from friend where student_id = 2)select avg(grade) from student where
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
neval_err_num:766
hard pred: |select avg(grade) from likes where student_id in (select student_id from highschooler where name = 'John')||select avg(grade) from likes where student_id in (select student_id from highschooler where name = 'John')||
hard gold: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  "Europe")
neval_err_num:767
extra pred: ||||||||||||||||||||||||||||||||||
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  "Asia")
neval_err_num:768
extra pred: table owners, professionals, states, columns = [*,owner_id,professional_id,state]||||||||||||||||||||||
extra gold: SELECT Name FROM country WHERE Continent  =  "Africa"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  "Asia")
neval_err_num:769
extra pred: what is the average weight of the dogs who have gone through any treatments?||what is the average age of the dogs who have gone through any treatments?||what is the average weight of the dogs who have gone through any treatments?||what is the average age of the dogs who have gone through any treatments
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  "Africa")
neval_err_num:770
extra pred: select the average age of the dogs who went through treatments.
extra gold: SELECT Name FROM country WHERE Continent  =  "Asia"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  "Africa")
neval_err_num:771
hard pred: which dogs have not cost their owner more than 1000 for treatment? list the dog names.
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:772
hard pred: table professionals, owners, dogs, treatments, breeds, sizes, treatment_types||||||||||||||||||||||||||
hard gold: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:773
easy pred: SELECT * FROM professionals WHERE NOT EXISTS (SELECT * FROM treatments WHERE professional_id = professionals.professional_id)SELECT * FROM professionals WHERE NOT EXISTS (SELECT * FROM treatments WHERE professional_id = professionals.professional_id)SELECT * FROM professionals WHERE
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neval_err_num:774
easy pred: which professional has the most dogs? list the professional id, first name and last name.|||||||||||||||||||||||||
easy gold: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != "English"
neval_err_num:775
hard pred: table dogs, columns = [*,owner_id,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]|||||||
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:776
hard pred: what is the name of the breed with the most dogs?||what is the name of the breed with the most dogs?||what is the name of the breed with the most dogs?||what is the name of the breed with the most dogs?||what is the name of the breed with
hard gold: SELECT Code FROM country WHERE GovernmentForm != "Republic" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  "English"
neval_err_num:777
extra pred: which breed do the most dogs have? give me the breed name.|||||||||||||||||||||||||||
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:778
extra pred: what is the description of the treatment type that costs the most money in total?||what is the description of the treatment type that costs the least money in total?||what is the description of the treatment type that costs the most money in total?||what is the description of the treatment type that costs the
extra gold: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')
neval_err_num:779
hard pred: SELECT * FROM treatments WHERE treatment_type_code = '1' ORDER BY cost_of_treatment DESC LIMIT 1SELECT * FROM treatments WHERE treatment_type_code = '2' ORDER BY cost_of_treatment DESC LIMIT 1SELECT * FROM
hard gold: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  "asia"
neval_err_num:780
hard pred: | | || | || | || | || | || | || | || | || | || | || | ||
hard gold: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  "Asia"
neval_err_num:781
medium pred: |first_name|last_name|cost||:---|:---|:---||John|Doe|1000||Jane|Doe|2000||John|Doe|3000||Jane|Doe|4000||John|D
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
neval_err_num:782
medium pred: which dogs have been abandoned? give me the first names and last names of the owners.|||||||||||||||||||||||||
medium gold: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1
neval_err_num:783
medium pred: table treatments, columns = [*,treatment_id,treatment_type_code,date_of_treatment,first_name]|||||||||||||||||||
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:784
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1
neval_err_num:785
medium pred: table treatments, columns = [*,treatment_id,treatment_type_code,treatment_type_description]|||||||||||||||||||||
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:786
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2
neval_err_num:787
extra pred: list each professional's first name, last name, and the size of his or her dog.|list each treatment's treatment type code, the date of treatment, and the cost of treatment.|list each treatment's treatment type code, the date of treatment, and the cost of treatment.|list each
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:788
extra pred: | | || | || | || | || | || | || | || | || | || | || | ||
extra gold: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District
neval_err_num:789
medium pred: table dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]||
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:790
medium pred: what are each owner's first name and their dogs's name?|what are each owner's first name and their dogs's name?|what are each owner's first name and their dogs's name?|what are each owner's first name and their dogs's name?|
medium gold: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72
neval_err_num:791
medium pred: table dogs, columns = [*,dog_id,breed_code,size_code,name,date_of_birth,date_of_treatment,date_of_departure]||||||||||||
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:792
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72
neval_err_num:793
medium pred: which dogs are owned by someone who lives in virginia? list the owner's first name and the dog's name.|||||||||||||||||||||
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
neval_err_num:794
medium pred: |find the first names of owners living in virginia and the names of dogs they own.||||||||||||||||||||||||
medium gold: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5
neval_err_num:795
medium pred: ||||||||||||||||||||||||||||||||||
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
neval_err_num:796
medium pred: list the last name of the owner owning the oldest dog.|list the last name of the owner owning the youngest dog.|list the last name of the owner owning the oldest dog.|list the last name of the owner owning the youngest dog.|list the last name of the owner owning the oldest dog.
medium gold: SELECT Name FROM country ORDER BY Population DESC LIMIT 3
neval_err_num:797
medium pred: who is the owner of the dog with the largest breed? give me his or her first name.|who is the owner of the dog with the largest breed? give me his or her last name.|who is the owner of the dog with the largest breed? give me his or her first name.|who is
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
neval_err_num:798
medium pred: table professionals, columns = [*,professional_id,email_address]|||||||||||||||||||||||||
medium gold: SELECT Name FROM country ORDER BY Population ASC LIMIT 3
neval_err_num:799
easy pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT count(*) FROM country WHERE continent  =  "Asia"
neval_err_num:800
easy pred: table arrivals, columns = [*,arrival_date,departure_date]|list the arrival date and the departure date for all the dogs.|list the arrival date and the departure date for all the dogs.|list the arrival date and the departure date for all the dogs.|list
easy gold: SELECT count(*) FROM country WHERE continent  =  "Asia"
neval_err_num:801
medium pred: select count(*) from treatments where treatment_type_code ='spay' and treatment_type_code = 'neuter' and treatment_type_code = 'vaccine' and treatment_type_code = 'dental' and treatment_type_code = 'heart
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
neval_err_num:802
medium pred: select count(*) from treatments where treatment_type_code ='spay' and treatment_id = 1|count||---||1|||||||||||||||||||||
medium gold: SELECT Name FROM country WHERE continent  =  "Europe" AND Population  =  "80000"
neval_err_num:803
hard pred: select count(*) from treatments where treatment_type_code in (select treatment_type_code from treatment_types where treatment_type_code ='spay')|count||---||1|||||||||||||
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
neval_err_num:804
hard pred: select * from professionals where professional_id in (select professional_id from treatments where dog_id = dogs.dog_id)|||||||||||||||||||
hard gold: select sum(population) ,  avg(surfacearea) from country where continent  =  "north america" and surfacearea  >  3000
neval_err_num:805
easy pred: which dogs are abandoned? list the dog's breed, size, name, age, date_of_birth, gender, weight, date_arrived, date_adopted, date_departed.|||||||||||
easy gold: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000
neval_err_num:806
easy pred: find the number of dogs that have been adopted in the last 3 months.|where (dogs.abandoned_yn = 'no')|where (dogs.breed_code = 'labrador')|where (dogs.breed_code = 'gold
easy gold: select name from city where population between 160000 and 900000
neval_err_num:807
hard pred: table owners, columns = [*,owner_id,first_name,last_name,email_address]| | | | | | | | | | | | | | | | | | | | |
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
neval_err_num:808
hard pred: table owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]|where state = 'north'|limit 1|format first_name,last_name
hard gold: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1
neval_err_num:809
medium pred: SELECT COUNT(*) FROM dogs WHERE age < (SELECT AVG(age) FROM dogs)|||||||||||||||||||||||
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:810
medium pred: table dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]|count the number
medium gold: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode
neval_err_num:811
extra pred: how much does the most recent treatment cost?||how much does the most recent treatment cost?||how much does the most recent treatment cost?||how much does the most recent treatment cost?||how much does the most recent treatment cost?||how much does the most recent treatment cost
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:812
extra pred: show me the cost of the most recently performed treatment for each dog.|||||||||||||||||||||||||||
extra gold: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:813
medium pred: SELECT COUNT(*) FROM dogs WHERE NOT EXISTS (SELECT * FROM treatments WHERE dog_id = dogs.dog_id AND treatment_type_code = 'TREATMENT_TYPE_CODE')| | | | | | | | | | |
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:814
medium pred: how many dogs are adopted by owners?||how many dogs are adopted by professionals?||how many dogs are adopted by owners?||how many dogs are adopted by professionals?||how many dogs are adopted by owners?||how many dogs are adopted by professionals?||how many
medium gold: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  "Spanish" GROUP BY CountryCode
neval_err_num:815
easy pred: select count(*) from owners where not exists (select count(*) from dogs where dogs.owner_id = owners.owner_id)|||||||||||||||||||
easy gold: SELECT count(*) FROM conductor
neval_err_num:816
easy pred: select *, count(*) as num_professionals from professionals where num_dogs = 0;|||||||||||||||||||||||
easy gold: SELECT count(*) FROM conductor
neval_err_num:817
easy pred: table dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]||
easy gold: SELECT Name FROM conductor ORDER BY Age ASC
neval_err_num:818
easy pred: what is the average weight of all the dogs?||what is the average age of all the dogs?||what is the average weight of all the dogs?||what is the average age of all the dogs?||what is the average weight of all the dogs?||what is the
easy gold: SELECT Name FROM conductor ORDER BY Age ASC
neval_err_num:819
easy pred: compute the average weight of all the dogs.|compute the average age of all the dogs.|compute the average weight of all the dogs.|compute the average age of all the dogs.|compute the average weight of all the dogs.|compute the average age of all the dogs.|compute the
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
neval_err_num:820
easy pred: what is the age of the oldest dog?||what is the age of the oldest dog?||what is the age of the oldest dog?||what is the age of the oldest dog?||what is the age of the oldest dog?||what is the age of the oldest dog
easy gold: SELECT Name FROM conductor WHERE Nationality != 'USA'
neval_err_num:821
easy pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
neval_err_num:822
easy pred: how much does each treatment type costs? list both treatment type and amount.||||||||||||||||||||||||||
easy gold: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC
neval_err_num:823
easy pred: table charge_types, columns = [*,charge_type_code,charge_amount]|list each treatment type and its amount.|table treatment_types, columns = [*,treatment_type_code,treatment_amount]|list each breed and its number of dogs.|table
easy gold: SELECT avg(Attendance) FROM SHOW
neval_err_num:824
easy pred: how much does the most expensive treatment cost?||how much does the most expensive treatment cost?||how much does the most expensive treatment cost?||how much does the most expensive treatment cost?||how much does the most expensive treatment cost?||how much does the most expensive treatment cost
easy gold: SELECT avg(Attendance) FROM SHOW
neval_err_num:825
medium pred: what is the charge amount of the most expensive charge type?||what is the charge amount of the most expensive charge type?||what is the charge amount of the most expensive charge type?||what is the charge amount of the most expensive charge type?||what is the charge amount of the most
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:826
medium pred: list the email, cell phone and home phone of all the owners.|list the email, cell phone and home phone of all the owners.|list the email, cell phone and home phone of all the owners.|list the email, cell phone and home phone of all the owners.|list the email,
medium gold: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != "Live final"
neval_err_num:827
easy pred: what are the email, cell phone and home phone of each owner?||table||table||table||table||table||table||table||table||table||table||table||table||table|
easy gold: SELECT count(DISTINCT Nationality) FROM conductor
neval_err_num:828
easy pred: |breed_code|breed_name||:---|:---||A|Labrador Retriever||B|German Shepherd||C|Poodle||D|Chihuahua||E|Beagle||F|Cocker Spaniel|
easy gold: SELECT count(DISTINCT Nationality) FROM conductor
neval_err_num:829
easy pred: ||||||||||||||||||||||||||||||||||
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
neval_err_num:830
easy pred: list the first name of all the professionals along with the description of the treatment they have done.|list the first name of all the professionals along with the description of the treatment they have done.|list the first name of all the professionals along with the description of the treatment they have done.|list the first name of
easy gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC
neval_err_num:831
medium pred: |what are the names of the dogs that have been adopted?||what are the names of the dogs that have been abandoned?||what are the names of the dogs that have been euthanized?||what are the names of the dogs that have been treated?||what are the names
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
neval_err_num:832
medium pred: | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
medium gold: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1
neval_err_num:833
medium pred: what is the count of songs?||singer|singer_id|name|birth_year|net_worth_millions|citizenship||---|---|---|---|---|---||1|1|John|1970|0|US||2|
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
neval_err_num:834
medium pred: table singers, columns = [*,singer_id,name,net_worth_millions]|singer_name, net_worth_millions ||-----------------------------||John Lennon, $1.5 billion ||Michael Jackson, $1.2 billion
medium gold: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID
neval_err_num:835
medium pred: select * from singerwhere singer.singer_id = 1and singer.name = 'Elvis Presley'and singer.birth_year = 1935and singer.citizenship = 'American'select * from songwhere song
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
neval_err_num:836
medium pred: select * from singer;select * from song;select * from singer;select * from song;select * from singer;select * from song;select * from singer;select * from song;select * from singer;
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1
neval_err_num:837
extra pred: table singers, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]table songs, columns = [*,song_id,title,singer_id,sales,highest_position]foreign_keys = [singer
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:838
extra pred: show the name of songs whose title is "The Sound of Silence" and whose sales are greater than 1000000?|
extra gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:839
medium pred: what is the name of the song that has sold the most?|
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
neval_err_num:840
medium pred: select * from singerswhere citizenship = 'American'order by citizenship, nameselect * from singerswhere citizenship = 'British'order by citizenship, nameselect * from singerswhere citizenship = 'Canadian'order by citizenship, name
medium gold: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008
neval_err_num:841
medium pred: for each country, how many singers are from that country?||||||||||||||||||||||||||||
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
neval_err_num:842
medium pred: select * from songwhere singer.citizenship = 'American'order by net_worth_millions desclimit 10;select * from songwhere singer.citizenship = 'British'order by net_worth_millions desclimit
medium gold: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company
neval_err_num:843
medium pred: for each song, what is the maximum net worth?|
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:844
medium pred: select * from titlesselect * from singersselect * from titles where singer_id = 1select * from titles where singer_id = 2select * from titles where singer_id = 3select * from titles where singer_id =
medium gold: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC
neval_err_num:845
hard pred: select * from songwhere title = 'I'm Yours'and singer_id = 1select * from songwhere title = 'I'm Yours'and singer_id = 2select * from songwhere title =
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:846
hard pred: select * from singerswhere singer.singer_id in (select singer_id from songs)order by singer.nameselect * from songswhere song.singer_id in (select singer_id from singers)order by song.titleselect * from
hard gold: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1
neval_err_num:847
hard pred: select * from singersselect * from songsselect * from singersselect * from songsselect * from singersselect * from songsselect * from singersselect * from songsselect * from singersselect * from songsselect
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:848
hard pred: for each song title, what is the total sales for their songs?|
hard gold: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)
neval_err_num:849
hard pred: table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]table song, columns = [*,song_id,title,singer_id,sales,highest_position]foreign_keys = [singer
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
neval_err_num:850
hard pred: show the citizenship shared by songs with sales before 1945 and after 1955.
hard gold: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003
neval_err_num:851
medium pred: how many available features are there in total?||how many available features are there in total?||how many available features are there in total?||how many available features are there in total?||how many available features are there in total?||how many available features are there in total
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
neval_err_num:852
medium pred: what is the feature type name of feature balcony?||what is the feature type name of feature balcony?||what is the feature type name of feature balcony?||what is the feature type name of feature balcony?||what is the feature type name of feature balcony?||what is the
medium gold: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  "CD" OR Major_Record_Format  =  "DVD"
neval_err_num:853
medium pred: show the property type descriptions of properties belonging to that code.||||||||||||||||||||||||||||
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
neval_err_num:854
medium pred: what are the names of properties that are either houses or apartments with more than 1 room?||table other_available_features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]||table other_property_features, columns = [
medium gold: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1
nn                    easy                 medium               hard                 extra                all                 
count                219                  368                  141                  134                  862                 
=====================   EXECUTION ACCURACY     =====================
execution            0.000                0.000                0.000                0.000                0.000               
====================== EXACT MATCHING ACCURACY =====================
exact match          0.000                0.000                0.000                0.000                0.000               

---------------------PARTIAL MATCHING ACCURACY----------------------
select               0.000                0.000                0.000                0.000                0.000               
select(no AGG)       0.667                0.400                0.000                0.000                0.500               
where                0.000                0.000                0.000                0.000                0.000               
where(no OP)         0.000                0.000                0.000                0.000                0.000               
group(no Having)     0.000                0.000                0.000                0.000                0.000               
group                0.000                0.000                0.000                0.000                0.000               
order                0.000                0.000                0.000                0.000                0.000               
and/or               1.000                0.893                0.872                0.851                0.910               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             1.000                0.600                0.000                0.000                0.750               
---------------------- PARTIAL MATCHING RECALL ----------------------
select               0.000                0.000                0.000                0.000                0.000               
select(no AGG)       0.009                0.005                0.000                0.000                0.005               
where                0.000                0.000                0.000                0.000                0.000               
where(no OP)         0.000                0.000                0.000                0.000                0.000               
group(no Having)     0.000                0.000                0.000                0.000                0.000               
group                0.000                0.000                0.000                0.000                0.000               
order                0.000                0.000                0.000                0.000                0.000               
and/or               0.995                0.994                1.000                1.000                0.996               
IUEN                 0.000                0.000                0.000                0.000                0.000               
keywords             0.022                0.009                0.000                0.000                0.008               
---------------------- PARTIAL MATCHING F1 --------------------------
select               1.000                1.000                1.000                1.000                1.000               
select(no AGG)       0.018                0.011                1.000                1.000                0.009               
where                1.000                1.000                1.000                1.000                1.000               
where(no OP)         1.000                1.000                1.000                1.000                1.000               
group(no Having)     1.000                1.000                1.000                1.000                1.000               
group                1.000                1.000                1.000                1.000                1.000               
order                1.000                1.000                1.000                1.000                1.000               
and/or               0.998                0.941                0.932                0.919                0.951               
IUEN                 1.000                1.000                1.000                1.000                1.000               
keywords             0.043                0.018                1.000                1.000                0.016               
