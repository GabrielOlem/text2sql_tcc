{"a":[{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>how many singers do we have?<|endoftext|><|sql|>select count(*) from singer;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the total number of singers?<|endoftext|><|sql|>select count(*) from singer;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show name, country, age for all singers ordered by age from the oldest to the youngest.<|endoftext|><|sql|>select name ,  country ,  age from singer order by age desc;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names, countries, and ages for every singer in descending order of age?<|endoftext|><|sql|>select name ,  country ,  age from singer order by age desc;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the average, minimum, and maximum age of all singers from france?<|endoftext|><|sql|>select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france';<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the average, minimum, and maximum age for all french singers?<|endoftext|><|sql|>select avg(age) ,  min(age) ,  max(age) from singer where country  =  'france';<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show the name and the release year of the song by the youngest singer.<|endoftext|><|sql|>select song_name ,  song_release_year from singer order by age limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names and release years for all the songs of the youngest singer?<|endoftext|><|sql|>select song_name ,  song_release_year from singer order by age limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are all distinct countries where singers above age 20 are from?<|endoftext|><|sql|>select distinct country from singer where age  >  20;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are  the different countries with singers above age 20?<|endoftext|><|sql|>select distinct country from singer where age  >  20;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show all countries and the number of singers in each country.<|endoftext|><|sql|>select country ,  count(*) from singer group by country;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>how many singers are from each country?<|endoftext|><|sql|>select country ,  count(*) from singer group by country;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>list all song names by singers above the average age.<|endoftext|><|sql|>select song_name from singer where age  >  (select avg(age) from singer);<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are all the song names by singers who are older than average?<|endoftext|><|sql|>select song_name from singer where age  >  (select avg(age) from singer);<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show location and name for all stadiums with a capacity between 5000 and 10000.<|endoftext|><|sql|>select location ,  name from stadium where capacity between 5000 and 10000;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the locations and names of all stations with capacity between 5000 and 10000?<|endoftext|><|sql|>select location ,  name from stadium where capacity between 5000 and 10000;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the maximum capacity and the average of all stadiums ?<|endoftext|><|sql|>select max(capacity), average from stadium;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the average and maximum capacities for all stadiums ?<|endoftext|><|sql|>select avg(capacity) ,  max(capacity) from stadium;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the name and capacity for the stadium with highest average attendance?<|endoftext|><|sql|>select name ,  capacity from stadium order by average desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the name and capacity for the stadium with the highest average attendance?<|endoftext|><|sql|>select name ,  capacity from stadium order by average desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>how many concerts are there in year 2014 or 2015?<|endoftext|><|sql|>select count(*) from concert where year  =  2014 or year  =  2015;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>how many concerts occurred in 2014 or 2015?<|endoftext|><|sql|>select count(*) from concert where year  =  2014 or year  =  2015;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show the stadium name and the number of concerts in each stadium.<|endoftext|><|sql|>select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>for each stadium, how many concerts play there?<|endoftext|><|sql|>select t2.name ,  count(*) from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id group by t1.stadium_id;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show the stadium name and capacity with most number of concerts in year 2014 or after.<|endoftext|><|sql|>select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >=  2014 group by t2.stadium_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the name and capacity of the stadium with the most concerts after 2013 ?<|endoftext|><|sql|>select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>which year has most number of concerts?<|endoftext|><|sql|>select year from concert group by year order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the year that had the most concerts?<|endoftext|><|sql|>select year from concert group by year order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show the stadium names without any concert.<|endoftext|><|sql|>select name from stadium where stadium_id not in (select stadium_id from concert);<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names of the stadiums without any concerts?<|endoftext|><|sql|>select name from stadium where stadium_id not in (select stadium_id from concert);<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show countries where a singer above age 40 and a singer below 30 are from.<|endoftext|><|sql|>select country from singer where age  >  40 intersect select country from singer where age  <  30;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show names for all stadiums except for stadiums having a concert in year 2014.<|endoftext|><|sql|>select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names of all stadiums that did not have a concert in 2014?<|endoftext|><|sql|>select name from stadium except select t2.name from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>show the name and theme for all concerts and the number of singers in each concert.<|endoftext|><|sql|>select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names , themes , and number of singers for every concert ?<|endoftext|><|sql|>select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>list singer names and number of concerts for each singer.<|endoftext|><|sql|>select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names of the singers and number of concerts for each person?<|endoftext|><|sql|>select t2.name ,  count(*) from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id group by t2.singer_id;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>list all singer names in concerts in year 2014.<|endoftext|><|sql|>select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names of the singers who performed in a concert in 2014?<|endoftext|><|sql|>select t2.name from singer_in_concert as t1 join singer as t2 on t1.singer_id  =  t2.singer_id join concert as t3 on t1.concert_id  =  t3.concert_id where t3.year  =  2014;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the name and nation of the singer who have a song having 'hey' in its name?<|endoftext|><|sql|>select name ,  country from singer where song_name like '%hey%';<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what is the name and country of origin of every singer who has a song with the word 'hey' in its title?<|endoftext|><|sql|>select name ,  country from singer where song_name like '%hey%';<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.<|endoftext|><|sql|>select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?<|endoftext|><|sql|>select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2014 intersect select t2.name ,  t2.location from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  =  2015;<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>find the number of concerts happened in the stadium with the highest capacity .<|endoftext|><|sql|>select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);<|endoftext|>"},
{"input_text":"<|schema|>table concert, columns = [*,concert_id,concert_name,theme,stadium_id,year]\ntable singer, columns = [*,singer_id,name,country,song_name,song_release_year,age,is_male]\ntable singer_in_concert, columns = [*,concert_id,singer_id]\ntable stadium, columns = [*,stadium_id,location,name,capacity,highest,lowest,average]\nforeign_keys = [stadium.stadium_id,singer.singer_id,concert.concert_id,singer_in_concert.concert_id,singer_in_concert.singer_id]\n\nprimary_keys = [concert.stadium_id = stadium.stadium_id,singer_in_concert.singer_id = singer.singer_id,singer_in_concert.concert_id = concert.concert_id]<|endoftext|><|query|>what are the number of concerts that occurred in the stadium with the largest capacity ?<|endoftext|><|sql|>select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1);<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the number of pets whose weight is heavier than 10.<|endoftext|><|sql|>select count(*) from pets where weight  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>how many pets have a greater weight than 10?<|endoftext|><|sql|>select count(*) from pets where weight  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the weight of the youngest dog.<|endoftext|><|sql|>select weight from pets order by pet_age limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>how much does the youngest dog weigh?<|endoftext|><|sql|>select weight from pets order by pet_age limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the maximum weight for each type of pet. list the maximum weight and pet type.<|endoftext|><|sql|>select max(weight) ,  pettype from pets group by pettype;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>list the maximum weight and type for each type of pet.<|endoftext|><|sql|>select max(weight) ,  pettype from pets group by pettype;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find number of pets owned by students who are older than 20.<|endoftext|><|sql|>select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>how many pets are owned by students that have an age greater than 20?<|endoftext|><|sql|>select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.age  >  20;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the number of dog pets that are raised by female students (with sex f).<|endoftext|><|sql|>select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>how many dog pets are raised by female students?<|endoftext|><|sql|>select count(*) from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t2.petid  =  t3.petid where t1.sex  =  'f' and t3.pettype  =  'dog';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the number of distinct type of pets.<|endoftext|><|sql|>select count(distinct pettype) from pets;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>how many different types of pet are there?<|endoftext|><|sql|>select count(distinct pettype) from pets;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the first name of students who have cat or dog pet.<|endoftext|><|sql|>select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what are the first names of every student who has a cat or dog as a pet?<|endoftext|><|sql|>select distinct t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' or t3.pettype  =  'dog';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the first name of students who have both cat and dog pets .<|endoftext|><|sql|>select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what are the students' first names who have both cats and dogs as pets?<|endoftext|><|sql|>select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the major and age of students who do not have a cat pet.<|endoftext|><|sql|>select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat');<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what major is every student who does not own a cat as a pet, and also how old are they?<|endoftext|><|sql|>select major ,  age from student where stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat');<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the id of students who do not have a cat pet.<|endoftext|><|sql|>select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what are the ids of the students who do not own cats as pets?<|endoftext|><|sql|>select stuid from student except select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the first name and age of students who have a dog but do not have a cat as a pet.<|endoftext|><|sql|>select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat');<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the first name of every student who has a dog but does not have a cat?<|endoftext|><|sql|>select t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog' and t1.stuid not in (select t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat');<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the type and weight of the youngest pet.<|endoftext|><|sql|>select pettype ,  weight from pets order by pet_age limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what type of pet is the youngest animal, and how much does it weigh?<|endoftext|><|sql|>select pettype ,  weight from pets order by pet_age limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the id and weight of all pets whose age is older than 1.<|endoftext|><|sql|>select petid ,  weight from pets where pet_age  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the id and weight of every pet who is older than 1?<|endoftext|><|sql|>select petid ,  weight from pets where pet_age  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the average and maximum age for each type of pet.<|endoftext|><|sql|>select avg(pet_age) ,  max(pet_age) ,  pettype from pets group by pettype;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the average and maximum age for each pet type?<|endoftext|><|sql|>select avg(pet_age) ,  max(pet_age) ,  pettype from pets group by pettype;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the average weight for each pet type.<|endoftext|><|sql|>select avg(weight) ,  pettype from pets group by pettype;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the average weight for each type of pet?<|endoftext|><|sql|>select avg(weight) ,  pettype from pets group by pettype;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the first name and age of students who have a pet.<|endoftext|><|sql|>select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what are the different first names and ages of the students who do have pets?<|endoftext|><|sql|>select distinct t1.fname ,  t1.age from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the id of the pet owned by student whose last name is \u2018smith\u2019.<|endoftext|><|sql|>select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the id of the pet owned by the student whose last name is 'smith'?<|endoftext|><|sql|>select t2.petid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid where t1.lname  =  'smith';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the number of pets for each student who has any pet and student id.<|endoftext|><|sql|>select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>for students who have pets , how many pets does each student have ? list their ids instead of names .<|endoftext|><|sql|>select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the first name and gender of student who have more than one pet.<|endoftext|><|sql|>select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the first name and gender of the all the students who have more than one pet?<|endoftext|><|sql|>select t1.fname ,  t1.sex from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the last name of the student who has a cat that is age 3.<|endoftext|><|sql|>select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the last name of the student who has a cat that is 3 years old?<|endoftext|><|sql|>select t1.lname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pet_age  =  3 and t3.pettype  =  'cat';<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>find the average age of students who do not have any pet .<|endoftext|><|sql|>select avg(age) from student where stuid not in (select stuid from has_pet);<|endoftext|>"},
{"input_text":"<|schema|>table has_pet, columns = [*,stuid,petid]\ntable pets, columns = [*,petid,pettype,pet_age,weight]\ntable student, columns = [*,stuid,lname,fname,age,sex,major,advisor,city_code]\nforeign_keys = [student.stuid,pets.petid]\n\nprimary_keys = [has_pet.stuid = student.stuid,has_pet.petid = pets.petid]<|endoftext|><|query|>what is the average age for all students who do not own any pets ?<|endoftext|><|sql|>select avg(age) from student where stuid not in (select stuid from has_pet);<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many continents are there?<|endoftext|><|sql|>select count(*) from continents;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of continents?<|endoftext|><|sql|>select count(*) from continents;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many countries does each continent have? list the continent id, continent name and the number of countries.<|endoftext|><|sql|>select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>for each continent, list its id, name, and how many countries it has?<|endoftext|><|sql|>select t1.contid ,  t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent group by t1.contid;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many countries are listed?<|endoftext|><|sql|>select count(*) from countries;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many countries exist?<|endoftext|><|sql|>select count(*) from countries;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many models does each car maker produce? list maker full name, id and the number.<|endoftext|><|sql|>select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the full name of each car maker, along with its id and how many models it produces?<|endoftext|><|sql|>select t1.fullname ,  t1.id ,  count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which model of the car has the minimum horsepower?<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the model of the car with the smallest amount of horsepower?<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.horsepower asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>find the model of the car whose weight is below the average weight.<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data);<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the model for the car with a weight smaller than the average?<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.weight  <  (select avg(weight) from cars_data);<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>find the name of the makers that produced some cars in the year of 1970?<|endoftext|><|sql|>select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the name of the different car makers who produced a car in 1970?<|endoftext|><|sql|>select distinct t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model join cars_data as t4 on t3.makeid  =  t4.id where t4.year  =  '1970';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>find the make and production time of the cars that were produced in the earliest year?<|endoftext|><|sql|>select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the maker of the carr produced in the earliest year and what year was it?<|endoftext|><|sql|>select t2.make ,  t1.year from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.year  =  (select min(year) from cars_data);<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which distinct car models are the produced after 1980?<|endoftext|><|sql|>select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the different models for the cards produced after 1980?<|endoftext|><|sql|>select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id where t3.year  >  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many car makers are there in each continents? list the continent name and the count.<|endoftext|><|sql|>select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the name of each continent and how many car makers are there in each one?<|endoftext|><|sql|>select t1.continent ,  count(*) from continents as t1 join countries as t2 on t1.contid  =  t2.continent join car_makers as t3 on t2.countryid  =  t3.country group by t1.continent;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which of the countries has the most car makers? list the country name.<|endoftext|><|sql|>select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the name of the country with the most car makers?<|endoftext|><|sql|>select t2.countryname from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid group by t1.country order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many car models are produced by each maker ? only list the count and the maker full name .<|endoftext|><|sql|>select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of car models that are produced by each maker and what is the id and full name of each maker?<|endoftext|><|sql|>select count(*) ,  t2.fullname ,  t2.id from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the accelerate of the car make amc hornet sportabout (sw)?<|endoftext|><|sql|>select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how much does the car accelerate that makes amc hornet sportabout (sw)?<|endoftext|><|sql|>select t1.accelerate from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.make  =  'amc hornet sportabout (sw)';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many car makers are there in france?<|endoftext|><|sql|>select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of makers of care in france?<|endoftext|><|sql|>select count(*) from car_makers as t1 join countries as t2 on t1.country  =  t2.countryid where t2.countryname  =  'france';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many car models are produced in the usa?<|endoftext|><|sql|>select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the count of the car models produced in the united states?<|endoftext|><|sql|>select count(*) from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id join countries as t3 on t2.country  =  t3.countryid where t3.countryname  =  'usa';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average miles per gallon(mpg) of the cars with 4 cylinders?<|endoftext|><|sql|>select avg(mpg) from cars_data where cylinders  =  4;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average miles per gallon of all the cards with 4 cylinders?<|endoftext|><|sql|>select avg(mpg) from cars_data where cylinders  =  4;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the smallest weight of the car produced with 8 cylinders on 1974 ?<|endoftext|><|sql|>select min(weight) from cars_data where cylinders  =  8 and year  =  1974;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the minimum weight of the car with 8 cylinders produced in 1974 ?<|endoftext|><|sql|>select min(weight) from cars_data where cylinders  =  8 and year  =  1974;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are all the makers and models?<|endoftext|><|sql|>select maker ,  model from model_list;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the makers and models?<|endoftext|><|sql|>select maker ,  model from model_list;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the countries having at least one car maker? list name and id.<|endoftext|><|sql|>select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the names and ids of all countries with at least one car maker?<|endoftext|><|sql|>select t1.countryname ,  t1.countryid from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >=  1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of the cars with horsepower more than 150?<|endoftext|><|sql|>select count(*) from cars_data where horsepower  >  150;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of cars with a horsepower greater than 150?<|endoftext|><|sql|>select count(*) from cars_data where horsepower  >  150;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average weight of cars each year?<|endoftext|><|sql|>select avg(weight) ,  year from cars_data group by year;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average weight and year for each year?<|endoftext|><|sql|>select avg(weight) ,  year from cars_data group by year;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which countries in europe have at least 3 car manufacturers?<|endoftext|><|sql|>select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the names of all european countries with at least 3 manufacturers?<|endoftext|><|sql|>select t1.countryname from countries as t1 join continents as t2 on t1.continent  =  t2.contid join car_makers as t3 on t1.countryid  =  t3.country where t2.continent  =  'europe' group by t1.countryname having count(*)  >=  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the maximum horsepower and the make of the car models with 3 cylinders?<|endoftext|><|sql|>select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the largest amount of horsepower for the models with 3 cylinders and what make is it?<|endoftext|><|sql|>select t2.horsepower ,  t1.make from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  3 order by t2.horsepower desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which model saves the most gasoline? that is to say, have the maximum miles per gallon.<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the car model with the highest mpg ?<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average horsepower of the cars before 1980?<|endoftext|><|sql|>select avg(horsepower) from cars_data where year  <  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average horsepower for all cars produced before 1980 ?<|endoftext|><|sql|>select avg(horsepower) from cars_data where year  <  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average edispl of the cars of model volvo?<|endoftext|><|sql|>select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the average edispl for all volvos?<|endoftext|><|sql|>select avg(t2.edispl) from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t1.model  =  'volvo';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the maximum accelerate for different number of cylinders?<|endoftext|><|sql|>select max(accelerate) ,  cylinders from cars_data group by cylinders;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the maximum accelerate for all the different cylinders?<|endoftext|><|sql|>select max(accelerate) ,  cylinders from cars_data group by cylinders;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which model has the most version(make) of cars?<|endoftext|><|sql|>select model from car_names group by model order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what model has the most different versions?<|endoftext|><|sql|>select model from car_names group by model order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many cars have more than 4 cylinders?<|endoftext|><|sql|>select count(*) from cars_data where cylinders  >  4;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of cars with more than 4 cylinders?<|endoftext|><|sql|>select count(*) from cars_data where cylinders  >  4;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many cars were produced in 1980?<|endoftext|><|sql|>select count(*) from cars_data where year  =  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>in 1980, how many cars were made?<|endoftext|><|sql|>select count(*) from cars_data where year  =  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many car models were produced by the maker with full name american motor company?<|endoftext|><|sql|>select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of car models created by the car maker american motor company?<|endoftext|><|sql|>select count(*) from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker where t1.fullname  =  'american motor company';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which makers designed more than 3 car models? list full name and the id.<|endoftext|><|sql|>select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the names and ids of all makers with more than 3 models?<|endoftext|><|sql|>select t1.fullname ,  t1.id from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which distinctive models are produced by maker with the full name general motors or weighing more than 3500?<|endoftext|><|sql|>select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the different models created by either the car maker general motors or weighed more than 3500?<|endoftext|><|sql|>select distinct t2.model from car_names as t1 join model_list as t2 on t1.model  =  t2.model join car_makers as t3 on t2.maker  =  t3.id join cars_data as t4 on t1.makeid  =  t4.id where t3.fullname  =  'general motors' or t4.weight  >  3500;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>in which years cars were produced weighing no less than 3000 and no more than 4000 ?<|endoftext|><|sql|>select distinct year from cars_data where weight between 3000 and 4000;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?<|endoftext|><|sql|>select distinct year from cars_data where weight between 3000 and 4000;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the horsepower of the car with the largest accelerate?<|endoftext|><|sql|>select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the horsepower of the car with the greatest accelerate?<|endoftext|><|sql|>select t1.horsepower from cars_data as t1 order by t1.accelerate desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>for model volvo, how many cylinders does the car with the least accelerate have?<|endoftext|><|sql|>select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>for a volvo model, how many cylinders does the version with least accelerate have?<|endoftext|><|sql|>select t1.cylinders from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t2.model  =  'volvo' order by t1.accelerate asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many cars have a larger accelerate than the car with the largest horsepower?<|endoftext|><|sql|>select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of cars with a greater accelerate than the one with the most horsepower?<|endoftext|><|sql|>select count(*) from cars_data where accelerate  >  ( select accelerate from cars_data order by horsepower desc limit 1 );<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many countries has more than 2 car makers ?<|endoftext|><|sql|>select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of countries with more than 2 car makers ?<|endoftext|><|sql|>select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>how many cars has over 6 cylinders?<|endoftext|><|sql|>select count(*) from cars_data where cylinders  >  6;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the number of carsw ith over 6 cylinders?<|endoftext|><|sql|>select count(*) from cars_data where cylinders  >  6;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>for the cars with 4 cylinders, which model has the largest horsepower?<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>for all of the 4 cylinder cars, which model has the most horsepower?<|endoftext|><|sql|>select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id where t2.cylinders  =  4 order by t2.horsepower desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? list the car makeid and make name.<|endoftext|><|sql|>select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <=  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?<|endoftext|><|sql|>select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?<|endoftext|><|sql|>select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?<|endoftext|><|sql|>select max(mpg) from cars_data where cylinders  =  8 or year  <  1980;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which models are lighter than 3500 but not built by the 'ford motor company'?<|endoftext|><|sql|>select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the different models wthat are lighter than 3500 but were not built by the ford motor company?<|endoftext|><|sql|>select distinct t1.model from model_list as t1 join car_names as t2 on t1.model  =  t2.model join cars_data as t3 on t2.makeid  =  t3.id join car_makers as t4 on t1.maker  =  t4.id where t3.weight  <  3500 and t4.fullname != 'ford motor company';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the name of the countries where there is not a single car maker?<|endoftext|><|sql|>select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the names of the countries with no car makers?<|endoftext|><|sql|>select countryname from countries except select t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>which are the car makers which produce at least 2 models and more than 3 car makers ? list the id and the maker .<|endoftext|><|sql|>select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?<|endoftext|><|sql|>select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?<|endoftext|><|sql|>select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';<|endoftext|>"},
{"input_text":"<|schema|>table car_makers, columns = [*,id,maker,fullname,country]\ntable car_names, columns = [*,makeid,model,make]\ntable cars_data, columns = [*,id,mpg,cylinders,edispl,horsepower,weight,accelerate,year]\ntable continents, columns = [*,contid,continent]\ntable countries, columns = [*,countryid,countryname,continent]\ntable model_list, columns = [*,modelid,maker,model]\nforeign_keys = [continents.contid,countries.countryid,car_makers.id,model_list.modelid,car_names.makeid,cars_data.id]\n\nprimary_keys = [countries.continent = continents.contid,car_makers.country = countries.countryid,model_list.maker = car_makers.id,car_names.model = model_list.model,cars_data.id = car_names.makeid]<|endoftext|><|query|>what are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?<|endoftext|><|sql|>select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which country does airline \"jetblue airways\" belong to?<|endoftext|><|sql|>select country from airlines where airline  =  \"jetblue airways\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what country is jetblue airways affiliated with?<|endoftext|><|sql|>select country from airlines where airline  =  \"jetblue airways\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the abbreviation of airline \"jetblue airways\"?<|endoftext|><|sql|>select abbreviation from airlines where airline  =  \"jetblue airways\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which abbreviation corresponds to jetblue airways?<|endoftext|><|sql|>select abbreviation from airlines where airline  =  \"jetblue airways\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>list all airline names and their abbreviations in \"usa\".<|endoftext|><|sql|>select airline ,  abbreviation from airlines where country  =  \"usa\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are the airline names and abbreviations for airlines in the usa?<|endoftext|><|sql|>select airline ,  abbreviation from airlines where country  =  \"usa\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>list the airport code and name in the city of anthony.<|endoftext|><|sql|>select airportcode ,  airportname from airports where city  =  \"anthony\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the airport code and airport name corresonding to the city anthony.<|endoftext|><|sql|>select airportcode ,  airportname from airports where city  =  \"anthony\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many airlines do we have?<|endoftext|><|sql|>select count(*) from airlines;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the total number of airlines?<|endoftext|><|sql|>select count(*) from airlines;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many airports do we have?<|endoftext|><|sql|>select count(*) from airports;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the number of  airports.<|endoftext|><|sql|>select count(*) from airports;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights do we have?<|endoftext|><|sql|>select count(*) from flights;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the number of flights.<|endoftext|><|sql|>select count(*) from flights;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airline has abbreviation 'ual'?<|endoftext|><|sql|>select airline from airlines where abbreviation  =  \"ual\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the airline with abbreviation 'ual'.<|endoftext|><|sql|>select airline from airlines where abbreviation  =  \"ual\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many airlines are from usa?<|endoftext|><|sql|>select count(*) from airlines where country  =  \"usa\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the number of airlines in the usa.<|endoftext|><|sql|>select count(*) from airlines where country  =  \"usa\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which city and country is the alton airport at?<|endoftext|><|sql|>select city ,  country from airports where airportname  =  \"alton\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the city and country for the alton airport.<|endoftext|><|sql|>select city ,  country from airports where airportname  =  \"alton\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the airport name for airport 'ako'?<|endoftext|><|sql|>select airportname from airports where airportcode  =  \"ako\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the name of the airport with code 'ako'.<|endoftext|><|sql|>select airportname from airports where airportcode  =  \"ako\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are airport names at city 'aberdeen'?<|endoftext|><|sql|>select airportname from airports where city = \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are the names of airports in aberdeen?<|endoftext|><|sql|>select airportname from airports where city = \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights depart from 'apg'?<|endoftext|><|sql|>select count(*) from flights where sourceairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>count the number of flights departing from 'apg'.<|endoftext|><|sql|>select count(*) from flights where sourceairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights have destination ato?<|endoftext|><|sql|>select count(*) from flights where destairport  =  \"ato\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>count the number of flights into ato.<|endoftext|><|sql|>select count(*) from flights where destairport  =  \"ato\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights depart from city aberdeen?<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the number of flights departing from aberdeen.<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.sourceairport  =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights arriving in aberdeen city?<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the number of flights arriving in aberdeen.<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights depart from city 'aberdeen' and have destination city 'ashley'?<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights fly from aberdeen to ashley?<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airports as t3 on t1.sourceairport  =  t3.airportcode where t2.city  =  \"ashley\" and t3.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights does airline 'jetblue airways' have?<|endoftext|><|sql|>select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the number of jetblue airways flights.<|endoftext|><|sql|>select count(*) from flights as t1 join airlines as t2 on t1.airline  =  t2.uid where t2.airline = \"jetblue airways\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many 'united airlines' flights go to airport 'asy'?<|endoftext|><|sql|>select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>count the number of united airlines flights arriving in asy airport.<|endoftext|><|sql|>select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.destairport  =  \"asy\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many 'united airlines' flights depart from airport 'ahd'?<|endoftext|><|sql|>select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>return the number of united airlines flights leaving from ahd airport.<|endoftext|><|sql|>select count(*) from airlines as t1 join flights as t2 on t2.airline  =  t1.uid where t1.airline  =  \"united airlines\" and t2.sourceairport  =  \"ahd\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many united airlines flights go to city 'aberdeen'?<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>count the number of united airlines flights that arrive in aberdeen.<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode join airlines as t3 on t3.uid  =  t1.airline where t2.city  =  \"aberdeen\" and t3.airline  =  \"united airlines\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which city has most number of arriving flights?<|endoftext|><|sql|>select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which city has the most frequent destination airport?<|endoftext|><|sql|>select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport group by t1.city order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which city has most number of departing flights?<|endoftext|><|sql|>select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which city is the most frequent source airport?<|endoftext|><|sql|>select t1.city from airports as t1 join flights as t2 on t1.airportcode  =  t2.sourceairport group by t1.city order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the code of airport that has the highest number of flights?<|endoftext|><|sql|>select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the airport code of the airport with the most flights?<|endoftext|><|sql|>select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the code of airport that has fewest number of flights?<|endoftext|><|sql|>select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the code of the airport with the least flights.<|endoftext|><|sql|>select t1.airportcode from airports as t1 join flights as t2 on t1.airportcode  =  t2.destairport or t1.airportcode  =  t2.sourceairport group by t1.airportcode order by count(*) limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airline has most number of flights?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what airline serves the most flights?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find the abbreviation and country of the airline that has fewest number of flights?<|endoftext|><|sql|>select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what is the abbreviation of the airilne has the fewest flights and what country is it in?<|endoftext|><|sql|>select t1.abbreviation ,  t1.country from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline order by count(*) limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are airlines that have some flight departing from airport 'ahd'?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airlines have a flight with source airport ahd?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"ahd\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are airlines that have flights arriving at airport 'ahd'?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airlines have a flight with destination airport ahd?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.destairport  =  \"ahd\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find all airlines that have flights from both airports 'apg' and 'cvo'.<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airlines have departing flights from both apg and cvo airports?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\" intersect select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find all airlines that have flights from airport 'cvo' but not from 'apg'.<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airlines have departures from cvo but not from apg airports?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"cvo\" except select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline where t2.sourceairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find all airlines that have at least 10 flights.<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airlines have at least 10 flights?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find all airlines that have fewer than 200 flights.<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airlines have less than 200 flights?<|endoftext|><|sql|>select t1.airline from airlines as t1 join flights as t2 on t1.uid  =  t2.airline group by t1.airline having count(*)  <  200;<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are flight numbers of airline \"united airlines\"?<|endoftext|><|sql|>select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which flight numbers correspond to united airlines flights?<|endoftext|><|sql|>select t1.flightno from flights as t1 join airlines as t2 on t2.uid  =  t1.airline where t2.airline  =  \"united airlines\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are flight numbers of flights departing from airport \"apg\"?<|endoftext|><|sql|>select flightno from flights where sourceairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the flight numbers of flights leaving from apg.<|endoftext|><|sql|>select flightno from flights where sourceairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are flight numbers of flights arriving at airport \"apg\"?<|endoftext|><|sql|>select flightno from flights where destairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the flight numbers of flights landing at apg.<|endoftext|><|sql|>select flightno from flights where destairport  =  \"apg\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are flight numbers of flights departing from city \"aberdeen \"?<|endoftext|><|sql|>select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the flight numbers of flights leaving from aberdeen.<|endoftext|><|sql|>select t1.flightno from flights as t1 join airports as t2 on t1.sourceairport   =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>what are flight numbers of flights arriving at city \"aberdeen\"?<|endoftext|><|sql|>select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>give the flight numbers of flights arriving in aberdeen.<|endoftext|><|sql|>select t1.flightno from flights as t1 join airports as t2 on t1.destairport   =  t2.airportcode where t2.city  =  \"aberdeen\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find the number of flights landing in the city of aberdeen or abilene.<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>how many flights land in aberdeen or abilene?<|endoftext|><|sql|>select count(*) from flights as t1 join airports as t2 on t1.destairport  =  t2.airportcode where t2.city  =  \"aberdeen\" or t2.city  =  \"abilene\";<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>find the name of airports which do not have any flight in and out.<|endoftext|><|sql|>select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights);<|endoftext|>"},
{"input_text":"<|schema|>table airlines, columns = [*,uid,airline,abbreviation,country]\ntable airports, columns = [*,city,airportcode,airportname,country,countryabbrev]\ntable flights, columns = [*,airline,flightno,sourceairport,destairport]\nforeign_keys = [airlines.uid,airports.airportcode,flights.airline]\n\nprimary_keys = [flights.destairport = airports.airportcode,flights.sourceairport = airports.airportcode]<|endoftext|><|query|>which airports do not have departing or arriving flights?<|endoftext|><|sql|>select airportname from airports where airportcode not in (select sourceairport from flights union select destairport from flights);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>how many employees are there?<|endoftext|><|sql|>select count(*) from employee;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>count the number of employees<|endoftext|><|sql|>select count(*) from employee;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>sort employee names by their age in ascending order.<|endoftext|><|sql|>select name from employee order by age;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>list the names of employees and sort in ascending order of age.<|endoftext|><|sql|>select name from employee order by age;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what is the number of employees from each city?<|endoftext|><|sql|>select count(*) ,  city from employee group by city;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>count the number of employees for each city.<|endoftext|><|sql|>select count(*) ,  city from employee group by city;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which cities do more than one employee under age 30 come from?<|endoftext|><|sql|>select city from employee where age  <  30 group by city having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the cities that have more than one employee under age 30.<|endoftext|><|sql|>select city from employee where age  <  30 group by city having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the number of shops in each location.<|endoftext|><|sql|>select count(*) ,  location from shop group by location;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>how many shops are there in each location?<|endoftext|><|sql|>select count(*) ,  location from shop group by location;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the manager name and district of the shop whose number of products is the largest.<|endoftext|><|sql|>select manager_name ,  district from shop order by number_products desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what are the manager name and district of the shop that sells the largest number of products?<|endoftext|><|sql|>select manager_name ,  district from shop order by number_products desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the minimum and maximum number of products of all stores.<|endoftext|><|sql|>select min(number_products) ,  max(number_products) from shop;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what are the minimum and maximum number of products across all the shops?<|endoftext|><|sql|>select min(number_products) ,  max(number_products) from shop;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>return the name, location and district of all shops in descending order of number of products.<|endoftext|><|sql|>select name ,  location ,  district from shop order by number_products desc;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>sort all the shops by number products in descending order, and return the name, location and district of each shop.<|endoftext|><|sql|>select name ,  location ,  district from shop order by number_products desc;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the names of stores whose number products is more than the average number of products.<|endoftext|><|sql|>select name from shop where number_products  >  (select avg(number_products) from shop);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which shops' number products is above the average? give me the shop names.<|endoftext|><|sql|>select name from shop where number_products  >  (select avg(number_products) from shop);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the name of employee who was awarded the most times in the evaluation.<|endoftext|><|sql|>select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which employee received the most awards in evaluations? give me the employee name.<|endoftext|><|sql|>select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id group by t2.employee_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the name of the employee who got the highest one time bonus.<|endoftext|><|sql|>select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which employee received the biggest bonus? give me the employee name.<|endoftext|><|sql|>select t1.name from employee as t1 join evaluation as t2 on t1.employee_id  =  t2.employee_id order by t2.bonus desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the names of employees who never won any award in the evaluation.<|endoftext|><|sql|>select name from employee where employee_id not in (select employee_id from evaluation);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what are the names of the employees who never received any evaluation?<|endoftext|><|sql|>select name from employee where employee_id not in (select employee_id from evaluation);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what is the name of the shop that is hiring the largest number of employees?<|endoftext|><|sql|>select t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which shop has the most employees? give me the shop name.<|endoftext|><|sql|>select t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t1.shop_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the name of the shops that do not hire any employee.<|endoftext|><|sql|>select name from shop where shop_id not in (select shop_id from hiring);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which shops run with no employees? find the shop names<|endoftext|><|sql|>select name from shop where shop_id not in (select shop_id from hiring);<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the number of employees hired in each shop; show the shop name as well.<|endoftext|><|sql|>select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>for each shop, return the number of employees working there and the name of the shop.<|endoftext|><|sql|>select count(*) ,  t2.name from hiring as t1 join shop as t2 on t1.shop_id  =  t2.shop_id group by t2.name;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what is total bonus given in all evaluations?<|endoftext|><|sql|>select sum(bonus) from evaluation;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the total amount of bonus given in all the evaluations.<|endoftext|><|sql|>select sum(bonus) from evaluation;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>give me all the information about hiring.<|endoftext|><|sql|>select * from hiring;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>what is all the information about hiring?<|endoftext|><|sql|>select * from hiring;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>which district has both stores with less than 3000 products and stores with more than 10000 products?<|endoftext|><|sql|>select district from shop where number_products  <  3000 intersect select district from shop where number_products  >  10000;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.<|endoftext|><|sql|>select district from shop where number_products  <  3000 intersect select district from shop where number_products  >  10000;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>how many different store locations are there?<|endoftext|><|sql|>select count(distinct location) from shop;<|endoftext|>"},
{"input_text":"<|schema|>table employee, columns = [*,employee_id,name,age,city]\ntable evaluation, columns = [*,employee_id,year_awarded,bonus]\ntable hiring, columns = [*,shop_id,employee_id,start_from,is_full_time]\ntable shop, columns = [*,shop_id,name,location,district,number_products,manager_name]\nforeign_keys = [employee.employee_id,shop.shop_id,hiring.employee_id,evaluation.employee_id]\n\nprimary_keys = [hiring.employee_id = employee.employee_id,hiring.shop_id = shop.shop_id,evaluation.employee_id = employee.employee_id]<|endoftext|><|query|>count the number of distinct store locations.<|endoftext|><|sql|>select count(distinct location) from shop;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many documents do we have?<|endoftext|><|sql|>select count(*) from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of documents.<|endoftext|><|sql|>select count(*) from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>list document ids, document names, and document descriptions for all documents.<|endoftext|><|sql|>select document_id ,  document_name ,  document_description from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids, names, and descriptions for all documents?<|endoftext|><|sql|>select document_id ,  document_name ,  document_description from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the document name and template id for document with description with the letter 'w' in it?<|endoftext|><|sql|>select document_name ,  template_id from documents where document_description like \"%w%\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the names and template ids for documents that contain the letter w in their description.<|endoftext|><|sql|>select document_name ,  template_id from documents where document_description like \"%w%\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the document id, template id and description for document named \"robbin cv\"?<|endoftext|><|sql|>select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the document id, template id, and description for the document with the name robbin cv.<|endoftext|><|sql|>select document_id ,  template_id ,  document_description from documents where document_name  =  \"robbin cv\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many different templates do all document use?<|endoftext|><|sql|>select count(distinct template_id) from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of different templates used for documents.<|endoftext|><|sql|>select count(distinct template_id) from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many documents are using the template with type code 'ppt'?<|endoftext|><|sql|>select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of documents that use the ppt template type.<|endoftext|><|sql|>select count(*) from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id where t2.template_type_code  =  'ppt';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all template ids and number of documents using each template.<|endoftext|><|sql|>select template_id ,  count(*) from documents group by template_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are all different template ids used for documents, and how many times were each of them used?<|endoftext|><|sql|>select template_id ,  count(*) from documents group by template_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the id and type code for the template used by the most documents?<|endoftext|><|sql|>select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the id and type code of the template that is used for the greatest number of documents.<|endoftext|><|sql|>select t1.template_id ,  t2.template_type_code from documents as t1 join templates as t2 on t1.template_id  =  t2.template_id group by t1.template_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show ids for all templates that are used by more than one document.<|endoftext|><|sql|>select template_id from documents group by template_id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the template ids of any templates used in more than a single document?<|endoftext|><|sql|>select template_id from documents group by template_id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show ids for all templates not used by any document.<|endoftext|><|sql|>select template_id from templates except select template_id from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids for templates that are not used in any documents?<|endoftext|><|sql|>select template_id from templates except select template_id from documents;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many templates do we have?<|endoftext|><|sql|>select count(*) from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of templates.<|endoftext|><|sql|>select count(*) from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show template ids, version numbers, and template type codes for all templates.<|endoftext|><|sql|>select template_id ,  version_number ,  template_type_code from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids, version numbers, and type codes for each template?<|endoftext|><|sql|>select template_id ,  version_number ,  template_type_code from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all distinct template type codes for all templates.<|endoftext|><|sql|>select distinct template_type_code from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the different template type codes?<|endoftext|><|sql|>select distinct template_type_code from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids of templates with template type code pp or ppt?<|endoftext|><|sql|>select template_id from templates where template_type_code  =  \"pp\" or template_type_code  =  \"ppt\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the ids of templates that have the code pp or ppt.<|endoftext|><|sql|>select template_id from templates where template_type_code  =  \"pp\" or template_type_code  =  \"ppt\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many templates have template type code cv?<|endoftext|><|sql|>select count(*) from templates where template_type_code  =  \"cv\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of templates of the type cv.<|endoftext|><|sql|>select count(*) from templates where template_type_code  =  \"cv\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the version number and template type code for the template with version number later than 5?<|endoftext|><|sql|>select version_number ,  template_type_code from templates where version_number  >  5;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the version numbers and template type codes of templates with a version number greater than 5.<|endoftext|><|sql|>select version_number ,  template_type_code from templates where version_number  >  5;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all template type codes and number of templates for each.<|endoftext|><|sql|>select template_type_code ,  count(*) from templates group by template_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the different template type codes, and how many templates correspond to each?<|endoftext|><|sql|>select template_type_code ,  count(*) from templates group by template_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>which template type code has most number of templates?<|endoftext|><|sql|>select template_type_code from templates group by template_type_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the type code of the template type that the most templates belong to.<|endoftext|><|sql|>select template_type_code from templates group by template_type_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all template type codes with less than three templates.<|endoftext|><|sql|>select template_type_code from templates group by template_type_code having count(*)  <  3;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the codes of template types that have fewer than 3 templates?<|endoftext|><|sql|>select template_type_code from templates group by template_type_code having count(*)  <  3;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what the smallest version number and its template type code?<|endoftext|><|sql|>select min(version_number) ,  template_type_code from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the lowest version number, along with its corresponding template type code.<|endoftext|><|sql|>select min(version_number) ,  template_type_code from templates;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the template type code of the template used by document with the name \"data base\"?<|endoftext|><|sql|>select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the template type code of the template that is used by a document named data base.<|endoftext|><|sql|>select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t2.document_name  =  \"data base\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all document names using templates with template type code bk.<|endoftext|><|sql|>select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the names of documents that use templates with the code bk?<|endoftext|><|sql|>select t2.document_name from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id where t1.template_type_code  =  \"bk\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all template type codes and the number of documents using each type.<|endoftext|><|sql|>select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the different template type codes, and how many documents use each type?<|endoftext|><|sql|>select t1.template_type_code ,  count(*) from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>which template type code is used by most number of documents?<|endoftext|><|sql|>select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the code of the template type that is most commonly used in documents.<|endoftext|><|sql|>select t1.template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id group by t1.template_type_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all template type codes that are not used by any document.<|endoftext|><|sql|>select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the codes of template types that are not used for any document?<|endoftext|><|sql|>select template_type_code from templates except select template_type_code from templates as t1 join documents as t2 on t1.template_id  =  t2.template_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all template type codes and descriptions.<|endoftext|><|sql|>select template_type_code ,  template_type_description from ref_template_types;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the type codes and descriptions for all template types?<|endoftext|><|sql|>select template_type_code ,  template_type_description from ref_template_types;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the template type descriptions for template type code \"ad\".<|endoftext|><|sql|>select template_type_description from ref_template_types where template_type_code  =  \"ad\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the template type description of the template type with the code ad.<|endoftext|><|sql|>select template_type_description from ref_template_types where template_type_code  =  \"ad\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the template type code for template type description \"book\".<|endoftext|><|sql|>select template_type_code from ref_template_types where template_type_description  =  \"book\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the type code of the template type with the description \"book\".<|endoftext|><|sql|>select template_type_code from ref_template_types where template_type_description  =  \"book\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the distinct template type descriptions for the templates ever used by any document?<|endoftext|><|sql|>select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the different descriptions for templates that have been used in a document.<|endoftext|><|sql|>select distinct t1.template_type_description from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code join documents as t3 on t2.template_id  =  t3.template_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the template ids with template type description \"presentation\".<|endoftext|><|sql|>select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the ids corresponding to templates with the description 'presentation'.<|endoftext|><|sql|>select t2.template_id from ref_template_types as t1 join templates as t2 on t1.template_type_code  = t2.template_type_code where t1.template_type_description  =  \"presentation\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many paragraphs in total?<|endoftext|><|sql|>select count(*) from paragraphs;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of paragraphs.<|endoftext|><|sql|>select count(*) from paragraphs;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>how many paragraphs for the document with name 'summer show'?<|endoftext|><|sql|>select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>count the number of paragraphs in the document named 'summer show'.<|endoftext|><|sql|>select count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'summer show';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show paragraph details for paragraph with text 'korea ' .<|endoftext|><|sql|>select other_details from paragraphs where paragraph_text like 'korea';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the details for the paragraph that includes the text 'korea ' ?<|endoftext|><|sql|>select other_details from paragraphs where paragraph_text like 'korea';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all paragraph ids and texts for the document with name 'welcome to ny'.<|endoftext|><|sql|>select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids and texts of paragraphs in the document titled 'welcome to ny'?<|endoftext|><|sql|>select t1.paragraph_id ,   t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  'welcome to ny';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all paragraph texts for the document \"customer reviews\".<|endoftext|><|sql|>select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the paragraph texts for the document with the name 'customer reviews'?<|endoftext|><|sql|>select t1.paragraph_text from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id where t2.document_name  =  \"customer reviews\";<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all document ids and the number of paragraphs in each document. order by document id.<|endoftext|><|sql|>select document_id ,  count(*) from paragraphs group by document_id order by document_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the different document ids along with the number of paragraphs corresponding to each, ordered by id.<|endoftext|><|sql|>select document_id ,  count(*) from paragraphs group by document_id order by document_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show all document ids, names and the number of paragraphs in each document.<|endoftext|><|sql|>select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids and names of each document, as well as the number of paragraphs in each?<|endoftext|><|sql|>select t1.document_id ,  t2.document_name ,  count(*) from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>list all document ids with at least two paragraphs.<|endoftext|><|sql|>select document_id from paragraphs group by document_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids of documents that have 2 or more paragraphs?<|endoftext|><|sql|>select document_id from paragraphs group by document_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the document id and name with greatest number of paragraphs?<|endoftext|><|sql|>select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the id and name of the document with the most paragraphs.<|endoftext|><|sql|>select t1.document_id ,  t2.document_name from paragraphs as t1 join documents as t2 on t1.document_id  =  t2.document_id group by t1.document_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the document id with least number of paragraphs?<|endoftext|><|sql|>select document_id from paragraphs group by document_id order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>return the id of the document with the fewest paragraphs.<|endoftext|><|sql|>select document_id from paragraphs group by document_id order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what is the document id with 1 to 2 paragraphs?<|endoftext|><|sql|>select document_id from paragraphs group by document_id having count(*) between 1 and 2;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>give the ids of documents that have between one and two paragraphs.<|endoftext|><|sql|>select document_id from paragraphs group by document_id having count(*) between 1 and 2;<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>show the document id with paragraph text 'brazil' and 'ireland'.<|endoftext|><|sql|>select document_id from paragraphs where paragraph_text  =  'brazil' intersect select document_id from paragraphs where paragraph_text  =  'ireland';<|endoftext|>"},
{"input_text":"<|schema|>table documents, columns = [*,document_id,template_id,document_name,document_description,other_details]\ntable paragraphs, columns = [*,paragraph_id,document_id,paragraph_text,other_details]\ntable ref_template_types, columns = [*,template_type_code,template_type_description]\ntable templates, columns = [*,template_id,version_number,template_type_code,date_effective_from,date_effective_to,template_details]\nforeign_keys = [ref_template_types.template_type_code,templates.template_id,documents.document_id,paragraphs.paragraph_id]\n\nprimary_keys = [templates.template_type_code = ref_template_types.template_type_code,documents.template_id = templates.template_id,paragraphs.document_id = documents.document_id]<|endoftext|><|query|>what are the ids of documents that contain the paragraph text 'brazil' and 'ireland'?<|endoftext|><|sql|>select document_id from paragraphs where paragraph_text  =  'brazil' intersect select document_id from paragraphs where paragraph_text  =  'ireland';<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>how many teachers are there?<|endoftext|><|sql|>select count(*) from teacher;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what is the total count of teachers?<|endoftext|><|sql|>select count(*) from teacher;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>list the names of teachers in ascending order of age.<|endoftext|><|sql|>select name from teacher order by age asc;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers ordered by ascending age?<|endoftext|><|sql|>select name from teacher order by age asc;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the age and hometown of teachers?<|endoftext|><|sql|>select age ,  hometown from teacher;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what is the age and hometown of every teacher?<|endoftext|><|sql|>select age ,  hometown from teacher;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>list the name of teachers whose hometown is not `` little lever urban district '' .<|endoftext|><|sql|>select name from teacher where hometown != \"little lever urban district\";<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers whose hometown is not `` little lever urban district '' ?<|endoftext|><|sql|>select name from teacher where hometown != \"little lever urban district\";<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show the name of teachers aged either 32 or 33?<|endoftext|><|sql|>select name from teacher where age  =  32 or age  =  33;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers who are aged either 32 or 33?<|endoftext|><|sql|>select name from teacher where age  =  32 or age  =  33;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what is the hometown of the youngest teacher?<|endoftext|><|sql|>select hometown from teacher order by age asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>where is the youngest teacher from?<|endoftext|><|sql|>select hometown from teacher order by age asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show different hometown of teachers and the number of teachers from each hometown.<|endoftext|><|sql|>select hometown ,  count(*) from teacher group by hometown;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>for each hometown, how many teachers are there?<|endoftext|><|sql|>select hometown ,  count(*) from teacher group by hometown;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>list the most common hometown of teachers.<|endoftext|><|sql|>select hometown from teacher group by hometown order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what is the most commmon hometowns for teachers?<|endoftext|><|sql|>select hometown from teacher group by hometown order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show the hometowns shared by at least two teachers.<|endoftext|><|sql|>select hometown from teacher group by hometown having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the towns from which at least two teachers come from?<|endoftext|><|sql|>select hometown from teacher group by hometown having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show names of teachers and the courses they are arranged to teach.<|endoftext|><|sql|>select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what is the name of each teacher and what course they teach?<|endoftext|><|sql|>select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.<|endoftext|><|sql|>select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?<|endoftext|><|sql|>select t3.name ,  t2.course from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id order by t3.name;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show the name of the teacher for the math course.<|endoftext|><|sql|>select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\";<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the people who teach math courses?<|endoftext|><|sql|>select t3.name from course_arrange as t1 join course as t2 on t1.course_id  =  t2.course_id join teacher as t3 on t1.teacher_id  =  t3.teacher_id where t2.course  =  \"math\";<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show names of teachers and the number of courses they teach.<|endoftext|><|sql|>select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers and how many courses do they teach?<|endoftext|><|sql|>select t2.name ,  count(*) from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>show names of teachers that teach at least two courses.<|endoftext|><|sql|>select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers who teach at least two courses?<|endoftext|><|sql|>select t2.name from course_arrange as t1 join teacher as t2 on t1.teacher_id  =  t2.teacher_id group by t2.name having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>list the names of teachers who have not been arranged to teach courses.<|endoftext|><|sql|>select name from teacher where teacher_id not in (select teacher_id from course_arrange);<|endoftext|>"},
{"input_text":"<|schema|>table course, columns = [*,course_id,staring_date,course]\ntable course_arrange, columns = [*,course_id,teacher_id,grade]\ntable teacher, columns = [*,teacher_id,name,age,hometown]\nforeign_keys = [course.course_id,teacher.teacher_id,course_arrange.course_id]\n\nprimary_keys = [course_arrange.teacher_id = teacher.teacher_id,course_arrange.course_id = course.course_id]<|endoftext|><|query|>what are the names of the teachers whose courses have not been arranged?<|endoftext|><|sql|>select name from teacher where teacher_id not in (select teacher_id from course_arrange);<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>how many visitors below age 30 are there?<|endoftext|><|sql|>select count(*) from visitor where age  <  30;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.<|endoftext|><|sql|>select name from visitor where level_of_membership  >  4 order by level_of_membership desc;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what is the average age of the visitors whose membership level is not higher than 4?<|endoftext|><|sql|>select avg(age) from visitor where level_of_membership  <=  4;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.<|endoftext|><|sql|>select name ,  level_of_membership from visitor where level_of_membership  >  4 order by age desc;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the id and name of the museum that has the most staff members?<|endoftext|><|sql|>select museum_id ,  name from museum order by num_of_staff desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the average number of staff working for the museums that were open before 2009.<|endoftext|><|sql|>select avg(num_of_staff) from museum where open_year  <  2009;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what are the opening year and staff number of the museum named plaza museum?<|endoftext|><|sql|>select num_of_staff ,  open_year from museum where name  =  'plaza museum';<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.<|endoftext|><|sql|>select name from museum where num_of_staff  >  (select min(num_of_staff) from museum where open_year  >  2010);<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the id, name and age for visitors who visited some museums more than once.<|endoftext|><|sql|>select t1.id ,  t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t1.id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?<|endoftext|><|sql|>select t2.visitor_id ,  t1.name ,  t1.level_of_membership from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id group by t2.visitor_id order by sum(t2.total_spent) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what are the id and name of the museum visited most times?<|endoftext|><|sql|>select t2.museum_id ,  t1.name from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id group by t2.museum_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what is the name of the museum that had no visitor yet?<|endoftext|><|sql|>select name from museum where museum_id not in (select museum_id from visit);<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the name and age of the visitor who bought the most tickets at once.<|endoftext|><|sql|>select t1.name ,  t1.age from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id order by t2.num_of_ticket desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what are the average and maximum number of tickets bought in all visits?<|endoftext|><|sql|>select avg(num_of_ticket) ,  max(num_of_ticket) from visit;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what is the total ticket expense of the visitors whose membership level is 1?<|endoftext|><|sql|>select sum(t2.total_spent) from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id where t1.level_of_membership  =  1;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>what is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?<|endoftext|><|sql|>select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  <  2009 intersect select t1.name from visitor as t1 join visit as t2 on t1.id  =  t2.visitor_id join museum as t3 on t3.museum_id  =  t2.museum_id where t3.open_year  >  2011;<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>find the number of visitors who did not visit any museum opened after 2010.<|endoftext|><|sql|>select count(*) from visitor where id not in (select t2.visitor_id from museum as t1 join visit as t2 on t1.museum_id  =  t2.museum_id where t1.open_year  >  2010);<|endoftext|>"},
{"input_text":"<|schema|>table museum, columns = [*,museum_id,name,num_of_staff,open_year]\ntable visit, columns = [*,museum_id,visitor_id,num_of_ticket,total_spent]\ntable visitor, columns = [*,id,name,level_of_membership,age]\nforeign_keys = [museum.museum_id,visitor.id,visit.museum_id]\n\nprimary_keys = [visit.visitor_id = visitor.id,visit.museum_id = museum.museum_id]<|endoftext|><|query|>how many museums were opened after 2013 or before 2008?<|endoftext|><|sql|>select count(*) from museum where open_year  >  2013 or open_year  <  2008;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the total number of players.<|endoftext|><|sql|>select count(*) from players;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many players are there?<|endoftext|><|sql|>select count(*) from players;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the total number of matches.<|endoftext|><|sql|>select count(*) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>count the number of matches.<|endoftext|><|sql|>select count(*) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>list the first name and birth date of all players from the country with code usa.<|endoftext|><|sql|>select first_name ,  birth_date from players where country_code  =  'usa';<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the first names and birth dates of players from the usa?<|endoftext|><|sql|>select first_name ,  birth_date from players where country_code  =  'usa';<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the average age of losers and winners of all matches.<|endoftext|><|sql|>select avg(loser_age) ,  avg(winner_age) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the average ages of losers and winners across matches?<|endoftext|><|sql|>select avg(loser_age) ,  avg(winner_age) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the average rank of winners in all matches.<|endoftext|><|sql|>select avg(winner_rank) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the average rank for winners in all matches?<|endoftext|><|sql|>select avg(winner_rank) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the highest rank of losers in all matches.<|endoftext|><|sql|>select min(loser_rank) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the best rank of losers across all matches?<|endoftext|><|sql|>select min(loser_rank) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the number of distinct country codes of all players.<|endoftext|><|sql|>select count(distinct country_code) from players;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many distinct countries do players come from?<|endoftext|><|sql|>select count(distinct country_code) from players;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the number of distinct name of losers.<|endoftext|><|sql|>select count(distinct loser_name) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many different loser names are there?<|endoftext|><|sql|>select count(distinct loser_name) from matches;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the name of tourney that has more than 10 matches.<|endoftext|><|sql|>select tourney_name from matches group by tourney_name having count(*)  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the names of tournaments that have more than 10 matches?<|endoftext|><|sql|>select tourney_name from matches group by tourney_name having count(*)  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>list the names of all winners who played in both 2013 and 2016.<|endoftext|><|sql|>select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the names of players who won in both 2013 and 2016?<|endoftext|><|sql|>select winner_name from matches where year  =  2013 intersect select winner_name from matches where year  =  2016;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>list the number of all matches who played in years of 2013 or 2016.<|endoftext|><|sql|>select count(*) from matches where year  =  2013 or year  =  2016;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many matches were played in 2013 or 2016?<|endoftext|><|sql|>select count(*) from matches where year  =  2013 or year  =  2016;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the country code and first name of the players who won in both tourney wta championships and australian open?<|endoftext|><|sql|>select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open';<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the first names and country codes for players who won both the wta championships and the australian open?<|endoftext|><|sql|>select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'wta championships' intersect select t1.country_code ,  t1.first_name from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id where t2.tourney_name  =  'australian open';<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the first name and country code of the oldest player.<|endoftext|><|sql|>select first_name ,  country_code from players order by birth_date limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the first name and country code of the oldest player?<|endoftext|><|sql|>select first_name ,  country_code from players order by birth_date limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>list the first and last name of all players in the order of birth date.<|endoftext|><|sql|>select first_name ,  last_name from players order by birth_date;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the full names of all players, sorted by birth date?<|endoftext|><|sql|>select first_name ,  last_name from players order by birth_date;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>list the first and last name of all players who are left \/ l hand in the order of birth date.<|endoftext|><|sql|>select first_name ,  last_name from players where hand  =  'l' order by birth_date;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the full names of all left handed players, in order of birth date?<|endoftext|><|sql|>select first_name ,  last_name from players where hand  =  'l' order by birth_date;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the first name and country code of the player who did the most number of tours.<|endoftext|><|sql|>select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the first name and country code of the player with the most tours?<|endoftext|><|sql|>select t1.country_code ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id order by t2.tours desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the year that has the most number of matches.<|endoftext|><|sql|>select year from matches group by year order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>which year had the most matches?<|endoftext|><|sql|>select year from matches group by year order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the name and rank points of the winner who won the most times.<|endoftext|><|sql|>select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the name of the winner who has won the most matches, and how many rank points does this player have?<|endoftext|><|sql|>select winner_name ,  winner_rank_points from matches group by winner_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the name of the winner who has the highest rank points and participated in the australian open tourney.<|endoftext|><|sql|>select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the name of the winner with the most rank points who participated in the australian open tournament?<|endoftext|><|sql|>select winner_name from matches where tourney_name  =  'australian open' order by winner_rank_points desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the names of loser and winner who played in the match with greatest number of minutes.<|endoftext|><|sql|>select winner_name ,  loser_name from matches order by minutes desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the names of the winner and loser who played in the longest match?<|endoftext|><|sql|>select winner_name ,  loser_name from matches order by minutes desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the average ranking for each player and their first name.<|endoftext|><|sql|>select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the first names of all players, and their average rankings?<|endoftext|><|sql|>select avg(ranking) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the total ranking points for each player and their first name.<|endoftext|><|sql|>select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the first names of all players, and their total ranking points?<|endoftext|><|sql|>select sum(ranking_points) ,  t1.first_name from players as t1 join rankings as t2 on t1.player_id  =  t2.player_id group by t1.first_name;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the number of players for each country.<|endoftext|><|sql|>select count(*) ,  country_code from players group by country_code;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many players are from each country?<|endoftext|><|sql|>select count(*) ,  country_code from players group by country_code;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the code of the country where has the greatest number of players.<|endoftext|><|sql|>select country_code from players group by country_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the code of the country with the most players?<|endoftext|><|sql|>select country_code from players group by country_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the codes of countries that have more than 50 players.<|endoftext|><|sql|>select country_code from players group by country_code having count(*)  >  50;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the codes of countries with more than 50 players?<|endoftext|><|sql|>select country_code from players group by country_code having count(*)  >  50;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the total number of tours for each ranking date.<|endoftext|><|sql|>select sum(tours) ,  ranking_date from rankings group by ranking_date;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many total tours were there for each ranking date?<|endoftext|><|sql|>select sum(tours) ,  ranking_date from rankings group by ranking_date;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the number of matches happened in each year.<|endoftext|><|sql|>select count(*) ,  year from matches group by year;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many matches were played in each year?<|endoftext|><|sql|>select count(*) ,  year from matches group by year;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the name and rank of the 3 youngest winners across all matches.<|endoftext|><|sql|>select distinct winner_name ,  winner_rank from matches order by winner_age limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what are the names and ranks of the three youngest winners across all matches?<|endoftext|><|sql|>select distinct winner_name ,  winner_rank from matches order by winner_age limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many different winners both participated in the wta championships and were left handed?<|endoftext|><|sql|>select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l';<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the number of left handed winners who participated in the wta championships.<|endoftext|><|sql|>select count(distinct winner_name) from matches where tourney_name  =  'wta championships' and winner_hand  =  'l';<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the first name, country code and birth date of the winner who has the highest rank points in all matches.<|endoftext|><|sql|>select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>what is the first name, country code, and birth date of the player with the most winner rank points across all matches?<|endoftext|><|sql|>select t1.first_name ,  t1.country_code ,  t1.birth_date from players as t1 join matches as t2 on t1.player_id  =  t2.winner_id order by t2.winner_rank_points desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>find the number of players for each hand type.<|endoftext|><|sql|>select count(*) ,  hand from players group by hand;<|endoftext|>"},
{"input_text":"<|schema|>table matches, columns = [*,best_of,draw_size,loser_age,loser_entry,loser_hand,loser_ht,loser_id,loser_ioc,loser_name,loser_rank,loser_rank_points,loser_seed,match_num,minutes,round,score,surface,tourney_date,tourney_id,tourney_level,tourney_name,winner_age,winner_entry,winner_hand,winner_ht,winner_id,winner_ioc,winner_name,winner_rank,winner_rank_points,winner_seed,year]\ntable players, columns = [*,player_id,first_name,last_name,hand,birth_date,country_code]\ntable rankings, columns = [*,ranking_date,ranking,player_id,ranking_points,tours]\nforeign_keys = [players.player_id]\n\nprimary_keys = [matches.winner_id = players.player_id,matches.loser_id = players.player_id,rankings.player_id = players.player_id]<|endoftext|><|query|>how many players are there for each hand type?<|endoftext|><|sql|>select count(*) ,  hand from players group by hand;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>how many ships ended up being 'captured'?<|endoftext|><|sql|>select count(*) from ship where disposition_of_ship  =  'captured';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>list the name and tonnage ordered by in descending alphaetical order for the names.<|endoftext|><|sql|>select name ,  tonnage from ship order by name desc;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>list the name, date and result of each battle.<|endoftext|><|sql|>select name ,  date from battle;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what is maximum and minimum death toll caused each time?<|endoftext|><|sql|>select max(killed) ,  min(killed) from death;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what is the average number of injuries caused each time?<|endoftext|><|sql|>select avg(injured) from death;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what are the death and injury situations caused by the ship with tonnage 't'?<|endoftext|><|sql|>select t1.killed ,  t1.injured from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id where t2.tonnage  =  't';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what are the name and results of the battles when the bulgarian commander is not 'boril'<|endoftext|><|sql|>select name ,  result from battle where bulgarian_commander != 'boril';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what are the different ids and names of the battles that lost any 'brig' type shipes?<|endoftext|><|sql|>select distinct t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.ship_type  =  'brig';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what are the ids and names of the battles that led to more than 10 people killed in total.<|endoftext|><|sql|>select t1.id ,  t1.name from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle join death as t3 on t2.id  =  t3.caused_by_ship_id group by t1.id having sum(t3.killed)  >  10;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what is the ship id and name that caused most total injuries?<|endoftext|><|sql|>select t2.id ,  t2.name from death as t1 join ship as t2 on t1.caused_by_ship_id  =  t2.id group by t2.id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what are the distinct battle names which are between bulgarian commander 'kaloyan' and latin commander 'baldwin i'?<|endoftext|><|sql|>select name from battle where bulgarian_commander  =  'kaloyan' and latin_commander  =  'baldwin i';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>how many different results are there for the battles?<|endoftext|><|sql|>select count(distinct result) from battle;<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>how many battles did not lose any ship with tonnage '225'?<|endoftext|><|sql|>select count(*) from battle where id not in ( select lost_in_battle from ship where tonnage  =  '225' );<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>list the name and date the battle that has lost the ship named 'lettice' and the ship named 'hms atalanta'<|endoftext|><|sql|>select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'lettice' intersect select t1.name ,  t1.date from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.name  =  'hms atalanta';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>show names, results and bulgarian commanders of the battles with no ships lost in the 'english channel'.<|endoftext|><|sql|>select name ,  result ,  bulgarian_commander from battle except select t1.name ,  t1.result ,  t1.bulgarian_commander from battle as t1 join ship as t2 on t1.id  =  t2.lost_in_battle where t2.location  =  'english channel';<|endoftext|>"},
{"input_text":"<|schema|>table battle, columns = [*,id,name,date,bulgarian_commander,latin_commander,result]\ntable death, columns = [*,caused_by_ship_id,id,note,killed,injured]\ntable ship, columns = [*,lost_in_battle,id,name,tonnage,ship_type,location,disposition_of_ship]\nforeign_keys = [battle.id,ship.id,death.id]\n\nprimary_keys = [ship.lost_in_battle = battle.id,death.caused_by_ship_id = ship.id]<|endoftext|><|query|>what are the notes of the death events which has substring 'east'?<|endoftext|><|sql|>select note from death where note like '%east%';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are all the addresses including line 1 and line 2?<|endoftext|><|sql|>select line_1 ,  line_2 from addresses;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the first and second line for all addresses?<|endoftext|><|sql|>select line_1 ,  line_2 from addresses;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many courses in total are listed?<|endoftext|><|sql|>select count(*) from courses;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many courses are there?<|endoftext|><|sql|>select count(*) from courses;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how is the math course described?<|endoftext|><|sql|>select course_description from courses where course_name  =  'math';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the descriptions for all the math courses?<|endoftext|><|sql|>select course_description from courses where course_name  =  'math';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the zip code of the address in the city port chelsea?<|endoftext|><|sql|>select zip_postcode from addresses where city  =  'port chelsea';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the zip code for port chelsea?<|endoftext|><|sql|>select zip_postcode from addresses where city  =  'port chelsea';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>which department offers the most number of degrees? list department name and id.<|endoftext|><|sql|>select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the name and id of the department with the most number of degrees ?<|endoftext|><|sql|>select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many departments offer any degree?<|endoftext|><|sql|>select count(distinct department_id) from degree_programs;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many different departments offer degrees?<|endoftext|><|sql|>select count(distinct department_id) from degree_programs;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many different degree names are offered?<|endoftext|><|sql|>select count(distinct degree_summary_name) from degree_programs;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many different degrees are offered?<|endoftext|><|sql|>select count(distinct degree_summary_name) from degree_programs;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many degrees does the engineering department offer?<|endoftext|><|sql|>select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many degrees does the engineering department have?<|endoftext|><|sql|>select count(*) from departments as t1 join degree_programs as t2 on t1.department_id  =  t2.department_id where t1.department_name  =  'engineer';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the names and descriptions of all the sections?<|endoftext|><|sql|>select section_name ,  section_description from sections;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the names and descriptions for all the sections?<|endoftext|><|sql|>select section_name ,  section_description from sections;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the names and id of courses having at most 2 sections?<|endoftext|><|sql|>select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the names and ids of every course with less than 2 sections?<|endoftext|><|sql|>select t1.course_name ,  t1.course_id from courses as t1 join sections as t2 on t1.course_id  =  t2.course_id group by t1.course_id having count(*)  <=  2;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>list the section_name in reversed lexicographical order.<|endoftext|><|sql|>select section_name from sections order by section_name desc;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the names of the sections in reverse alphabetical order?<|endoftext|><|sql|>select section_name from sections order by section_name desc;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the semester which most student registered in? show both the name and the id.<|endoftext|><|sql|>select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>for each semester, what is the name and id of the one with the most students registered?<|endoftext|><|sql|>select t1.semester_name ,  t1.semester_id from semesters as t1 join student_enrolment as t2 on t1.semester_id  =  t2.semester_id group by t1.semester_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the description of the department whose name has the substring the computer?<|endoftext|><|sql|>select department_description from departments where department_name like '%computer%';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the department description for the one whose name has the word computer?<|endoftext|><|sql|>select department_description from departments where department_name like '%computer%';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>who are enrolled in 2 degree programs in one semester? list the first name, middle name and last name and the id.<|endoftext|><|sql|>select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?<|endoftext|><|sql|>select t1.first_name ,  t1.middle_name ,  t1.last_name ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id having count(*)  =  2;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>who is enrolled in a bachelor degree program? list the first name, middle name, last name.<|endoftext|><|sql|>select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the first, middle, and last names for everybody enrolled in a bachelors program?<|endoftext|><|sql|>select distinct t1.first_name ,  t1.middle_name ,  t1.last_name from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id join degree_programs as t3 on t2.degree_program_id  =  t3.degree_program_id where t3.degree_summary_name  =  'bachelor';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>find the kind of program which most number of students are enrolled in?<|endoftext|><|sql|>select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the degree summary name that has the most number of students enrolled?<|endoftext|><|sql|>select t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_summary_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>find the program which most number of students are enrolled in. list both the id and the summary.<|endoftext|><|sql|>select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the program id and the summary of the degree that has the most students enrolled?<|endoftext|><|sql|>select t1.degree_program_id ,  t1.degree_summary_name from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id group by t1.degree_program_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>which student has enrolled for the most times in any program? list the id, first name, middle name, last name, the number of enrollments and student id.<|endoftext|><|sql|>select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?<|endoftext|><|sql|>select t1.student_id ,  t1.first_name ,  t1.middle_name ,  t1.last_name ,  count(*) ,  t1.student_id from students as t1 join student_enrolment as t2 on t1.student_id  =  t2.student_id group by t1.student_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>which semesters do not have any student enrolled? list the semester name.<|endoftext|><|sql|>select semester_name from semesters where semester_id not in( select semester_id from student_enrolment );<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the name of the semester with no students enrolled?<|endoftext|><|sql|>select semester_name from semesters where semester_id not in( select semester_id from student_enrolment );<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are all the course names of the courses which ever have students enrolled in?<|endoftext|><|sql|>select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the names of all courses that have some students enrolled?<|endoftext|><|sql|>select distinct t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what's the name of the course with most number of enrollments?<|endoftext|><|sql|>select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the name of the course with the most students enrolled?<|endoftext|><|sql|>select  t1.course_name from courses as t1 join student_enrolment_courses as t2 on t1.course_id  =  t2.course_id group by t1.course_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>find the last name of the students who currently live in the state of north carolina but have not registered in any degree program.<|endoftext|><|sql|>select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the last name of the students who live in north carolina but have not registered in any degree programs?<|endoftext|><|sql|>select t1.last_name from students as t1 join addresses as t2 on t1.current_address_id  =  t2.address_id where t2.state_province_county  =  'northcarolina' except select distinct t3.last_name from students as t3 join student_enrolment as t4 on t3.student_id  =  t4.student_id;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>show the date and id of the transcript with at least 2 course results.<|endoftext|><|sql|>select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the date and id of the transcript with at least 2 courses listed?<|endoftext|><|sql|>select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the phone number of the man with the first name timmothy and the last name ward?<|endoftext|><|sql|>select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the mobile phone number of the student named timmothy ward ?<|endoftext|><|sql|>select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>who is the first student to register? list the first name, middle name and last name.<|endoftext|><|sql|>select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the first, middle, and last name of the first student to register?<|endoftext|><|sql|>select first_name ,  middle_name ,  last_name from students order by date_first_registered asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>who is the earliest graduate of the school? list the first name, middle name and last name.<|endoftext|><|sql|>select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the first, middle, and last name of the earliest school graduate?<|endoftext|><|sql|>select first_name ,  middle_name ,  last_name from students order by date_left asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>whose permanent address is different from his or her current address? list his or her first name.<|endoftext|><|sql|>select first_name from students where current_address_id != permanent_address_id;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the first name of the student whose permanent address is different from his or her current one?<|endoftext|><|sql|>select first_name from students where current_address_id != permanent_address_id;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>which address holds the most number of students currently? list the address id and all lines.<|endoftext|><|sql|>select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the id, line 1, and line 2 of the address with the most students?<|endoftext|><|sql|>select t1.address_id ,  t1.line_1 ,  t1.line_2 from addresses as t1 join students as t2 on t1.address_id  =  t2.current_address_id group by t1.address_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>on average, when were the transcripts printed?<|endoftext|><|sql|>select avg(transcript_date) from transcripts;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the average transcript date?<|endoftext|><|sql|>select avg(transcript_date) from transcripts;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>when is the first transcript released? list the date and details.<|endoftext|><|sql|>select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the earliest date of a transcript release, and what details can you tell me?<|endoftext|><|sql|>select transcript_date ,  other_details from transcripts order by transcript_date asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many transcripts are released?<|endoftext|><|sql|>select count(*) from transcripts;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many transcripts are listed?<|endoftext|><|sql|>select count(*) from transcripts;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the last transcript release date?<|endoftext|><|sql|>select transcript_date from transcripts order by transcript_date desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>when was the last transcript released?<|endoftext|><|sql|>select transcript_date from transcripts order by transcript_date desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many times at most can a course enrollment result show in different transcripts? also show the course enrollment id.<|endoftext|><|sql|>select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?<|endoftext|><|sql|>select count(*) ,  student_course_id from transcript_contents group by student_course_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>show the date of the transcript which shows the least number of results, also list the id.<|endoftext|><|sql|>select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the date and id of the transcript with the least number of results?<|endoftext|><|sql|>select t2.transcript_date ,  t1.transcript_id from transcript_contents as t1 join transcripts as t2 on t1.transcript_id  =  t2.transcript_id group by t1.transcript_id order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>find the semester when both master students and bachelor students got enrolled in.<|endoftext|><|sql|>select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the id of the semester that had both masters and bachelors students enrolled?<|endoftext|><|sql|>select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'master' intersect select distinct t2.semester_id from degree_programs as t1 join student_enrolment as t2 on t1.degree_program_id  =  t2.degree_program_id where degree_summary_name  =  'bachelor';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>how many different addresses do the students currently live?<|endoftext|><|sql|>select count(distinct current_address_id) from students;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the different addresses that have students living there?<|endoftext|><|sql|>select count(distinct current_address_id) from students;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>list all the student details in reversed lexicographical order.<|endoftext|><|sql|>select other_student_details from students order by other_student_details desc;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what other details can you tell me about students in reverse alphabetical order?<|endoftext|><|sql|>select other_student_details from students order by other_student_details desc;<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>describe the section h.<|endoftext|><|sql|>select section_description from sections where section_name  =  'h';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what is the description for the section named h?<|endoftext|><|sql|>select section_description from sections where section_name  =  'h';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>find the first name of the students who permanently live in the country haiti or have the cell phone number 09700166582 .<|endoftext|><|sql|>select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';<|endoftext|>"},
{"input_text":"<|schema|>table addresses, columns = [*,address_id,line_1,line_2,line_3,city,zip_postcode,state_province_county,country,other_address_details]\ntable courses, columns = [*,course_id,course_name,course_description,other_details]\ntable degree_programs, columns = [*,degree_program_id,department_id,degree_summary_name,degree_summary_description,other_details]\ntable departments, columns = [*,department_id,department_name,department_description,other_details]\ntable sections, columns = [*,section_id,course_id,section_name,section_description,other_details]\ntable semesters, columns = [*,semester_id,semester_name,semester_description,other_details]\ntable student_enrolment, columns = [*,student_enrolment_id,degree_program_id,semester_id,student_id,other_details]\ntable student_enrolment_courses, columns = [*,student_course_id,course_id,student_enrolment_id]\ntable students, columns = [*,student_id,current_address_id,permanent_address_id,first_name,middle_name,last_name,cell_mobile_number,email_address,ssn,date_first_registered,date_left,other_student_details]\ntable transcript_contents, columns = [*,student_course_id,transcript_id]\ntable transcripts, columns = [*,transcript_id,transcript_date,other_details]\nforeign_keys = [addresses.address_id,courses.course_id,departments.department_id,degree_programs.degree_program_id,sections.section_id,semesters.semester_id,students.student_id,student_enrolment.student_enrolment_id,student_enrolment_courses.student_course_id,transcripts.transcript_id]\n\nprimary_keys = [degree_programs.department_id = departments.department_id,sections.course_id = courses.course_id,students.permanent_address_id = addresses.address_id,students.current_address_id = addresses.address_id,student_enrolment.student_id = students.student_id,student_enrolment.semester_id = semesters.semester_id,student_enrolment.degree_program_id = degree_programs.degree_program_id,student_enrolment_courses.student_enrolment_id = student_enrolment.student_enrolment_id,student_enrolment_courses.course_id = courses.course_id,transcript_contents.transcript_id = transcripts.transcript_id,transcript_contents.student_course_id = student_enrolment_courses.student_course_id]<|endoftext|><|query|>what are the first names of the students who live in haiti permanently or have the cell phone number 09700166582 ?<|endoftext|><|sql|>select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the title of all cartoons in alphabetical order.<|endoftext|><|sql|>select title from cartoon order by title;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the titles of the cartoons sorted alphabetically?<|endoftext|><|sql|>select title from cartoon order by title;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list all cartoon directed by \"ben jones\".<|endoftext|><|sql|>select title from cartoon where directed_by = \"ben jones\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the names of all cartoons directed by ben jones?<|endoftext|><|sql|>select title from cartoon where directed_by = \"ben jones\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>how many cartoons were written by \"joseph kuhr\"?<|endoftext|><|sql|>select count(*) from cartoon where written_by = \"joseph kuhr\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the number of cartoones written by joseph kuhr?<|endoftext|><|sql|>select count(*) from cartoon where written_by = \"joseph kuhr\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list all cartoon titles and their directors ordered by their air date<|endoftext|><|sql|>select title ,  directed_by from cartoon order by original_air_date;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the name and directors of all the cartoons that are ordered by air date?<|endoftext|><|sql|>select title ,  directed_by from cartoon order by original_air_date;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the title of all cartoon directed by \"ben jones\" or \"brandon vietti\".<|endoftext|><|sql|>select title from cartoon where directed_by = \"ben jones\" or directed_by = \"brandon vietti\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the titles of all cartoons directed by ben jones or brandon vietti?<|endoftext|><|sql|>select title from cartoon where directed_by = \"ben jones\" or directed_by = \"brandon vietti\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>which country has the most of tv channels? list the country and number of tv channels it has.<|endoftext|><|sql|>select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the country with the most number of tv channels and how many does it have?<|endoftext|><|sql|>select country ,  count(*) from tv_channel group by country order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the number of different series names and contents in the tv channel table.<|endoftext|><|sql|>select count(distinct series_name) ,  count(distinct content) from tv_channel;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>how many different series and contents are listed in the tv channel table?<|endoftext|><|sql|>select count(distinct series_name) ,  count(distinct content) from tv_channel;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the content of tv channel with serial name \"sky radio\"?<|endoftext|><|sql|>select content from tv_channel where series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the content of the series sky radio?<|endoftext|><|sql|>select content from tv_channel where series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the package option of tv channel with serial name \"sky radio\"?<|endoftext|><|sql|>select package_option from tv_channel where series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the package options of the tv channels whose series names are sky radio?<|endoftext|><|sql|>select package_option from tv_channel where series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>how many tv channel using language english?<|endoftext|><|sql|>select count(*) from tv_channel where language = \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>how many tv channels use the english language?<|endoftext|><|sql|>select count(*) from tv_channel where language = \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the language used least number of tv channel. list language and number of tv channel.<|endoftext|><|sql|>select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the languages used by the least number of tv channels and how many channels use it?<|endoftext|><|sql|>select language ,  count(*) from tv_channel group by language order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list each language and the number of tv channels using it.<|endoftext|><|sql|>select language ,  count(*) from tv_channel group by language;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>for each language, list the number of tv channels that use it.<|endoftext|><|sql|>select language ,  count(*) from tv_channel group by language;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the tv channel that shows the cartoon \"the rise of the blue beetle!\"? list the tv channel's series name.<|endoftext|><|sql|>select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the series name of the tv channel that shows the cartoon \"the rise of the blue beetle\"?<|endoftext|><|sql|>select t1.series_name from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.title = \"the rise of the blue beetle!\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the title of all  cartoons showed on tv channel with series name \"sky radio\".<|endoftext|><|sql|>select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the title of all the cartools that are on the tv channel with the series name \"sky radio\"?<|endoftext|><|sql|>select t2.title from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the episode of all tv series sorted by rating.<|endoftext|><|sql|>select episode from tv_series order by rating;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are all of the episodes ordered by ratings?<|endoftext|><|sql|>select episode from tv_series order by rating;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list top 3 highest rating  tv series. list the tv series's episode and rating.<|endoftext|><|sql|>select episode ,  rating from tv_series order by rating desc limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are 3 most highly rated episodes in the tv series table and what were those ratings?<|endoftext|><|sql|>select episode ,  rating from tv_series order by rating desc limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is minimum and maximum share of tv series?<|endoftext|><|sql|>select max(share) , min(share) from tv_series;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the maximum and minimum share for the tv series?<|endoftext|><|sql|>select max(share) , min(share) from tv_series;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the air date of tv series with episode \"a love of a lifetime\"?<|endoftext|><|sql|>select air_date from tv_series where episode = \"a love of a lifetime\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>when did the episode \"a love of a lifetime\" air?<|endoftext|><|sql|>select air_date from tv_series where episode = \"a love of a lifetime\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is weekly rank of tv series with episode \"a love of a lifetime\"?<|endoftext|><|sql|>select weekly_rank from tv_series where episode = \"a love of a lifetime\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the weekly rank for the episode \"a love of a lifetime\"?<|endoftext|><|sql|>select weekly_rank from tv_series where episode = \"a love of a lifetime\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the tv channel of tv series with episode \"a love of a lifetime\"? list the tv channel's series name.<|endoftext|><|sql|>select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the name of the series that has the episode \"a love of a lifetime\"?<|endoftext|><|sql|>select t1.series_name from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t2.episode = \"a love of a lifetime\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>list the episode of all  tv series showed on tv channel with series name \"sky radio\".<|endoftext|><|sql|>select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the episode for the tv series named \"sky radio\"?<|endoftext|><|sql|>select t2.episode from tv_channel as t1 join tv_series as t2 on t1.id = t2.channel where t1.series_name = \"sky radio\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the number of cartoons directed by each of the listed directors.<|endoftext|><|sql|>select count(*) ,  directed_by from cartoon group by directed_by;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>how many cartoons did each director create?<|endoftext|><|sql|>select count(*) ,  directed_by from cartoon group by directed_by;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the production code and channel of the most recently aired cartoon .<|endoftext|><|sql|>select production_code ,  channel from cartoon order by original_air_date desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the produdction code and channel of the most recent cartoon ?<|endoftext|><|sql|>select production_code ,  channel from cartoon order by original_air_date desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the package choice and series name of the tv channel that has high definition tv.<|endoftext|><|sql|>select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the package options and the name of the series for the tv channel that supports high definition tv?<|endoftext|><|sql|>select package_option ,  series_name from tv_channel where hight_definition_tv  =  \"yes\";<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>which countries' tv channels are playing some cartoon written by todd casey?<|endoftext|><|sql|>select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the countries that have cartoons on tv that were written by todd casey?<|endoftext|><|sql|>select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>which countries' tv channels are not playing any cartoon written by todd casey?<|endoftext|><|sql|>select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the countries that are not playing cartoons written by todd casey?<|endoftext|><|sql|>select country from tv_channel except select t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.written_by  =  'todd casey';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the series name and country of the tv channel that is playing some cartoons directed by ben jones and michael chang?<|endoftext|><|sql|>select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the series name and country of all tv channels that are playing cartoons directed by ben jones and cartoons directed by michael chang?<|endoftext|><|sql|>select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'michael chang' intersect select t1.series_name ,  t1.country from tv_channel as t1 join cartoon as t2 on t1.id = t2.channel where t2.directed_by  =  'ben jones';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the pixel aspect ratio and nation of the tv channels that do not use english.<|endoftext|><|sql|>select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what is the pixel aspect ratio and country of origin for all tv channels that do not use english?<|endoftext|><|sql|>select pixel_aspect_ratio_par ,  country from tv_channel where language != 'english';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find id of the tv channels that from the countries where have more than two tv channels.<|endoftext|><|sql|>select id from tv_channel group by country having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the ids of all tv channels that have more than 2 tv channels?<|endoftext|><|sql|>select id from tv_channel group by country having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the id of tv channels that do not play any cartoon directed by ben jones.<|endoftext|><|sql|>select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the ids of the tv channels that do not have any cartoons directed by ben jones?<|endoftext|><|sql|>select id from tv_channel except select channel from cartoon where directed_by  =  'ben jones';<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>find the package option of the tv channel that do not have any cartoon directed by ben jones.<|endoftext|><|sql|>select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones');<|endoftext|>"},
{"input_text":"<|schema|>table cartoon, columns = [*,id,title,directed_by,written_by,original_air_date,production_code,channel]\ntable tv_channel, columns = [*,id,series_name,country,language,content,pixel_aspect_ratio_par,hight_definition_tv,pay_per_view_ppv,package_option]\ntable tv_series, columns = [*,id,episode,air_date,rating,share,18_49_rating_share,viewers_m,weekly_rank,channel]\nforeign_keys = [tv_channel.id,tv_series.id,cartoon.id]\n\nprimary_keys = [tv_series.channel = tv_channel.id,cartoon.channel = tv_channel.id]<|endoftext|><|query|>what are the package options of all tv channels that are not playing any cartoons directed by ben jones?<|endoftext|><|sql|>select package_option from tv_channel where id not in (select channel from cartoon where directed_by  =  'ben jones');<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>how many poker players are there?<|endoftext|><|sql|>select count(*) from poker_player;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>count the number of poker players.<|endoftext|><|sql|>select count(*) from poker_player;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>list the earnings of poker players in descending order.<|endoftext|><|sql|>select earnings from poker_player order by earnings desc;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the earnings of poker players, ordered descending by value?<|endoftext|><|sql|>select earnings from poker_player order by earnings desc;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>list the final tables made and the best finishes of poker players.<|endoftext|><|sql|>select final_table_made ,  best_finish from poker_player;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the final tables made and best finishes for all poker players?<|endoftext|><|sql|>select final_table_made ,  best_finish from poker_player;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the average earnings of poker players?<|endoftext|><|sql|>select avg(earnings) from poker_player;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the average earnings across all poker players.<|endoftext|><|sql|>select avg(earnings) from poker_player;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the money rank of the poker player with the highest earnings?<|endoftext|><|sql|>select money_rank from poker_player order by earnings desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the money rank of the player with the greatest earnings.<|endoftext|><|sql|>select money_rank from poker_player order by earnings desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the maximum number of final tables made among poker players with earnings less than 200000?<|endoftext|><|sql|>select max(final_table_made) from poker_player where earnings  <  200000;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the maximum final tables made across all poker players who have earnings below 200000.<|endoftext|><|sql|>select max(final_table_made) from poker_player where earnings  <  200000;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names of poker players?<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the names of all the poker players.<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names of poker players whose earnings is higher than 300000?<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>give the names of poker players who have earnings above 300000.<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t2.earnings  >  300000;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>list the names of poker players ordered by the final tables made in ascending order.<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names of poker players, ordered ascending by the number of final tables they have made?<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.final_table_made;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the birth date of the poker player with the lowest earnings?<|endoftext|><|sql|>select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the birth date of the poker player with the lowest earnings.<|endoftext|><|sql|>select t1.birth_date from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the money rank of the tallest poker player?<|endoftext|><|sql|>select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the money rank of the poker player with the greatest height.<|endoftext|><|sql|>select t2.money_rank from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t1.height desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the average earnings of poker players with height higher than 200?<|endoftext|><|sql|>select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>give average earnings of poker players who are taller than 200.<|endoftext|><|sql|>select avg(t2.earnings) from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id where t1.height  >  200;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names of poker players in descending order of earnings?<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the names of poker players sorted by their earnings descending.<|endoftext|><|sql|>select t1.name from people as t1 join poker_player as t2 on t1.people_id  =  t2.people_id order by t2.earnings desc;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are different nationalities of people and the corresponding number of people from each nation?<|endoftext|><|sql|>select nationality ,  count(*) from people group by nationality;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>how many people are there of each nationality?<|endoftext|><|sql|>select nationality ,  count(*) from people group by nationality;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what is the most common nationality of people?<|endoftext|><|sql|>select nationality from people group by nationality order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>give the nationality that is most common across all people.<|endoftext|><|sql|>select nationality from people group by nationality order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the nationalities that are shared by at least two people?<|endoftext|><|sql|>select nationality from people group by nationality having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>return the nationalities for which there are two or more people.<|endoftext|><|sql|>select nationality from people group by nationality having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>list the names and birth dates of people in ascending alphabetical order of name.<|endoftext|><|sql|>select name ,  birth_date from people order by name asc;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names and birth dates of people, ordered by their names in alphabetical order?<|endoftext|><|sql|>select name ,  birth_date from people order by name asc;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>show names of people whose nationality is not \"russia\".<|endoftext|><|sql|>select name from people where nationality != \"russia\";<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names of people who are not from russia?<|endoftext|><|sql|>select name from people where nationality != \"russia\";<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>list the names of people that are not poker players.<|endoftext|><|sql|>select name from people where people_id not in (select people_id from poker_player);<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>what are the names of people who do not play poker?<|endoftext|><|sql|>select name from people where people_id not in (select people_id from poker_player);<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>how many distinct nationalities are there?<|endoftext|><|sql|>select count(distinct nationality) from people;<|endoftext|>"},
{"input_text":"<|schema|>table people, columns = [*,people_id,nationality,name,birth_date,height]\ntable poker_player, columns = [*,poker_player_id,people_id,final_table_made,best_finish,money_rank,earnings]\nforeign_keys = [poker_player.poker_player_id,people.people_id]\n\nprimary_keys = [poker_player.people_id = people.people_id]<|endoftext|><|query|>count the number of different nationalities.<|endoftext|><|sql|>select count(distinct nationality) from people;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>how many states are there?<|endoftext|><|sql|>select count(*) from area_code_state;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>list the contestant numbers and names, ordered by contestant name descending.<|endoftext|><|sql|>select contestant_number ,  contestant_name from contestants order by contestant_name desc;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>list the vote ids, phone numbers and states of all votes.<|endoftext|><|sql|>select vote_id ,  phone_number ,  state from votes;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what are the maximum and minimum values of area codes?<|endoftext|><|sql|>select max(area_code) ,  min(area_code) from area_code_state;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what is last date created of votes from the state 'ca'?<|endoftext|><|sql|>select max(created) from votes where state  =  'ca';<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what are the names of the contestants whose names are not 'jessie alloway'<|endoftext|><|sql|>select contestant_name from contestants where contestant_name != 'jessie alloway';<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what are the distinct states and create time of all votes?<|endoftext|><|sql|>select distinct state ,  created from votes;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what are the contestant numbers and names of the contestants who had at least two votes?<|endoftext|><|sql|>select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?<|endoftext|><|sql|>select t1.contestant_number , t1.contestant_name from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number group by t1.contestant_number order by count(*) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what are the number of votes from state 'ny' or 'ca'?<|endoftext|><|sql|>select count(*) from votes where state  =  'ny' or state  =  'ca';<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>how many contestants did not get voted?<|endoftext|><|sql|>select count(*) from contestants where contestant_number not in ( select contestant_number from votes );<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what is the area code in which the most voters voted?<|endoftext|><|sql|>select t1.area_code from area_code_state as t1 join votes as t2 on t1.state  =  t2.state group by t1.area_code order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>what are the create dates, states, and phone numbers of the votes that were for the contestant named 'tabatha gehling'?<|endoftext|><|sql|>select t2.created ,  t2.state ,  t2.phone_number from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number where t1.contestant_name  =  'tabatha gehling';<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>list the area codes in which voters voted both for the contestant 'tabatha gehling' and the contestant 'kelly clauss'.<|endoftext|><|sql|>select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'tabatha gehling' intersect select t3.area_code from contestants as t1 join votes as t2 on t1.contestant_number  =  t2.contestant_number join area_code_state as t3 on t2.state  =  t3.state where t1.contestant_name  =  'kelly clauss';<|endoftext|>"},
{"input_text":"<|schema|>table area_code_state, columns = [*,area_code,state]\ntable contestants, columns = [*,contestant_number,contestant_name]\ntable votes, columns = [*,vote_id,phone_number,state,contestant_number,created]\nforeign_keys = [area_code_state.area_code,contestants.contestant_number,votes.vote_id]\n\nprimary_keys = [votes.contestant_number = contestants.contestant_number,votes.state = area_code_state.state]<|endoftext|><|query|>return the names of the contestants whose names contain the substring 'al' .<|endoftext|><|sql|>select contestant_name from contestants where contestant_name like \"%al%\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of all the countries that became independent after 1950?<|endoftext|><|sql|>select name from country where indepyear  >  1950;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the names of the nations that were founded after 1950.<|endoftext|><|sql|>select name from country where indepyear  >  1950;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many countries have a republic as their form of government?<|endoftext|><|sql|>select count(*) from country where governmentform  =  \"republic\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many countries have governments that are republics?<|endoftext|><|sql|>select count(*) from country where governmentform  =  \"republic\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total surface area of the countries in the caribbean region?<|endoftext|><|sql|>select sum(surfacearea) from country where region  =  \"caribbean\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how much surface area do the countires in the carribean cover together?<|endoftext|><|sql|>select sum(surfacearea) from country where region  =  \"caribbean\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which continent is anguilla in?<|endoftext|><|sql|>select continent from country where name  =  \"anguilla\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the continent name which anguilla belongs to?<|endoftext|><|sql|>select continent from country where name  =  \"anguilla\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which region is the city kabul located in?<|endoftext|><|sql|>select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what region is kabul in?<|endoftext|><|sql|>select region from country as t1 join city as t2 on t1.code  =  t2.countrycode where t2.name  =  \"kabul\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which language is the most popular in aruba?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what language is predominantly spoken in aruba?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\" order by percentage desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the population and life expectancies in brazil?<|endoftext|><|sql|>select population ,  lifeexpectancy from country where name  =  \"brazil\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give me brazil\u2019s population and life expectancies.<|endoftext|><|sql|>select population ,  lifeexpectancy from country where name  =  \"brazil\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the region and population of angola?<|endoftext|><|sql|>select population ,  region from country where name  =  \"angola\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what region does angola belong to and what is its population?<|endoftext|><|sql|>select population ,  region from country where name  =  \"angola\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the average expected life expectancy for countries in the region of central africa?<|endoftext|><|sql|>select avg(lifeexpectancy) from country where region  =  \"central africa\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how long is the people\u2019s average life expectancy in central africa?<|endoftext|><|sql|>select avg(lifeexpectancy) from country where region  =  \"central africa\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the name of country that has the shortest life expectancy in asia?<|endoftext|><|sql|>select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the name of the country in asia with the lowest life expectancy.<|endoftext|><|sql|>select name from country where continent  =  \"asia\" order by lifeexpectancy limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total population and maximum gnp in asia?<|endoftext|><|sql|>select sum(population) ,  max(gnp) from country where continent  =  \"asia\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many people live in asia, and what is the largest gnp among them?<|endoftext|><|sql|>select sum(population) ,  max(gnp) from country where continent  =  \"asia\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the average life expectancy in african countries that are republics?<|endoftext|><|sql|>select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the average life expectancy for countries in africa which are republics?<|endoftext|><|sql|>select avg(lifeexpectancy) from country where continent  =  \"africa\" and governmentform  =  \"republic\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total surface area of the continents asia and europe?<|endoftext|><|sql|>select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the total surface area covered by countries in asia or europe.<|endoftext|><|sql|>select sum(surfacearea) from country where continent  =  \"asia\" or continent  =  \"europe\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many people live in gelderland district?<|endoftext|><|sql|>select sum(population) from city where district  =  \"gelderland\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total population of gelderland district?<|endoftext|><|sql|>select sum(population) from city where district  =  \"gelderland\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the average gnp and total population in all nations whose government is us territory?<|endoftext|><|sql|>select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the mean gnp and total population of nations which are considered us territory.<|endoftext|><|sql|>select avg(gnp) ,  sum(population) from country where governmentform  =  \"us territory\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many unique languages are spoken in the world?<|endoftext|><|sql|>select count(distinct language) from countrylanguage;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the number of distinct languages used around the world?<|endoftext|><|sql|>select count(distinct language) from countrylanguage;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many type of governments are in africa?<|endoftext|><|sql|>select count(distinct governmentform) from country where continent  =  \"africa\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many different forms of governments are there in africa?<|endoftext|><|sql|>select count(distinct governmentform) from country where continent  =  \"africa\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total number of languages used in aruba?<|endoftext|><|sql|>select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many languages are spoken in aruba?<|endoftext|><|sql|>select count(t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"aruba\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many official languages does afghanistan have?<|endoftext|><|sql|>select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many official languages are spoken in afghanistan?<|endoftext|><|sql|>select count(*) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.name  =  \"afghanistan\" and isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is name of the country that speaks the largest number of languages?<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the name of the nation that uses the greatest amount of languages.<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which continent has the most diverse languages?<|endoftext|><|sql|>select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which continent speaks the most languages?<|endoftext|><|sql|>select t1.continent from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.continent order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many countries speak both english and dutch?<|endoftext|><|sql|>select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the number of nations that use english and dutch?<|endoftext|><|sql|>select count(*) from (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of nations speak both english and french?<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the names of nations that speak both english and french.<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of nations where both english and french are official languages?<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the names of countries with english and french as official languages.<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\" intersect select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"french\" and t2.isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the number of distinct continents where chinese is spoken?<|endoftext|><|sql|>select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many continents speak chinese?<|endoftext|><|sql|>select count( distinct continent) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"chinese\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the regions that use english or dutch?<|endoftext|><|sql|>select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which regions speak dutch or english?<|endoftext|><|sql|>select distinct t1.region from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" or t2.language  =  \"dutch\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the countries where either english or dutch is the official language ?<|endoftext|><|sql|>select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which countries have either english or dutch as an official language?<|endoftext|><|sql|>select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select * from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which language is the most popular on the asian continent?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the language that is used by the largest number of asian nations?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.continent  =  \"asia\" group by t2.language order by count (*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which languages are spoken by only one country in republic governments?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what languages are only used by a single country with a republic government?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.governmentform  =  \"republic\" group by t2.language having count(*)  =  1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>find the city with the largest population that uses english.<|endoftext|><|sql|>select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the most populace city that speaks english?<|endoftext|><|sql|>select t1.name ,  t1.population from city as t1 join countrylanguage as t2 on t1.countrycode  =  t2.countrycode where t2.language  =  \"english\" order by t1.population desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>find the name, population and expected life length of asian country with the largest area?<|endoftext|><|sql|>select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the name, population, and life expectancy of the largest asian country by land?<|endoftext|><|sql|>select name ,  population ,  lifeexpectancy from country where continent  =  \"asia\" order by surfacearea desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is average life expectancy in the countries where english is not the official language?<|endoftext|><|sql|>select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the mean life expectancy of countries in which english is not the official language.<|endoftext|><|sql|>select avg(lifeexpectancy) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and t2.isofficial  =  \"t\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total number of people living in the nations that do not use english?<|endoftext|><|sql|>select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many people live in countries that do not speak english?<|endoftext|><|sql|>select sum(population) from country where name not in (select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the official language spoken in the country whose head of state is beatrix?<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the official language used in the country the name of whose head of state is beatrix.<|endoftext|><|sql|>select t2.language from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t1.headofstate  =  \"beatrix\" and t2.isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total number of unique official languages spoken in the countries that are founded before 1930?<|endoftext|><|sql|>select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>for the countries founded before 1930, what is the total number of distinct official languages?<|endoftext|><|sql|>select count(distinct t2.language) from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where  indepyear  <  1930 and t2.isofficial  =  \"t\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the countries that have greater surface area than any country in europe?<|endoftext|><|sql|>select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which countries have greater area than that of any country in europe?<|endoftext|><|sql|>select name from country where surfacearea  >  (select min(surfacearea) from country where continent  =  \"europe\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the african countries that have a  population less than any country in asia?<|endoftext|><|sql|>select name from country where continent  =  \"africa\"  and population  <  (select max(population) from country where continent  =  \"asia\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which african countries have a smaller population than that of any country in asia?<|endoftext|><|sql|>select name from country where continent  =  \"africa\"  and population  <  (select min(population) from country where continent  =  \"asia\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which asian countries have a population that is larger than any country in africa?<|endoftext|><|sql|>select name from country where continent  =  \"asia\"  and population  >  (select max(population) from country where continent  =  \"africa\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the asian countries which have a population larger than that of any country in africa?<|endoftext|><|sql|>select name from country where continent  =  \"asia\"  and population  >  (select min(population) from country where continent  =  \"africa\");<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the country codes for countries that do not speak english?<|endoftext|><|sql|>select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the country codes for countries that do not speak english.<|endoftext|><|sql|>select countrycode from countrylanguage except select countrycode from countrylanguage where language  =  \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the country codes of countries where people use languages other than english?<|endoftext|><|sql|>select distinct countrycode from countrylanguage where language != \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the country codes for countries in which people speak langauges that are not english.<|endoftext|><|sql|>select distinct countrycode from countrylanguage where language != \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the codes of the countries that do not speak english and whose government forms are not republic?<|endoftext|><|sql|>select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the codes of countries that do not speak english and do not have republics for governments.<|endoftext|><|sql|>select code from country where governmentform != \"republic\" except select countrycode from countrylanguage where language  =  \"english\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which cities are in european countries where english is not the official language?<|endoftext|><|sql|>select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english');<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of cities in europe for which english is not the official language?<|endoftext|><|sql|>select distinct t2.name from country as t1 join city as t2 on t2.countrycode  =  t1.code where t1.continent  =  'europe' and t1.name not in (select t3.name from country as t3 join countrylanguage as t4 on t3.code  =  t4.countrycode where t4.isofficial  =  't' and t4.language  =  'english');<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which unique cities are in asian countries where chinese is the official language ?<|endoftext|><|sql|>select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the different names of cities that are in asia and for which chinese is the official language.<|endoftext|><|sql|>select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the name, independence year, and surface area of the country with the smallest population?<|endoftext|><|sql|>select name ,  surfacearea ,  indepyear from country order by population limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the name, year of independence, and surface area of the country that has the lowest population.<|endoftext|><|sql|>select name ,  surfacearea ,  indepyear from country order by population limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the population, name and leader of the country with the largest area?<|endoftext|><|sql|>select name ,  population ,  headofstate from country order by surfacearea desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the name, population, and head of state for the country that has the largest area.<|endoftext|><|sql|>select name ,  population ,  headofstate from country order by surfacearea desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.<|endoftext|><|sql|>select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of countries that speak more than 2 languages, as well as how many languages they speak?<|endoftext|><|sql|>select count(t2.language) ,  t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode group by t1.name having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>find the number of cities in each district whose population is greater than the average population of cities?<|endoftext|><|sql|>select count(*) ,  district from city where population  >  (select avg(population) from city) group by district;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many cities in each district have a population that is above the average population across all cities?<|endoftext|><|sql|>select count(*) ,  district from city where population  >  (select avg(population) from city) group by district;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>find the government form name and total population for each government form whose average life expectancy is longer than 72.<|endoftext|><|sql|>select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?<|endoftext|><|sql|>select sum(population) ,  governmentform from country group by governmentform having avg(lifeexpectancy)  >  72;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?<|endoftext|><|sql|>select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?<|endoftext|><|sql|>select sum(population) ,  avg(lifeexpectancy) ,  continent from country group by continent having avg(lifeexpectancy)  <  72;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names and areas of countries with the top 5 largest area?<|endoftext|><|sql|>select name ,  surfacearea from country order by surfacearea desc limit 5;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the names and surface areas of the 5 largest countries.<|endoftext|><|sql|>select name ,  surfacearea from country order by surfacearea desc limit 5;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are names of countries with the top 3 largest population?<|endoftext|><|sql|>select name from country order by population desc limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the names of the 3 most populated countries.<|endoftext|><|sql|>select name from country order by population desc limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of the nations with the 3 lowest populations?<|endoftext|><|sql|>select name from country order by population asc limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the names of the 3 countries with the fewest people.<|endoftext|><|sql|>select name from country order by population asc limit 3;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>how many countries are in asia?<|endoftext|><|sql|>select count(*) from country where continent  =  \"asia\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>count the number of countries in asia.<|endoftext|><|sql|>select count(*) from country where continent  =  \"asia\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the names of the countries that are in the continent of europe and have a population of 80000?<|endoftext|><|sql|>select name from country where continent  =  \"europe\" and population  =  \"80000\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the names of countries that are in europe and have a population equal to 80000.<|endoftext|><|sql|>select name from country where continent  =  \"europe\" and population  =  \"80000\";<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total population and average area of countries in the continent of north america whose area is bigger than 3000 ?<|endoftext|><|sql|>select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the total population and average surface area corresponding to countries in north america that have a surface area greater than 3000 .<|endoftext|><|sql|>select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the cities whose population is between 160000 and 900000?<|endoftext|><|sql|>select name from city where population between 160000 and 900000;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the names of cities that have a population between 160000 and 900000 .<|endoftext|><|sql|>select name from city where population between 160000 and 900000;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>which language is spoken by the largest number of countries?<|endoftext|><|sql|>select language from countrylanguage group by language order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>give the language that is spoken in the most countries.<|endoftext|><|sql|>select language from countrylanguage group by language order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the language spoken by the largest percentage of people in each country?<|endoftext|><|sql|>select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?<|endoftext|><|sql|>select language ,  countrycode ,  max(percentage) from countrylanguage group by countrycode;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what is the total number of countries where spanish is spoken by the largest percentage of people?<|endoftext|><|sql|>select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>count the number of countries for which spanish is the predominantly spoken language.<|endoftext|><|sql|>select count(*) ,   max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>what are the codes of countries where spanish is spoken by the largest percentage of people?<|endoftext|><|sql|>select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode;<|endoftext|>"},
{"input_text":"<|schema|>table city, columns = [*,id,name,countrycode,district,population]\ntable country, columns = [*,code,name,continent,region,surfacearea,indepyear,population,lifeexpectancy,gnp,gnpold,localname,governmentform,headofstate,capital,code2]\ntable countrylanguage, columns = [*,countrycode,language,isofficial,percentage]\ntable sqlite_sequence, columns = [*,name,seq]\nforeign_keys = [city.id,country.code,countrylanguage.countrycode]\n\nprimary_keys = [city.countrycode = country.code,countrylanguage.countrycode = country.code]<|endoftext|><|query|>return the codes of countries for which spanish is the predominantly spoken language.<|endoftext|><|sql|>select countrycode ,  max(percentage) from countrylanguage where language  =  \"spanish\" group by countrycode;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>how many conductors are there?<|endoftext|><|sql|>select count(*) from conductor;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>count the number of conductors.<|endoftext|><|sql|>select count(*) from conductor;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>list the names of conductors in ascending order of age.<|endoftext|><|sql|>select name from conductor order by age asc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the names of conductors, ordered by age?<|endoftext|><|sql|>select name from conductor order by age asc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the names of conductors whose nationalities are not \"usa\"?<|endoftext|><|sql|>select name from conductor where nationality != 'usa';<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>return the names of conductors that do not have the nationality \"usa\".<|endoftext|><|sql|>select name from conductor where nationality != 'usa';<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the record companies of orchestras in descending order of years in which they were founded?<|endoftext|><|sql|>select record_company from orchestra order by year_of_founded desc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>return the record companies of orchestras, sorted descending by the years in which they were founded.<|endoftext|><|sql|>select record_company from orchestra order by year_of_founded desc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what is the average attendance of shows?<|endoftext|><|sql|>select avg(attendance) from show;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>return the average attendance across all shows.<|endoftext|><|sql|>select avg(attendance) from show;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the maximum and minimum share of performances whose type is not \"live final\".<|endoftext|><|sql|>select max(share) ,  min(share) from performance where type != \"live final\";<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>return the maximum and minimum shares for performances that do not have the type \"live final\".<|endoftext|><|sql|>select max(share) ,  min(share) from performance where type != \"live final\";<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>how many different nationalities do conductors have?<|endoftext|><|sql|>select count(distinct nationality) from conductor;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>count the number of different nationalities of conductors.<|endoftext|><|sql|>select count(distinct nationality) from conductor;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>list names of conductors in descending order of years of work.<|endoftext|><|sql|>select name from conductor order by year_of_work desc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the names of conductors, sorted descending by the number of years they have worked?<|endoftext|><|sql|>select name from conductor order by year_of_work desc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>list the name of the conductor with the most years of work.<|endoftext|><|sql|>select name from conductor order by year_of_work desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what is the name of the conductor who has worked the greatest number of years?<|endoftext|><|sql|>select name from conductor order by year_of_work desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>show the names of conductors and the orchestras they have conducted.<|endoftext|><|sql|>select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the names of conductors as well as the corresonding orchestras that they have conducted?<|endoftext|><|sql|>select t1.name ,  t2.orchestra from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>show the names of conductors that have conducted more than one orchestras.<|endoftext|><|sql|>select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the names of conductors who have conducted at more than one orchestra?<|endoftext|><|sql|>select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>show the name of the conductor that has conducted the most number of orchestras.<|endoftext|><|sql|>select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what is the name of the conductor who has conducted the most orchestras?<|endoftext|><|sql|>select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id group by t2.conductor_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>please show the name of the conductor that has conducted orchestras founded after 2008.<|endoftext|><|sql|>select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the names of conductors who have conducted orchestras founded after the year 2008?<|endoftext|><|sql|>select t1.name from conductor as t1 join orchestra as t2 on t1.conductor_id  =  t2.conductor_id where year_of_founded  >  2008;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>please show the different record companies and the corresponding number of orchestras.<|endoftext|><|sql|>select record_company ,  count(*) from orchestra group by record_company;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>how many orchestras does each record company manage?<|endoftext|><|sql|>select record_company ,  count(*) from orchestra group by record_company;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>please show the record formats of orchestras in ascending order of count.<|endoftext|><|sql|>select major_record_format from orchestra group by major_record_format order by count(*) asc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the major record formats of orchestras, sorted by their frequency?<|endoftext|><|sql|>select major_record_format from orchestra group by major_record_format order by count(*) asc;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>list the record company shared by the most number of orchestras.<|endoftext|><|sql|>select record_company from orchestra group by record_company order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what is the record company used by the greatest number of orchestras?<|endoftext|><|sql|>select record_company from orchestra group by record_company order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>list the names of orchestras that have no performance.<|endoftext|><|sql|>select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance);<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the orchestras that do not have any performances?<|endoftext|><|sql|>select orchestra from orchestra where orchestra_id not in (select orchestra_id from performance);<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>show the record companies shared by orchestras founded before 2003 and after 2003.<|endoftext|><|sql|>select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?<|endoftext|><|sql|>select record_company from orchestra where year_of_founded  <  2003 intersect select record_company from orchestra where year_of_founded  >  2003;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>find the number of orchestras whose record format is \"cd\" or \"dvd\".<|endoftext|><|sql|>select count(*) from orchestra where major_record_format  =  \"cd\" or major_record_format  =  \"dvd\";<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>count the number of orchestras that have cd or dvd as their record format.<|endoftext|><|sql|>select count(*) from orchestra where major_record_format  =  \"cd\" or major_record_format  =  \"dvd\";<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>show the years in which orchestras that have given more than one performance are founded.<|endoftext|><|sql|>select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table conductor, columns = [*,conductor_id,name,age,nationality,year_of_work]\ntable orchestra, columns = [*,orchestra_id,orchestra,conductor_id,record_company,year_of_founded,major_record_format]\ntable performance, columns = [*,performance_id,orchestra_id,type,date,official_ratings_(millions),weekly_rank,share]\ntable show, columns = [*,show_id,performance_id,if_first_show,result,attendance]\nforeign_keys = [conductor.conductor_id,orchestra.orchestra_id,performance.performance_id]\n\nprimary_keys = [orchestra.conductor_id = conductor.conductor_id,performance.orchestra_id = orchestra.orchestra_id,show.performance_id = performance.performance_id]<|endoftext|><|query|>what are years of founding for orchestras that have had more than a single performance?<|endoftext|><|sql|>select year_of_founded from orchestra as t1 join performance as t2 on t1.orchestra_id  =  t2.orchestra_id group by t2.orchestra_id having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many high schoolers are there?<|endoftext|><|sql|>select count(*) from highschooler;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>count the number of high schoolers.<|endoftext|><|sql|>select count(*) from highschooler;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names and grades of each high schooler.<|endoftext|><|sql|>select name ,  grade from highschooler;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names and grades for each high schooler?<|endoftext|><|sql|>select name ,  grade from highschooler;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show all the grades of the high schoolers.<|endoftext|><|sql|>select grade from highschooler;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what is the grade of each high schooler?<|endoftext|><|sql|>select grade from highschooler;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what grade is kyle in?<|endoftext|><|sql|>select grade from highschooler where name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>return the grade for the high schooler named kyle.<|endoftext|><|sql|>select grade from highschooler where name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of all high schoolers in grade 10.<|endoftext|><|sql|>select name from highschooler where grade  =  10;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of all high schoolers in grade 10?<|endoftext|><|sql|>select name from highschooler where grade  =  10;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the id of the high schooler named kyle.<|endoftext|><|sql|>select id from highschooler where name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what is kyle's id?<|endoftext|><|sql|>select id from highschooler where name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many high schoolers are there in grade 9 or 10?<|endoftext|><|sql|>select count(*) from highschooler where grade  =  9 or grade  =  10;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>count the number of high schoolers in grades 9 or 10.<|endoftext|><|sql|>select count(*) from highschooler where grade  =  9 or grade  =  10;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the number of high schoolers for each grade.<|endoftext|><|sql|>select grade ,  count(*) from highschooler group by grade;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many high schoolers are in each grade?<|endoftext|><|sql|>select grade ,  count(*) from highschooler group by grade;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>which grade has the most high schoolers?<|endoftext|><|sql|>select grade from highschooler group by grade order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>return the grade that has the greatest number of high schoolers.<|endoftext|><|sql|>select grade from highschooler group by grade order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show me all grades that have at least 4 students.<|endoftext|><|sql|>select grade from highschooler group by grade having count(*)  >=  4;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>which grades have 4 or more high schoolers?<|endoftext|><|sql|>select grade from highschooler group by grade having count(*)  >=  4;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the student ids and numbers of friends corresponding to each.<|endoftext|><|sql|>select student_id ,  count(*) from friend group by student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many friends does each student have?<|endoftext|><|sql|>select student_id ,  count(*) from friend group by student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of high school students and their corresponding number of friends.<|endoftext|><|sql|>select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of the high schoolers and how many friends does each have?<|endoftext|><|sql|>select t2.name ,  count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what is the name of the high schooler who has the greatest number of friends?<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>return the name of the high school student with the most friends.<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of high schoolers who have at least 3 friends.<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of high schoolers who have 3 or more friends?<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  3;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of all of the high schooler kyle's friends.<|endoftext|><|sql|>select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>return the names of friends of the high school student kyle.<|endoftext|><|sql|>select t3.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id join highschooler as t3 on t1.friend_id  =  t3.id where t2.name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many friends does the high school student kyle have?<|endoftext|><|sql|>select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>count the number of friends kyle has.<|endoftext|><|sql|>select count(*) from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show ids of all students who do not have any friends.<|endoftext|><|sql|>select id from highschooler except select student_id from friend;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the ids of high school students who do not have friends?<|endoftext|><|sql|>select id from highschooler except select student_id from friend;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show names of all high school students who do not have any friends.<|endoftext|><|sql|>select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of students who have no friends?<|endoftext|><|sql|>select name from highschooler except select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the ids of high schoolers who have friends and are also liked by someone else.<|endoftext|><|sql|>select student_id from friend intersect select liked_id from likes;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the ids of students who both have friends and are liked?<|endoftext|><|sql|>select student_id from friend intersect select liked_id from likes;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show name of all students who have some friends and also are liked by someone else.<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of high schoolers who both have friends and are liked?<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id intersect select t2.name from likes as t1 join highschooler as t2 on t1.liked_id  =  t2.id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>count the number of likes for each student id.<|endoftext|><|sql|>select student_id ,  count(*) from likes group by student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many likes correspond to each student id?<|endoftext|><|sql|>select student_id ,  count(*) from likes group by student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of high schoolers who have likes, and numbers of likes for each.<|endoftext|><|sql|>select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of high schoolers who have likes, and how many likes does each have?<|endoftext|><|sql|>select t2.name ,  count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what is the name of the high schooler who has the greatest number of likes?<|endoftext|><|sql|>select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>give the name of the student with the most likes.<|endoftext|><|sql|>select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of students who have at least 2 likes.<|endoftext|><|sql|>select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of students who have 2 or more likes?<|endoftext|><|sql|>select t2.name from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id group by t1.student_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>show the names of students who have a grade higher than 5 and have at least 2 friends.<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what are the names of high schoolers who have a grade of over 5 and have 2 or more friends?<|endoftext|><|sql|>select t2.name from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.grade  >  5 group by t1.student_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>how many likes does kyle have?<|endoftext|><|sql|>select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>return the number of likes that the high schooler named kyle has.<|endoftext|><|sql|>select count(*) from likes as t1 join highschooler as t2 on t1.student_id  =  t2.id where t2.name  =  \"kyle\";<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>find the average grade of all students who have some friends.<|endoftext|><|sql|>select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id);<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what is the average grade of students who have friends?<|endoftext|><|sql|>select avg(grade) from highschooler where id in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id);<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>find the minimum grade of students who have no friends.<|endoftext|><|sql|>select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id);<|endoftext|>"},
{"input_text":"<|schema|>table friend, columns = [*,student_id,friend_id]\ntable highschooler, columns = [*,id,name,grade]\ntable likes, columns = [*,student_id,liked_id]\nforeign_keys = [highschooler.id,friend.student_id,likes.student_id]\n\nprimary_keys = [friend.friend_id = highschooler.id,friend.student_id = highschooler.id,likes.student_id = highschooler.id,likes.liked_id = highschooler.id]<|endoftext|><|query|>what is the lowest grade of students who do not have any friends?<|endoftext|><|sql|>select min(grade) from highschooler where id not in (select t1.student_id from friend as t1 join highschooler as t2 on t1.student_id  =  t2.id);<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which states have both owners and professionals living there?<|endoftext|><|sql|>select state from owners intersect select state from professionals;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the states where both owners and professionals live.<|endoftext|><|sql|>select state from owners intersect select state from professionals;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what is the average age of the dogs who have gone through any treatments?<|endoftext|><|sql|>select avg(age) from dogs where dog_id in ( select dog_id from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the average age of the dogs who went through treatments.<|endoftext|><|sql|>select avg(age) from dogs where dog_id in ( select dog_id from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which professionals live in the state of indiana or have done treatment on more than 2 treatments? list his or her id, last name and cell phone.<|endoftext|><|sql|>select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the id, last name and cell phone of the professionals who live in the state of indiana or have performed more than two treatments.<|endoftext|><|sql|>select professional_id ,  last_name ,  cell_number from professionals where state  =  'indiana' union select t1.professional_id ,  t1.last_name ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >  2;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which dogs have not cost their owner more than 1000 for treatment ? list the dog names .<|endoftext|><|sql|>select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the names of the dogs for which the owner has not spend more than 1000 for treatment ?<|endoftext|><|sql|>select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which first names are used for professionals or owners but are not used as dog names?<|endoftext|><|sql|>select first_name from professionals union select first_name from owners except select name from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the first names that are used for professionals or owners but are not used as dog names.<|endoftext|><|sql|>select first_name from professionals union select first_name from owners except select name from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which professional did not operate any treatment on dogs? list the professional's id, role and email.<|endoftext|><|sql|>select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>give me the id, role and email of the professionals who did not perform any treatment on dogs.<|endoftext|><|sql|>select professional_id ,  role_code ,  email_address from professionals except select t1.professional_id ,  t1.role_code ,  t1.email_address from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which owner owns the most dogs? list the owner id, first name and last name.<|endoftext|><|sql|>select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>return the owner id, first name and last name of the owner who has the most dogs.<|endoftext|><|sql|>select t1.owner_id ,  t2.first_name ,  t2.last_name from dogs as t1 join owners as t2 on t1.owner_id  =  t2.owner_id group by t1.owner_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which professionals have done at least two treatments? list the professional's id, role, and first name.<|endoftext|><|sql|>select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the id, role, and first name of the professionals who have performed two or more treatments?<|endoftext|><|sql|>select t1.professional_id ,  t1.role_code ,  t1.first_name from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what is the name of the breed with the most dogs?<|endoftext|><|sql|>select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which breed do the most dogs have? give me the breed name.<|endoftext|><|sql|>select t1.breed_name from breeds as t1 join dogs as t2 on t1.breed_code  =  t2.breed_code group by t1.breed_name order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which owner has paid for the most treatments on his or her dogs? list the owner id and last name.<|endoftext|><|sql|>select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.<|endoftext|><|sql|>select t1.owner_id ,  t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what is the description of the treatment type that costs the least money in total?<|endoftext|><|sql|>select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>give me the description of the treatment type whose total cost is the lowest.<|endoftext|><|sql|>select t1.treatment_type_description from treatment_types as t1 join treatments as t2 on t1.treatment_type_code  =  t2.treatment_type_code group by t1.treatment_type_code order by sum(cost_of_treatment) asc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which owner has paid the largest amount of money in total for their dogs? show the owner id and zip code.<|endoftext|><|sql|>select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the owner id and zip code of the owner who spent the most money in total for his or her dogs.<|endoftext|><|sql|>select t1.owner_id ,  t1.zip_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id join treatments as t3 on t2.dog_id  =  t3.dog_id group by t1.owner_id order by sum(t3.cost_of_treatment) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which professionals have done at least two types of treatments? list the professional id and cell phone.<|endoftext|><|sql|>select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the id and cell phone of the professionals who operate two or more types of treatments.<|endoftext|><|sql|>select t1.professional_id ,  t1.cell_number from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id group by t1.professional_id having count(*)  >=  2;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the first name and last name of the professionals who have done treatment with cost below average?<|endoftext|><|sql|>select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which professionals have operated a treatment that costs less than the average? give me theor first names and last names.<|endoftext|><|sql|>select distinct t1.first_name ,  t1.last_name from professionals as t1 join treatments as t2 where cost_of_treatment  <  ( select avg(cost_of_treatment) from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the date of each treatment, together with the first name of the professional who operated it.<|endoftext|><|sql|>select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the date and the operating professional's first name of each treatment?<|endoftext|><|sql|>select t1.date_of_treatment ,  t2.first_name from treatments as t1 join professionals as t2 on t1.professional_id  =  t2.professional_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the cost of each treatment and the corresponding treatment type description.<|endoftext|><|sql|>select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the cost and treatment type description of each treatment?<|endoftext|><|sql|>select t1.cost_of_treatment ,  t2.treatment_type_description from treatments as t1 join treatment_types as t2 on t1.treatment_type_code  =  t2.treatment_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list each owner's first name, last name, and the size of his for her dog.<|endoftext|><|sql|>select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are each owner's first name, last name, and the size of their dog?<|endoftext|><|sql|>select t1.first_name ,  t1.last_name ,  t2.size_code from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list pairs of the owner's first name and the dogs's name.<|endoftext|><|sql|>select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are each owner's first name and their dogs's name?<|endoftext|><|sql|>select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the names of the dogs of the rarest breed and the treatment dates of them.<|endoftext|><|sql|>select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which dogs are of the rarest breed? show their names and treatment dates.<|endoftext|><|sql|>select t1.name ,  t2.date_of_treatment from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id where t1.breed_code  =  ( select breed_code from dogs group by breed_code order by count(*) asc limit 1 );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which dogs are owned by someone who lives in virginia? list the owner's first name and the dog's name.<|endoftext|><|sql|>select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the first names of owners living in virginia and the names of dogs they own.<|endoftext|><|sql|>select t1.first_name ,  t2.name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t1.state  =  'virginia';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the arriving date and the departing date of the dogs who have gone through a treatment?<|endoftext|><|sql|>select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the arriving date and the departing date of the dogs that received a treatment.<|endoftext|><|sql|>select distinct t1.date_arrived ,  t1.date_departed from dogs as t1 join treatments as t2 on t1.dog_id  =  t2.dog_id;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the last name of the owner owning the youngest dog.<|endoftext|><|sql|>select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>who owns the youngest dog? give me his or her last name.<|endoftext|><|sql|>select t1.last_name from owners as t1 join dogs as t2 on t1.owner_id  =  t2.owner_id where t2.age  =  ( select max(age) from dogs );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the emails of the professionals who live in the state of hawaii or the state of wisconsin.<|endoftext|><|sql|>select email_address from professionals where state  =  'hawaii' or state  =  'wisconsin';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the emails of the professionals living in either the state of hawaii or the state of wisconsin?<|endoftext|><|sql|>select email_address from professionals where state  =  'hawaii' or state  =  'wisconsin';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the arriving date and the departing date of all the dogs?<|endoftext|><|sql|>select date_arrived ,  date_departed from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the arrival date and the departure date for all the dogs.<|endoftext|><|sql|>select date_arrived ,  date_departed from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how many dogs went through any treatments?<|endoftext|><|sql|>select count(distinct dog_id) from treatments;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>count the number of dogs that went through a treatment.<|endoftext|><|sql|>select count(distinct dog_id) from treatments;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how many professionals have performed any treatment to dogs?<|endoftext|><|sql|>select count(distinct professional_id) from treatments;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the number of professionals who have ever treated dogs.<|endoftext|><|sql|>select count(distinct professional_id) from treatments;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which professionals live in a city containing the substring 'west'? list his or her role, street, city and state.<|endoftext|><|sql|>select role_code ,  street ,  city ,  state from professionals where city like '%west%';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the role, street, city and state of the professionals living in a city that contains the substring 'west'.<|endoftext|><|sql|>select role_code ,  street ,  city ,  state from professionals where city like '%west%';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>which owners live in the state whose name contains the substring 'north'? list his first name, last name and email.<|endoftext|><|sql|>select first_name ,  last_name ,  email_address from owners where state like '%north%';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>return the first name, last name and email of the owners living in a state whose name contains the substring 'north'.<|endoftext|><|sql|>select first_name ,  last_name ,  email_address from owners where state like '%north%';<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how many dogs have an age below the average?<|endoftext|><|sql|>select count(*) from dogs where age  <  ( select avg(age) from dogs );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>count the number of dogs of an age below the average.<|endoftext|><|sql|>select count(*) from dogs where age  <  ( select avg(age) from dogs );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how much does the most recent treatment cost?<|endoftext|><|sql|>select cost_of_treatment from treatments order by date_of_treatment desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>show me the cost of the most recently performed treatment.<|endoftext|><|sql|>select cost_of_treatment from treatments order by date_of_treatment desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how many dogs have not gone through any treatment?<|endoftext|><|sql|>select count(*) from dogs where dog_id not in ( select dog_id from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>tell me the number of dogs that have not received any treatment .<|endoftext|><|sql|>select count(*) from dogs where dog_id not in ( select dog_id from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how many owners temporarily do not have any dogs?<|endoftext|><|sql|>select count(*) from owners where owner_id not in ( select owner_id from dogs );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the number of owners who do not own any dogs at this moment.<|endoftext|><|sql|>select count(*) from owners where owner_id not in ( select owner_id from dogs );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how many professionals did not operate any treatment on dogs?<|endoftext|><|sql|>select count(*) from professionals where professional_id not in ( select professional_id from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the number of professionals who have not treated any dogs.<|endoftext|><|sql|>select count(*) from professionals where professional_id not in ( select professional_id from treatments );<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.<|endoftext|><|sql|>select name ,  age ,  weight from dogs where abandoned_yn  =  1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the dog name, age and weight of the dogs that were abandoned? note that 1 stands for yes, and 0 stands for no in the tables.<|endoftext|><|sql|>select name ,  age ,  weight from dogs where abandoned_yn  =  1;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what is the average age of all the dogs?<|endoftext|><|sql|>select avg(age) from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>compute the average age of all the dogs.<|endoftext|><|sql|>select avg(age) from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what is the age of the oldest dog?<|endoftext|><|sql|>select max(age) from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>tell me the age of the oldest dog.<|endoftext|><|sql|>select max(age) from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how much does each charge type costs? list both charge type and amount.<|endoftext|><|sql|>select charge_type ,  charge_amount from charges;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list each charge type and its amount.<|endoftext|><|sql|>select charge_type ,  charge_amount from charges;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>how much does the most expensive charge type costs?<|endoftext|><|sql|>select max(charge_amount) from charges;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what is the charge amount of the most expensive charge type?<|endoftext|><|sql|>select max(charge_amount) from charges;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the email, cell phone and home phone of all the professionals.<|endoftext|><|sql|>select email_address ,  cell_number ,  home_phone from professionals;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are the email, cell phone and home phone of each professional?<|endoftext|><|sql|>select email_address ,  cell_number ,  home_phone from professionals;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are all the possible breed type and size type combinations?<|endoftext|><|sql|>select distinct breed_code ,  size_code from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>find the distinct breed type and size type combinations for dogs.<|endoftext|><|sql|>select distinct breed_code ,  size_code from dogs;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>list the first name of all the professionals along with the description of the treatment they have done.<|endoftext|><|sql|>select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table breeds, columns = [*,breed_code,breed_name]\ntable charges, columns = [*,charge_id,charge_type,charge_amount]\ntable dogs, columns = [*,dog_id,owner_id,abandoned_yn,breed_code,size_code,name,age,date_of_birth,gender,weight,date_arrived,date_adopted,date_departed]\ntable owners, columns = [*,owner_id,first_name,last_name,street,city,state,zip_code,email_address,home_phone,cell_number]\ntable professionals, columns = [*,professional_id,role_code,first_name,street,city,state,zip_code,last_name,email_address,home_phone,cell_number]\ntable sizes, columns = [*,size_code,size_description]\ntable treatment_types, columns = [*,treatment_type_code,treatment_type_description]\ntable treatments, columns = [*,treatment_id,dog_id,professional_id,treatment_type_code,date_of_treatment,cost_of_treatment]\nforeign_keys = [breeds.breed_code,charges.charge_id,sizes.size_code,treatment_types.treatment_type_code,owners.owner_id,dogs.dog_id,professionals.professional_id,treatments.treatment_id]\n\nprimary_keys = [dogs.owner_id = owners.owner_id,dogs.owner_id = owners.owner_id,dogs.size_code = sizes.size_code,dogs.breed_code = breeds.breed_code,treatments.dog_id = dogs.dog_id,treatments.professional_id = professionals.professional_id,treatments.treatment_type_code = treatment_types.treatment_type_code]<|endoftext|><|query|>what are each professional's first name and description of the treatment they have performed?<|endoftext|><|sql|>select distinct t1.first_name ,  t3.treatment_type_description from professionals as t1 join treatments as t2 on t1.professional_id  =  t2.professional_id join treatment_types as t3 on t2.treatment_type_code  =  t3.treatment_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>how many singers are there?<|endoftext|><|sql|>select count(*) from singer;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what is the count of singers?<|endoftext|><|sql|>select count(*) from singer;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>list the name of singers in ascending order of net worth.<|endoftext|><|sql|>select name from singer order by net_worth_millions asc;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the names of singers ordered by ascending net worth?<|endoftext|><|sql|>select name from singer order by net_worth_millions asc;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the birth year and citizenship of singers?<|endoftext|><|sql|>select birth_year ,  citizenship from singer;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the birth years and citizenships of the singers?<|endoftext|><|sql|>select birth_year ,  citizenship from singer;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>list the name of singers whose citizenship is not \"france\".<|endoftext|><|sql|>select name from singer where citizenship != \"france\";<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the names of the singers who are not french citizens?<|endoftext|><|sql|>select name from singer where citizenship != \"france\";<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show the name of singers whose birth year is either 1948 or 1949?<|endoftext|><|sql|>select name from singer where birth_year  =  1948 or birth_year  =  1949;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the names of the singers whose birth years are either 1948 or 1949?<|endoftext|><|sql|>select name from singer where birth_year  =  1948 or birth_year  =  1949;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what is the name of the singer with the largest net worth?<|endoftext|><|sql|>select name from singer order by net_worth_millions desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what is the name of the singer who is worth the most?<|endoftext|><|sql|>select name from singer order by net_worth_millions desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show different citizenship of singers and the number of singers of each citizenship.<|endoftext|><|sql|>select citizenship ,  count(*) from singer group by citizenship;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>for each citizenship, how many singers are from that country?<|endoftext|><|sql|>select citizenship ,  count(*) from singer group by citizenship;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>please show the most common citizenship of singers.<|endoftext|><|sql|>select citizenship from singer group by citizenship order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what is the most common singer citizenship ?<|endoftext|><|sql|>select citizenship from singer group by citizenship order by count(*) desc limit 1;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show different citizenships and the maximum net worth of singers of each citizenship.<|endoftext|><|sql|>select citizenship ,  max(net_worth_millions) from singer group by citizenship;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>for each citizenship, what is the maximum net worth?<|endoftext|><|sql|>select citizenship ,  max(net_worth_millions) from singer group by citizenship;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show titles of songs and names of singers.<|endoftext|><|sql|>select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the song titles and singer names?<|endoftext|><|sql|>select t2.title ,  t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show distinct names of singers that have songs with sales more than 300000.<|endoftext|><|sql|>select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the different names of the singers that have sales more than 300000?<|endoftext|><|sql|>select distinct t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id where t2.sales  >  300000;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show the names of singers that have more than one song.<|endoftext|><|sql|>select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the names of the singers that have more than one songs?<|endoftext|><|sql|>select t1.name from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name having count(*)  >  1;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show the names of singers and the total sales of their songs.<|endoftext|><|sql|>select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>for each singer name, what is the total sales for their songs?<|endoftext|><|sql|>select t1.name ,  sum(t2.sales) from singer as t1 join song as t2 on t1.singer_id  =  t2.singer_id group by t1.name;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>list the name of singers that do not have any song.<|endoftext|><|sql|>select name from singer where singer_id not in (select singer_id from song);<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what is the sname of every sing that does not have any song?<|endoftext|><|sql|>select name from singer where singer_id not in (select singer_id from song);<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>show the citizenship shared by singers with birth year before 1945 and after 1955.<|endoftext|><|sql|>select citizenship from singer where birth_year  <  1945 intersect select citizenship from singer where birth_year  >  1955;<|endoftext|>"},
{"input_text":"<|schema|>table singer, columns = [*,singer_id,name,birth_year,net_worth_millions,citizenship]\ntable song, columns = [*,song_id,title,singer_id,sales,highest_position]\nforeign_keys = [singer.singer_id,song.song_id]\n\nprimary_keys = [song.singer_id = singer.singer_id]<|endoftext|><|query|>what are the citizenships that are shared by singers with a birth year before 1945 and after 1955?<|endoftext|><|sql|>select citizenship from singer where birth_year  <  1945 intersect select citizenship from singer where birth_year  >  1955;<|endoftext|>"},
{"input_text":"<|schema|>table other_available_features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\ntable other_property_features, columns = [*,property_id,feature_id,property_feature_description]\ntable properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\ntable ref_feature_types, columns = [*,feature_type_code,feature_type_name]\ntable ref_property_types, columns = [*,property_type_code,property_type_description]\nforeign_keys = [ref_feature_types.feature_type_code,ref_property_types.property_type_code,other_available_features.feature_id,properties.property_id]\n\nprimary_keys = [other_available_features.feature_type_code = ref_feature_types.feature_type_code,properties.property_type_code = ref_property_types.property_type_code,other_property_features.property_id = properties.property_id,other_property_features.feature_id = other_available_features.feature_id]<|endoftext|><|query|>how many available features are there in total?<|endoftext|><|sql|>select count(*) from other_available_features;<|endoftext|>"},
{"input_text":"<|schema|>table other_available_features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\ntable other_property_features, columns = [*,property_id,feature_id,property_feature_description]\ntable properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\ntable ref_feature_types, columns = [*,feature_type_code,feature_type_name]\ntable ref_property_types, columns = [*,property_type_code,property_type_description]\nforeign_keys = [ref_feature_types.feature_type_code,ref_property_types.property_type_code,other_available_features.feature_id,properties.property_id]\n\nprimary_keys = [other_available_features.feature_type_code = ref_feature_types.feature_type_code,properties.property_type_code = ref_property_types.property_type_code,other_property_features.property_id = properties.property_id,other_property_features.feature_id = other_available_features.feature_id]<|endoftext|><|query|>what is the feature type name of feature aircon?<|endoftext|><|sql|>select t2.feature_type_name from other_available_features as t1 join ref_feature_types as t2 on t1.feature_type_code  =  t2.feature_type_code where t1.feature_name  =  \"aircon\";<|endoftext|>"},
{"input_text":"<|schema|>table other_available_features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\ntable other_property_features, columns = [*,property_id,feature_id,property_feature_description]\ntable properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\ntable ref_feature_types, columns = [*,feature_type_code,feature_type_name]\ntable ref_property_types, columns = [*,property_type_code,property_type_description]\nforeign_keys = [ref_feature_types.feature_type_code,ref_property_types.property_type_code,other_available_features.feature_id,properties.property_id]\n\nprimary_keys = [other_available_features.feature_type_code = ref_feature_types.feature_type_code,properties.property_type_code = ref_property_types.property_type_code,other_property_features.property_id = properties.property_id,other_property_features.feature_id = other_available_features.feature_id]<|endoftext|><|query|>show the property type descriptions of properties belonging to that code.<|endoftext|><|sql|>select t2.property_type_description from properties as t1 join ref_property_types as t2 on t1.property_type_code  =  t2.property_type_code group by t1.property_type_code;<|endoftext|>"},
{"input_text":"<|schema|>table other_available_features, columns = [*,feature_id,feature_type_code,feature_name,feature_description]\ntable other_property_features, columns = [*,property_id,feature_id,property_feature_description]\ntable properties, columns = [*,property_id,property_type_code,date_on_market,date_sold,property_name,property_address,room_count,vendor_requested_price,buyer_offered_price,agreed_selling_price,apt_feature_1,apt_feature_2,apt_feature_3,fld_feature_1,fld_feature_2,fld_feature_3,hse_feature_1,hse_feature_2,hse_feature_3,oth_feature_1,oth_feature_2,oth_feature_3,shp_feature_1,shp_feature_2,shp_feature_3,other_property_details]\ntable ref_feature_types, columns = [*,feature_type_code,feature_type_name]\ntable ref_property_types, columns = [*,property_type_code,property_type_description]\nforeign_keys = [ref_feature_types.feature_type_code,ref_property_types.property_type_code,other_available_features.feature_id,properties.property_id]\n\nprimary_keys = [other_available_features.feature_type_code = ref_feature_types.feature_type_code,properties.property_type_code = ref_property_types.property_type_code,other_property_features.property_id = properties.property_id,other_property_features.feature_id = other_available_features.feature_id]<|endoftext|><|query|>what are the names of properties that are either houses or apartments with more than 1 room?<|endoftext|><|sql|>select property_name from properties where property_type_code  =  \"house\" union select property_name from properties where property_type_code  =  \"apartment\" and room_count  >  1;<|endoftext|>"}]}
