[{"data":"Question: How many singers do we have?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT count(*) FROM singer"},{"data":"Question: What is the total number of singers?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT count(*) FROM singer"},{"data":"Question: Show name, country, age for all singers ordered by age from the oldest to the youngest.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name ,  country ,  age FROM singer ORDER BY age DESC"},{"data":"Question: What are the names, countries, and ages for every singer in descending order of age?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name ,  country ,  age FROM singer ORDER BY age DESC"},{"data":"Question: What is the average, minimum, and maximum age of all singers from France?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"},{"data":"Question: What is the average, minimum, and maximum age for all French singers?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT avg(age) ,  min(age) ,  max(age) FROM singer WHERE country  =  'France'"},{"data":"Question: Show the name and the release year of the song by the youngest singer.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"},{"data":"Question: What are the names and release years for all the songs of the youngest singer?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT song_name ,  song_release_year FROM singer ORDER BY age LIMIT 1"},{"data":"Question: What are all distinct countries where singers above age 20 are from?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT DISTINCT country FROM singer WHERE age  >  20"},{"data":"Question: What are  the different countries with singers above age 20?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT DISTINCT country FROM singer WHERE age  >  20"},{"data":"Question: Show all countries and the number of singers in each country.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT country ,  count(*) FROM singer GROUP BY country"},{"data":"Question: How many singers are from each country?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT country ,  count(*) FROM singer GROUP BY country"},{"data":"Question: List all song names by singers above the average age.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"},{"data":"Question: What are all the song names by singers who are older than average?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT song_name FROM singer WHERE age  >  (SELECT avg(age) FROM singer)"},{"data":"Question: Show location and name for all stadiums with a capacity between 5000 and 10000.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"},{"data":"Question: What are the locations and names of all stations with capacity between 5000 and 10000?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT LOCATION ,  name FROM stadium WHERE capacity BETWEEN 5000 AND 10000"},{"data":"Question: What is the maximum capacity and the average of all stadiums ?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: select max(capacity), average from stadium"},{"data":"Question: What is the average and maximum capacities for all stadiums ?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: select avg(capacity) ,  max(capacity) from stadium"},{"data":"Question: What is the name and capacity for the stadium with highest average attendance?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"},{"data":"Question: What is the name and capacity for the stadium with the highest average attendance?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name ,  capacity FROM stadium ORDER BY average DESC LIMIT 1"},{"data":"Question: How many concerts are there in year 2014 or 2015?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"},{"data":"Question: How many concerts occurred in 2014 or 2015?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT count(*) FROM concert WHERE YEAR  =  2014 OR YEAR  =  2015"},{"data":"Question: Show the stadium name and the number of concerts in each stadium.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"},{"data":"Question: For each stadium, how many concerts play there?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  count(*) FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id GROUP BY T1.stadium_id"},{"data":"Question: Show the stadium name and capacity with most number of concerts in year 2014 or after.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  T2.capacity FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  >=  2014 GROUP BY T2.stadium_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the name and capacity of the stadium with the most concerts after 2013 ?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: select t2.name ,  t2.capacity from concert as t1 join stadium as t2 on t1.stadium_id  =  t2.stadium_id where t1.year  >  2013 group by t2.stadium_id order by count(*) desc limit 1"},{"data":"Question: Which year has most number of concerts?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the year that had the most concerts?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT YEAR FROM concert GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show the stadium names without any concert.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"},{"data":"Question: What are the names of the stadiums without any concerts?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name FROM stadium WHERE stadium_id NOT IN (SELECT stadium_id FROM concert)"},{"data":"Question: Show countries where a singer above age 40 and a singer below 30 are from.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT country FROM singer WHERE age  >  40 INTERSECT SELECT country FROM singer WHERE age  <  30"},{"data":"Question: Show names for all stadiums except for stadiums having a concert in year 2014.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"},{"data":"Question: What are the names of all stadiums that did not have a concert in 2014?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name FROM stadium EXCEPT SELECT T2.name FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.year  =  2014"},{"data":"Question: Show the name and theme for all concerts and the number of singers in each concert.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.concert_name ,  T2.theme ,  count(*) FROM singer_in_concert AS T1 JOIN concert AS T2 ON T1.concert_id  =  T2.concert_id GROUP BY T2.concert_id"},{"data":"Question: What are the names , themes , and number of singers for every concert ?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: select t2.concert_name ,  t2.theme ,  count(*) from singer_in_concert as t1 join concert as t2 on t1.concert_id  =  t2.concert_id group by t2.concert_id"},{"data":"Question: List singer names and number of concerts for each singer.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"},{"data":"Question: What are the names of the singers and number of concerts for each person?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  count(*) FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id GROUP BY T2.singer_id"},{"data":"Question: List all singer names in concerts in year 2014.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"},{"data":"Question: What are the names of the singers who performed in a concert in 2014?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name FROM singer_in_concert AS T1 JOIN singer AS T2 ON T1.singer_id  =  T2.singer_id JOIN concert AS T3 ON T1.concert_id  =  T3.concert_id WHERE T3.year  =  2014"},{"data":"Question: what is the name and nation of the singer who have a song having 'Hey' in its name?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"},{"data":"Question: What is the name and country of origin of every singer who has a song with the word 'Hey' in its title?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT name ,  country FROM singer WHERE song_name LIKE '%Hey%'"},{"data":"Question: Find the name and location of the stadiums which some concerts happened in the years of both 2014 and 2015.\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"},{"data":"Question: What are the names and locations of the stadiums that had concerts that occurred in both 2014 and 2015?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2014 INTERSECT SELECT T2.name ,  T2.location FROM concert AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.stadium_id WHERE T1.Year  =  2015"},{"data":"Question: Find the number of concerts happened in the stadium with the highest capacity .\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"},{"data":"Question: What are the number of concerts that occurred in the stadium with the largest capacity ?\nSchema: 'stadium' [ Primary Key: 'Stadium_ID' int, 'Location' text, 'Name' text, 'Capacity' int, 'Highest' int, 'Lowest' int, 'Average' int];\n'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Country' text, 'Song_Name' text, 'Song_release_year' text, 'Age' int, 'Is_male' others];\n'concert' [ Primary Key: 'concert_ID' int, 'concert_Name' text, 'Theme' text, 'Stadium_ID' text, 'Year' text, Foreign Key: 'Stadium_ID' text from 'concert' 'Stadium_ID'];\n'singer_in_concert' [ Primary Key: 'concert_ID' int, Primary Key: 'Singer_ID' text, Foreign Key: 'concert_ID' int from 'singer_in_concert' 'concert_ID', Foreign Key: 'Singer_ID' text from 'singer_in_concert' 'Singer_ID'];\n\nAnswer: select count(*) from concert where stadium_id = (select stadium_id from stadium order by capacity desc limit 1)"},{"data":"Question: Find the number of pets whose weight is heavier than 10.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) FROM pets WHERE weight  >  10"},{"data":"Question: How many pets have a greater weight than 10?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) FROM pets WHERE weight  >  10"},{"data":"Question: Find the weight of the youngest dog.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT weight FROM pets ORDER BY pet_age LIMIT 1"},{"data":"Question: How much does the youngest dog weigh?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT weight FROM pets ORDER BY pet_age LIMIT 1"},{"data":"Question: Find the maximum weight for each type of pet. List the maximum weight and pet type.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT max(weight) ,  petType FROM pets GROUP BY petType"},{"data":"Question: List the maximum weight and type for each type of pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT max(weight) ,  petType FROM pets GROUP BY petType"},{"data":"Question: Find number of pets owned by students who are older than 20.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"},{"data":"Question: How many pets are owned by students that have an age greater than 20?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.age  >  20"},{"data":"Question: Find the number of dog pets that are raised by female students (with sex F).\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"},{"data":"Question: How many dog pets are raised by female students?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T2.petid  =  T3.petid WHERE T1.sex  =  'F' AND T3.pettype  =  'dog'"},{"data":"Question: Find the number of distinct type of pets.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(DISTINCT pettype) FROM pets"},{"data":"Question: How many different types of pet are there?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(DISTINCT pettype) FROM pets"},{"data":"Question: Find the first name of students who have cat or dog pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"},{"data":"Question: What are the first names of every student who has a cat or dog as a pet?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT DISTINCT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' OR T3.pettype  =  'dog'"},{"data":"Question: Find the first name of students who have both cat and dog pets .\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'cat' intersect select t1.fname from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid join pets as t3 on t3.petid  =  t2.petid where t3.pettype  =  'dog'"},{"data":"Question: What are the students' first names who have both cats and dogs as pets?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat' INTERSECT SELECT T1.Fname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog'"},{"data":"Question: Find the major and age of students who do not have a cat pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"},{"data":"Question: What major is every student who does not own a cat as a pet, and also how old are they?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT major ,  age FROM student WHERE stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"},{"data":"Question: Find the id of students who do not have a cat pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"},{"data":"Question: What are the ids of the students who do not own cats as pets?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT stuid FROM student EXCEPT SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat'"},{"data":"Question: Find the first name and age of students who have a dog but do not have a cat as a pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"},{"data":"Question: What is the first name of every student who has a dog but does not have a cat?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'dog' AND T1.stuid NOT IN (SELECT T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pettype  =  'cat')"},{"data":"Question: Find the type and weight of the youngest pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"},{"data":"Question: What type of pet is the youngest animal, and how much does it weigh?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT pettype ,  weight FROM pets ORDER BY pet_age LIMIT 1"},{"data":"Question: Find the id and weight of all pets whose age is older than 1.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT petid ,  weight FROM pets WHERE pet_age  >  1"},{"data":"Question: What is the id and weight of every pet who is older than 1?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT petid ,  weight FROM pets WHERE pet_age  >  1"},{"data":"Question: Find the average and maximum age for each type of pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"},{"data":"Question: What is the average and maximum age for each pet type?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT avg(pet_age) ,  max(pet_age) ,  pettype FROM pets GROUP BY pettype"},{"data":"Question: Find the average weight for each pet type.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"},{"data":"Question: What is the average weight for each type of pet?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT avg(weight) ,  pettype FROM pets GROUP BY pettype"},{"data":"Question: Find the first name and age of students who have a pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"},{"data":"Question: What are the different first names and ages of the students who do have pets?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT DISTINCT T1.fname ,  T1.age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid"},{"data":"Question: Find the id of the pet owned by student whose last name is \u2018Smith\u2019.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"},{"data":"Question: What is the id of the pet owned by the student whose last name is 'Smith'?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T2.petid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid WHERE T1.Lname  =  'Smith'"},{"data":"Question: Find the number of pets for each student who has any pet and student id.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT count(*) ,  T1.stuid FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid"},{"data":"Question: For students who have pets , how many pets does each student have ? list their ids instead of names .\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: select count(*) ,  t1.stuid from student as t1 join has_pet as t2 on t1.stuid  =  t2.stuid group by t1.stuid"},{"data":"Question: Find the first name and gender of student who have more than one pet.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"},{"data":"Question: What is the first name and gender of the all the students who have more than one pet?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.fname ,  T1.sex FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid GROUP BY T1.stuid HAVING count(*)  >  1"},{"data":"Question: Find the last name of the student who has a cat that is age 3.\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"},{"data":"Question: What is the last name of the student who has a cat that is 3 years old?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: SELECT T1.lname FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid  =  T2.stuid JOIN pets AS T3 ON T3.petid  =  T2.petid WHERE T3.pet_age  =  3 AND T3.pettype  =  'cat'"},{"data":"Question: Find the average age of students who do not have any pet .\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: select avg(age) from student where stuid not in (select stuid from has_pet)"},{"data":"Question: What is the average age for all students who do not own any pets ?\nSchema: 'Student' [ Primary Key: 'StuID' int, 'LName' text, 'Fname' text, 'Age' int, 'Sex' text, 'Major' int, 'Advisor' int, 'city_code' text];\n'Has_Pet' [ 'StuID' int, 'PetID' int, Foreign Key: 'StuID' int from 'Has_Pet' 'StuID', Foreign Key: 'PetID' int from 'Has_Pet' 'PetID'];\n'Pets' [ Primary Key: 'PetID' int, 'PetType' text, 'pet_age' int, 'weight' int];\n\nAnswer: select avg(age) from student where stuid not in (select stuid from has_pet)"},{"data":"Question: How many continents are there?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CONTINENTS;"},{"data":"Question: What is the number of continents?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CONTINENTS;"},{"data":"Question: How many countries does each continent have? List the continent id, continent name and the number of countries.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"},{"data":"Question: For each continent, list its id, name, and how many countries it has?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.ContId ,  T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.Continent GROUP BY T1.ContId;"},{"data":"Question: How many countries are listed?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM COUNTRIES;"},{"data":"Question: How many countries exist?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM COUNTRIES;"},{"data":"Question: How many models does each car maker produce? List maker full name, id and the number.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"},{"data":"Question: What is the full name of each car maker, along with its id and how many models it produces?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.FullName ,  T1.Id ,  count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id;"},{"data":"Question: Which model of the car has the minimum horsepower?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"},{"data":"Question: What is the model of the car with the smallest amount of horsepower?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.horsepower ASC LIMIT 1;"},{"data":"Question: Find the model of the car whose weight is below the average weight.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"},{"data":"Question: What is the model for the car with a weight smaller than the average?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Weight  <  (SELECT avg(Weight) FROM CARS_DATA)"},{"data":"Question: Find the name of the makers that produced some cars in the year of 1970?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"},{"data":"Question: What is the name of the different car makers who produced a car in 1970?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model JOIN CARS_DATA AS T4 ON T3.MakeId  =  T4.id WHERE T4.year  =  '1970';"},{"data":"Question: Find the make and production time of the cars that were produced in the earliest year?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"},{"data":"Question: What is the maker of the carr produced in the earliest year and what year was it?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.Make ,  T1.Year FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Year  =  (SELECT min(YEAR) FROM CARS_DATA);"},{"data":"Question: Which distinct car models are the produced after 1980?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"},{"data":"Question: What are the different models for the cards produced after 1980?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.model  =  T2.model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.id WHERE T3.year  >  1980;"},{"data":"Question: How many car makers are there in each continents? List the continent name and the count.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"},{"data":"Question: What is the name of each continent and how many car makers are there in each one?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Continent ,  count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId  =  T2.continent JOIN car_makers AS T3 ON T2.CountryId  =  T3.Country GROUP BY T1.Continent;"},{"data":"Question: Which of the countries has the most car makers? List the country name.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"},{"data":"Question: What is the name of the country with the most car makers?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.CountryName FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId GROUP BY T1.Country ORDER BY Count(*) DESC LIMIT 1;"},{"data":"Question: How many car models are produced by each maker ? Only list the count and the maker full name .\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select count(*) ,  t2.fullname from model_list as t1 join car_makers as t2 on t1.maker  =  t2.id group by t2.id;"},{"data":"Question: What is the number of car models that are produced by each maker and what is the id and full name of each maker?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT Count(*) ,  T2.FullName ,  T2.id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id GROUP BY T2.id;"},{"data":"Question: What is the accelerate of the car make amc hornet sportabout (sw)?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"},{"data":"Question: How much does the car accelerate that makes amc hornet sportabout (sw)?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Accelerate FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Make  =  'amc hornet sportabout (sw)';"},{"data":"Question: How many car makers are there in france?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"},{"data":"Question: What is the number of makers of care in France?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN COUNTRIES AS T2 ON T1.Country  =  T2.CountryId WHERE T2.CountryName  =  'france';"},{"data":"Question: How many car models are produced in the usa?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"},{"data":"Question: What is the count of the car models produced in the United States?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker  =  T2.Id JOIN COUNTRIES AS T3 ON T2.Country  =  T3.CountryId WHERE T3.CountryName  =  'usa';"},{"data":"Question: What is the average miles per gallon(mpg) of the cars with 4 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"},{"data":"Question: What is the average miles per gallon of all the cards with 4 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(mpg) FROM CARS_DATA WHERE Cylinders  =  4;"},{"data":"Question: What is the smallest weight of the car produced with 8 cylinders on 1974 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select min(weight) from cars_data where cylinders  =  8 and year  =  1974"},{"data":"Question: What is the minimum weight of the car with 8 cylinders produced in 1974 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select min(weight) from cars_data where cylinders  =  8 and year  =  1974"},{"data":"Question: What are all the makers and models?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT Maker ,  Model FROM MODEL_LIST;"},{"data":"Question: What are the makers and models?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT Maker ,  Model FROM MODEL_LIST;"},{"data":"Question: What are the countries having at least one car maker? List name and id.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"},{"data":"Question: What are the names and ids of all countries with at least one car maker?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.CountryName ,  T1.CountryId FROM COUNTRIES AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.CountryId HAVING count(*)  >=  1;"},{"data":"Question: What is the number of the cars with horsepower more than 150?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"},{"data":"Question: What is the number of cars with a horsepower greater than 150?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CARS_DATA WHERE horsepower  >  150;"},{"data":"Question: What is the average weight of cars each year?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"},{"data":"Question: What is the average weight and year for each year?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(Weight) ,  YEAR FROM CARS_DATA GROUP BY YEAR;"},{"data":"Question: Which countries in europe have at least 3 car manufacturers?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"},{"data":"Question: What are the names of all European countries with at least 3 manufacturers?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.CountryName FROM COUNTRIES AS T1 JOIN CONTINENTS AS T2 ON T1.Continent  =  T2.ContId JOIN CAR_MAKERS AS T3 ON T1.CountryId  =  T3.Country WHERE T2.Continent  =  'europe' GROUP BY T1.CountryName HAVING count(*)  >=  3;"},{"data":"Question: What is the maximum horsepower and the make of the car models with 3 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"},{"data":"Question: What is the largest amount of horsepower for the models with 3 cylinders and what make is it?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.horsepower ,  T1.Make FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.cylinders  =  3 ORDER BY T2.horsepower DESC LIMIT 1;"},{"data":"Question: Which model saves the most gasoline? That is to say, have the maximum miles per gallon.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id ORDER BY T2.mpg DESC LIMIT 1;"},{"data":"Question: What is the car model with the highest mpg ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select t1.model from car_names as t1 join cars_data as t2 on t1.makeid  =  t2.id order by t2.mpg desc limit 1;"},{"data":"Question: What is the average horsepower of the cars before 1980?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(horsepower) FROM CARS_DATA WHERE YEAR  <  1980;"},{"data":"Question: What is the average horsepower for all cars produced before 1980 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select avg(horsepower) from cars_data where year  <  1980;"},{"data":"Question: What is the average edispl of the cars of model volvo?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"},{"data":"Question: What is the average edispl for all volvos?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT avg(T2.edispl) FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T1.Model  =  'volvo';"},{"data":"Question: What is the maximum accelerate for different number of cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"},{"data":"Question: What is the maximum accelerate for all the different cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT max(Accelerate) ,  Cylinders FROM CARS_DATA GROUP BY Cylinders;"},{"data":"Question: Which model has the most version(make) of cars?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"},{"data":"Question: What model has the most different versions?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT Model FROM CAR_NAMES GROUP BY Model ORDER BY count(*) DESC LIMIT 1;"},{"data":"Question: How many cars have more than 4 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"},{"data":"Question: What is the number of cars with more than 4 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CARS_DATA WHERE Cylinders  >  4;"},{"data":"Question: how many cars were produced in 1980?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"},{"data":"Question: In 1980, how many cars were made?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CARS_DATA WHERE YEAR  =  1980;"},{"data":"Question: How many car models were produced by the maker with full name American Motor Company?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"},{"data":"Question: What is the number of car models created by the car maker American Motor Company?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker WHERE T1.FullName  =  'American Motor Company';"},{"data":"Question: Which makers designed more than 3 car models? List full name and the id.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"},{"data":"Question: What are the names and ids of all makers with more than 3 models?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.FullName ,  T1.Id FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >  3;"},{"data":"Question: Which distinctive models are produced by maker with the full name General Motors or weighing more than 3500?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"},{"data":"Question: What are the different models created by either the car maker General Motors or weighed more than 3500?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T2.Model FROM CAR_NAMES AS T1 JOIN MODEL_LIST AS T2 ON T1.Model  =  T2.Model JOIN CAR_MAKERS AS T3 ON T2.Maker  =  T3.Id JOIN CARS_DATA AS T4 ON T1.MakeId  =  T4.Id WHERE T3.FullName  =  'General Motors' OR T4.weight  >  3500;"},{"data":"Question: In which years cars were produced weighing no less than 3000 and no more than 4000 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select distinct year from cars_data where weight between 3000 and 4000;"},{"data":"Question: What are the different years in which there were cars produced that weighed less than 4000 and also cars that weighted more than 3000 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select distinct year from cars_data where weight between 3000 and 4000;"},{"data":"Question: What is the horsepower of the car with the largest accelerate?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"},{"data":"Question: What is the horsepower of the car with the greatest accelerate?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.horsepower FROM CARS_DATA AS T1 ORDER BY T1.accelerate DESC LIMIT 1;"},{"data":"Question: For model volvo, how many cylinders does the car with the least accelerate have?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"},{"data":"Question: For a volvo model, how many cylinders does the version with least accelerate have?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.cylinders FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T2.Model  =  'volvo' ORDER BY T1.accelerate ASC LIMIT 1;"},{"data":"Question: How many cars have a larger accelerate than the car with the largest horsepower?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"},{"data":"Question: What is the number of cars with a greater accelerate than the one with the most horsepower?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT COUNT(*) FROM CARS_DATA WHERE Accelerate  >  ( SELECT Accelerate FROM CARS_DATA ORDER BY Horsepower DESC LIMIT 1 );"},{"data":"Question: How many countries has more than 2 car makers ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"},{"data":"Question: What is the number of countries with more than 2 car makers ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select count(*) from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  2"},{"data":"Question: How many cars has over 6 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"},{"data":"Question: What is the number of carsw ith over 6 cylinders?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT COUNT(*) FROM CARS_DATA WHERE Cylinders  >  6;"},{"data":"Question: For the cars with 4 cylinders, which model has the largest horsepower?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"},{"data":"Question: For all of the 4 cylinder cars, which model has the most horsepower?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Model FROM CAR_NAMES AS T1 JOIN CARS_DATA AS T2 ON T1.MakeId  =  T2.Id WHERE T2.Cylinders  =  4 ORDER BY T2.horsepower DESC LIMIT 1;"},{"data":"Question: Among the cars with more than lowest horsepower, which ones do not have more than 3 cylinders? List the car makeid and make name.\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T2.MakeId ,  T2.Make FROM CARS_DATA AS T1 JOIN CAR_NAMES AS T2 ON T1.Id  =  T2.MakeId WHERE T1.Horsepower  >  (SELECT min(Horsepower) FROM CARS_DATA) AND T1.Cylinders  <=  3;"},{"data":"Question: Among the cars that do not have the minimum horsepower , what are the make ids and names of all those with less than 4 cylinders ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select t2.makeid ,  t2.make from cars_data as t1 join car_names as t2 on t1.id  =  t2.makeid where t1.horsepower  >  (select min(horsepower) from cars_data) and t1.cylinders  <  4;"},{"data":"Question: What is the maximum miles per gallon of the car with 8 cylinders or produced before 1980 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"},{"data":"Question: What is the maximum mpg of the cars that had 8 cylinders or that were produced before 1980 ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select max(mpg) from cars_data where cylinders  =  8 or year  <  1980"},{"data":"Question: Which models are lighter than 3500 but not built by the 'Ford Motor Company'?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"},{"data":"Question: What are the different models wthat are lighter than 3500 but were not built by the Ford Motor Company?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT DISTINCT T1.model FROM MODEL_LIST AS T1 JOIN CAR_NAMES AS T2 ON T1.Model  =  T2.Model JOIN CARS_DATA AS T3 ON T2.MakeId  =  T3.Id JOIN CAR_MAKERS AS T4 ON T1.Maker  =  T4.Id WHERE T3.weight  <  3500 AND T4.FullName != 'Ford Motor Company';"},{"data":"Question: What are the name of the countries where there is not a single car maker?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"},{"data":"Question: What are the names of the countries with no car makers?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT CountryName FROM countries EXCEPT SELECT T1.CountryName FROM countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.countryId  =  T2.Country;"},{"data":"Question: Which are the car makers which produce at least 2 models and more than 3 car makers ? List the id and the maker .\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker group by t1.id having count(*)  >=  2 intersect select t1.id ,  t1.maker from car_makers as t1 join model_list as t2 on t1.id  =  t2.maker join car_names as t3 on t2.model  =  t3.model group by t1.id having count(*)  >  3;"},{"data":"Question: What are the ids and makers of all car makers that produce at least 2 models and make more than 3 cars?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker GROUP BY T1.Id HAVING count(*)  >=  2 INTERSECT SELECT T1.Id ,  T1.Maker FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id  =  T2.Maker JOIN CAR_NAMES AS T3 ON T2.model  =  T3.model GROUP BY T1.Id HAVING count(*)  >  3;"},{"data":"Question: What are the id and names of the countries which have more than 3 car makers or produce the 'fiat' model?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country GROUP BY T1.countryId HAVING count(*)  >  3 UNION SELECT T1.countryId ,  T1.CountryName FROM Countries AS T1 JOIN CAR_MAKERS AS T2 ON T1.CountryId  =  T2.Country JOIN MODEL_LIST AS T3 ON T2.Id  =  T3.Maker WHERE T3.Model  =  'fiat';"},{"data":"Question: What are the ids and names of all countries that either have more than 3 car makers or produce fiat model ?\nSchema: 'continents' [ Primary Key: 'ContId' int, 'Continent' text];\n'countries' [ Primary Key: 'CountryId' int, 'CountryName' text, 'Continent' int, Foreign Key: 'Continent' int from 'countries' 'Continent'];\n'car_makers' [ Primary Key: 'Id' int, 'Maker' text, 'FullName' text, 'Country' text, Foreign Key: 'Country' text from 'car_makers' 'Country'];\n'model_list' [ Primary Key: 'ModelId' int, 'Maker' int, 'Model' text, Foreign Key: 'Maker' int from 'model_list' 'Maker'];\n'car_names' [ Primary Key: 'MakeId' int, 'Model' text, 'Make' text, Foreign Key: 'Model' text from 'car_names' 'Model'];\n'cars_data' [ Primary Key: 'Id' int, 'MPG' text, 'Cylinders' int, 'Edispl' int, 'Horsepower' text, 'Weight' int, 'Accelerate' int, 'Year' int, Foreign Key: 'Id' int from 'cars_data' 'Id'];\n\nAnswer: select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country group by t1.countryid having count(*)  >  3 union select t1.countryid ,  t1.countryname from countries as t1 join car_makers as t2 on t1.countryid  =  t2.country join model_list as t3 on t2.id  =  t3.maker where t3.model  =  'fiat';"},{"data":"Question: Which country does Airline \"JetBlue Airways\" belong to?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""},{"data":"Question: What country is Jetblue Airways affiliated with?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Country FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""},{"data":"Question: What is the abbreviation of Airline \"JetBlue Airways\"?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""},{"data":"Question: Which abbreviation corresponds to Jetblue Airways?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Abbreviation FROM AIRLINES WHERE Airline  =  \"JetBlue Airways\""},{"data":"Question: List all airline names and their abbreviations in \"USA\".\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""},{"data":"Question: What are the airline names and abbreviations for airlines in the USA?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Airline ,  Abbreviation FROM AIRLINES WHERE Country  =  \"USA\""},{"data":"Question: List the airport code and name in the city of Anthony.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""},{"data":"Question: Give the airport code and airport name corresonding to the city Anthony.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportCode ,  AirportName FROM AIRPORTS WHERE city  =  \"Anthony\""},{"data":"Question: How many airlines do we have?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES"},{"data":"Question: What is the total number of airlines?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES"},{"data":"Question: How many airports do we have?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRPORTS"},{"data":"Question: Return the number of  airports.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRPORTS"},{"data":"Question: How many flights do we have?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS"},{"data":"Question: Return the number of flights.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS"},{"data":"Question: Which airline has abbreviation 'UAL'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""},{"data":"Question: Give the airline with abbreviation 'UAL'.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT Airline FROM AIRLINES WHERE Abbreviation  =  \"UAL\""},{"data":"Question: How many airlines are from USA?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""},{"data":"Question: Return the number of airlines in the USA.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES WHERE Country  =  \"USA\""},{"data":"Question: Which city and country is the Alton airport at?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""},{"data":"Question: Give the city and country for the Alton airport.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT City ,  Country FROM AIRPORTS WHERE AirportName  =  \"Alton\""},{"data":"Question: What is the airport name for airport 'AKO'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""},{"data":"Question: Return the name of the airport with code 'AKO'.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportName FROM AIRPORTS WHERE AirportCode  =  \"AKO\""},{"data":"Question: What are airport names at City 'Aberdeen'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""},{"data":"Question: What are the names of airports in Aberdeen?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportName FROM AIRPORTS WHERE City = \"Aberdeen\""},{"data":"Question: How many flights depart from 'APG'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""},{"data":"Question: Count the number of flights departing from 'APG'.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS WHERE SourceAirport  =  \"APG\""},{"data":"Question: How many flights have destination ATO?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""},{"data":"Question: Count the number of flights into ATO.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS WHERE DestAirport  =  \"ATO\""},{"data":"Question: How many flights depart from City Aberdeen?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: Return the number of flights departing from Aberdeen.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: How many flights arriving in Aberdeen city?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: Return the number of flights arriving in Aberdeen.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: How many flights depart from City 'Aberdeen' and have destination City 'Ashley'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""},{"data":"Question: How many flights fly from Aberdeen to Ashley?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRPORTS AS T3 ON T1.SourceAirport  =  T3.AirportCode WHERE T2.City  =  \"Ashley\" AND T3.City  =  \"Aberdeen\""},{"data":"Question: How many flights does airline 'JetBlue Airways' have?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""},{"data":"Question: Give the number of Jetblue Airways flights.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T1.Airline  =  T2.uid WHERE T2.Airline = \"JetBlue Airways\""},{"data":"Question: How many 'United Airlines' flights go to Airport 'ASY'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""},{"data":"Question: Count the number of United Airlines flights arriving in ASY Airport.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.DestAirport  =  \"ASY\""},{"data":"Question: How many 'United Airlines' flights depart from Airport 'AHD'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""},{"data":"Question: Return the number of United Airlines flights leaving from AHD Airport.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T2.Airline  =  T1.uid WHERE T1.Airline  =  \"United Airlines\" AND T2.SourceAirport  =  \"AHD\""},{"data":"Question: How many United Airlines flights go to City 'Aberdeen'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""},{"data":"Question: Count the number of United Airlines flights that arrive in Aberdeen.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport  =  T2.AirportCode JOIN AIRLINES AS T3 ON T3.uid  =  T1.Airline WHERE T2.City  =  \"Aberdeen\" AND T3.Airline  =  \"United Airlines\""},{"data":"Question: Which city has most number of arriving flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which city has the most frequent destination airport?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which city has most number of departing flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which city is the most frequent source airport?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.City FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.SourceAirport GROUP BY T1.City ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the code of airport that has the highest number of flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the airport code of the airport with the most flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the code of airport that has fewest number of flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"},{"data":"Question: Give the code of the airport with the least flights.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.AirportCode FROM AIRPORTS AS T1 JOIN FLIGHTS AS T2 ON T1.AirportCode  =  T2.DestAirport OR T1.AirportCode  =  T2.SourceAirport GROUP BY T1.AirportCode ORDER BY count(*) LIMIT 1"},{"data":"Question: Which airline has most number of flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What airline serves the most flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the abbreviation and country of the airline that has fewest number of flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"},{"data":"Question: What is the abbreviation of the airilne has the fewest flights and what country is it in?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Abbreviation ,  T1.Country FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline ORDER BY count(*) LIMIT 1"},{"data":"Question: What are airlines that have some flight departing from airport 'AHD'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""},{"data":"Question: Which airlines have a flight with source airport AHD?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"AHD\""},{"data":"Question: What are airlines that have flights arriving at airport 'AHD'?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""},{"data":"Question: Which airlines have a flight with destination airport AHD?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.DestAirport  =  \"AHD\""},{"data":"Question: Find all airlines that have flights from both airports 'APG' and 'CVO'.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""},{"data":"Question: Which airlines have departing flights from both APG and CVO airports?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\" INTERSECT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\""},{"data":"Question: Find all airlines that have flights from airport 'CVO' but not from 'APG'.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""},{"data":"Question: Which airlines have departures from CVO but not from APG airports?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"CVO\" EXCEPT SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline WHERE T2.SourceAirport  =  \"APG\""},{"data":"Question: Find all airlines that have at least 10 flights.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"},{"data":"Question: Which airlines have at least 10 flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  >  10"},{"data":"Question: Find all airlines that have fewer than 200 flights.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"},{"data":"Question: Which airlines have less than 200 flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.Airline FROM AIRLINES AS T1 JOIN FLIGHTS AS T2 ON T1.uid  =  T2.Airline GROUP BY T1.Airline HAVING count(*)  <  200"},{"data":"Question: What are flight numbers of Airline \"United Airlines\"?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""},{"data":"Question: Which flight numbers correspond to United Airlines flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRLINES AS T2 ON T2.uid  =  T1.Airline WHERE T2.Airline  =  \"United Airlines\""},{"data":"Question: What are flight numbers of flights departing from Airport \"APG\"?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""},{"data":"Question: Give the flight numbers of flights leaving from APG.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT FlightNo FROM FLIGHTS WHERE SourceAirport  =  \"APG\""},{"data":"Question: What are flight numbers of flights arriving at Airport \"APG\"?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""},{"data":"Question: Give the flight numbers of flights landing at APG.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT FlightNo FROM FLIGHTS WHERE DestAirport  =  \"APG\""},{"data":"Question: What are flight numbers of flights departing from City \"Aberdeen \"?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: Give the flight numbers of flights leaving from Aberdeen.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.SourceAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: What are flight numbers of flights arriving at City \"Aberdeen\"?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: Give the flight numbers of flights arriving in Aberdeen.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT T1.FlightNo FROM FLIGHTS AS T1 JOIN AIRPORTS AS T2 ON T1.DestAirport   =  T2.AirportCode WHERE T2.City  =  \"Aberdeen\""},{"data":"Question: Find the number of flights landing in the city of Aberdeen or Abilene.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""},{"data":"Question: How many flights land in Aberdeen or Abilene?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT count(*) FROM Flights AS T1 JOIN Airports AS T2 ON T1.DestAirport  =  T2.AirportCode WHERE T2.city  =  \"Aberdeen\" OR T2.city  =  \"Abilene\""},{"data":"Question: Find the name of airports which do not have any flight in and out.\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"},{"data":"Question: Which airports do not have departing or arriving flights?\nSchema: 'airlines' [ Primary Key: 'uid' int, 'Airline' text, 'Abbreviation' text, 'Country' text];\n'airports' [ 'City' text, Primary Key: 'AirportCode' text, 'AirportName' text, 'Country' text, 'CountryAbbrev' text];\n'flights' [ Primary Key: 'Airline' int, 'FlightNo' int, 'SourceAirport' text, 'DestAirport' text, Foreign Key: 'SourceAirport' text from 'flights' 'SourceAirport', Foreign Key: 'DestAirport' text from 'flights' 'DestAirport'];\n\nAnswer: SELECT AirportName FROM Airports WHERE AirportCode NOT IN (SELECT SourceAirport FROM Flights UNION SELECT DestAirport FROM Flights)"},{"data":"Question: How many employees are there?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) FROM employee"},{"data":"Question: Count the number of employees\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) FROM employee"},{"data":"Question: Sort employee names by their age in ascending order.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM employee ORDER BY age"},{"data":"Question: List the names of employees and sort in ascending order of age.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM employee ORDER BY age"},{"data":"Question: What is the number of employees from each city?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) ,  city FROM employee GROUP BY city"},{"data":"Question: Count the number of employees for each city.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) ,  city FROM employee GROUP BY city"},{"data":"Question: Which cities do more than one employee under age 30 come from?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"},{"data":"Question: Find the cities that have more than one employee under age 30.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT city FROM employee WHERE age  <  30 GROUP BY city HAVING count(*)  >  1"},{"data":"Question: Find the number of shops in each location.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"},{"data":"Question: How many shops are there in each location?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) ,  LOCATION FROM shop GROUP BY LOCATION"},{"data":"Question: Find the manager name and district of the shop whose number of products is the largest.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"},{"data":"Question: What are the manager name and district of the shop that sells the largest number of products?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT manager_name ,  district FROM shop ORDER BY number_products DESC LIMIT 1"},{"data":"Question: find the minimum and maximum number of products of all stores.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT min(Number_products) ,  max(Number_products) FROM shop"},{"data":"Question: What are the minimum and maximum number of products across all the shops?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT min(Number_products) ,  max(Number_products) FROM shop"},{"data":"Question: Return the name, location and district of all shops in descending order of number of products.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"},{"data":"Question: Sort all the shops by number products in descending order, and return the name, location and district of each shop.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name ,  LOCATION ,  district FROM shop ORDER BY number_products DESC"},{"data":"Question: Find the names of stores whose number products is more than the average number of products.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"},{"data":"Question: Which shops' number products is above the average? Give me the shop names.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM shop WHERE number_products  >  (SELECT avg(number_products) FROM shop)"},{"data":"Question: find the name of employee who was awarded the most times in the evaluation.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which employee received the most awards in evaluations? Give me the employee name.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID GROUP BY t2.Employee_ID ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the name of the employee who got the highest one time bonus.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"},{"data":"Question: Which employee received the biggest bonus? Give me the employee name.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT t1.name FROM employee AS t1 JOIN evaluation AS t2 ON t1.Employee_ID  =  t2.Employee_ID ORDER BY t2.bonus DESC LIMIT 1"},{"data":"Question: Find the names of employees who never won any award in the evaluation.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"},{"data":"Question: What are the names of the employees who never received any evaluation?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM employee WHERE Employee_ID NOT IN (SELECT Employee_ID FROM evaluation)"},{"data":"Question: What is the name of the shop that is hiring the largest number of employees?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which shop has the most employees? Give me the shop name.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t1.shop_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the name of the shops that do not hire any employee.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"},{"data":"Question: Which shops run with no employees? Find the shop names\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT name FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM hiring)"},{"data":"Question: Find the number of employees hired in each shop; show the shop name as well.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"},{"data":"Question: For each shop, return the number of employees working there and the name of the shop.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(*) ,  t2.name FROM hiring AS t1 JOIN shop AS t2 ON t1.shop_id  =  t2.shop_id GROUP BY t2.name"},{"data":"Question: What is total bonus given in all evaluations?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT sum(bonus) FROM evaluation"},{"data":"Question: Find the total amount of bonus given in all the evaluations.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT sum(bonus) FROM evaluation"},{"data":"Question: Give me all the information about hiring.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT * FROM hiring"},{"data":"Question: What is all the information about hiring?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT * FROM hiring"},{"data":"Question: Which district has both stores with less than 3000 products and stores with more than 10000 products?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"},{"data":"Question: Find the districts in which there are both shops selling less than 3000 products and shops selling more than 10000 products.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT district FROM shop WHERE Number_products  <  3000 INTERSECT SELECT district FROM shop WHERE Number_products  >  10000"},{"data":"Question: How many different store locations are there?\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(DISTINCT LOCATION) FROM shop"},{"data":"Question: Count the number of distinct store locations.\nSchema: 'employee' [ Primary Key: 'Employee_ID' int, 'Name' text, 'Age' int, 'City' text];\n'shop' [ Primary Key: 'Shop_ID' int, 'Name' text, 'Location' text, 'District' text, 'Number_products' int, 'Manager_name' text];\n'hiring' [ 'Shop_ID' int, Primary Key: 'Employee_ID' int, 'Start_from' text, 'Is_full_time' others, Foreign Key: 'Shop_ID' int from 'hiring' 'Shop_ID', Foreign Key: 'Employee_ID' int from 'hiring' 'Employee_ID'];\n'evaluation' [ Primary Key: 'Employee_ID' text, 'Year_awarded' text, 'Bonus' int, Foreign Key: 'Employee_ID' text from 'evaluation' 'Employee_ID'];\n\nAnswer: SELECT count(DISTINCT LOCATION) FROM shop"},{"data":"Question: How many documents do we have?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Documents"},{"data":"Question: Count the number of documents.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Documents"},{"data":"Question: List document IDs, document names, and document descriptions for all documents.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id ,  document_name ,  document_description FROM Documents"},{"data":"Question: What are the ids, names, and descriptions for all documents?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id ,  document_name ,  document_description FROM Documents"},{"data":"Question: What is the document name and template id for document with description with the letter 'w' in it?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""},{"data":"Question: Return the names and template ids for documents that contain the letter w in their description.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_name ,  template_id FROM Documents WHERE Document_Description LIKE \"%w%\""},{"data":"Question: What is the document id, template id and description for document named \"Robbin CV\"?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""},{"data":"Question: Return the document id, template id, and description for the document with the name Robbin CV.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id ,  template_id ,  Document_Description FROM Documents WHERE document_name  =  \"Robbin CV\""},{"data":"Question: How many different templates do all document use?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(DISTINCT template_id) FROM Documents"},{"data":"Question: Count the number of different templates used for documents.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(DISTINCT template_id) FROM Documents"},{"data":"Question: How many documents are using the template with type code 'PPT'?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"},{"data":"Question: Count the number of documents that use the PPT template type.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Documents AS T1 JOIN Templates AS T2 ON T1.Template_ID  =  T2.Template_ID WHERE T2.Template_Type_Code  =  'PPT'"},{"data":"Question: Show all template ids and number of documents using each template.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"},{"data":"Question: What are all different template ids used for documents, and how many times were each of them used?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id ,  count(*) FROM Documents GROUP BY template_id"},{"data":"Question: What is the id and type code for the template used by the most documents?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the id and type code of the template that is used for the greatest number of documents.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_id ,  T2.Template_Type_Code FROM Documents AS T1 JOIN Templates AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show ids for all templates that are used by more than one document.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"},{"data":"Question: What are the template ids of any templates used in more than a single document?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id FROM Documents GROUP BY template_id HAVING count(*)  >  1"},{"data":"Question: Show ids for all templates not used by any document.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"},{"data":"Question: What are the ids for templates that are not used in any documents?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id FROM Templates EXCEPT SELECT template_id FROM Documents"},{"data":"Question: How many templates do we have?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Templates"},{"data":"Question: Count the number of templates.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Templates"},{"data":"Question: Show template ids, version numbers, and template type codes for all templates.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id ,  version_number ,  template_type_code FROM Templates"},{"data":"Question: What are the ids, version numbers, and type codes for each template?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id ,  version_number ,  template_type_code FROM Templates"},{"data":"Question: Show all distinct template type codes for all templates.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT DISTINCT template_type_code FROM Templates"},{"data":"Question: What are the different template type codes?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT DISTINCT template_type_code FROM Templates"},{"data":"Question: What are the ids of templates with template type code PP or PPT?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""},{"data":"Question: Return the ids of templates that have the code PP or PPT.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_id FROM Templates WHERE template_type_code  =  \"PP\" OR template_type_code  =  \"PPT\""},{"data":"Question: How many templates have template type code CV?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""},{"data":"Question: Count the number of templates of the type CV.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Templates WHERE template_type_code  =  \"CV\""},{"data":"Question: What is the version number and template type code for the template with version number later than 5?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"},{"data":"Question: Return the version numbers and template type codes of templates with a version number greater than 5.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT version_number ,  template_type_code FROM Templates WHERE version_number  >  5"},{"data":"Question: Show all template type codes and number of templates for each.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"},{"data":"Question: What are the different template type codes, and how many templates correspond to each?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code ,  count(*) FROM Templates GROUP BY template_type_code"},{"data":"Question: Which template type code has most number of templates?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the type code of the template type that the most templates belong to.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show all template type codes with less than three templates.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"},{"data":"Question: What are the codes of template types that have fewer than 3 templates?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Templates GROUP BY template_type_code HAVING count(*)  <  3"},{"data":"Question: What the smallest version number and its template type code?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT min(Version_Number) ,  template_type_code FROM Templates"},{"data":"Question: Return the lowest version number, along with its corresponding template type code.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT min(Version_Number) ,  template_type_code FROM Templates"},{"data":"Question: What is the template type code of the template used by document with the name \"Data base\"?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""},{"data":"Question: Return the template type code of the template that is used by a document named Data base.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T2.document_name  =  \"Data base\""},{"data":"Question: Show all document names using templates with template type code BK.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""},{"data":"Question: What are the names of documents that use templates with the code BK?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T2.document_name FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id WHERE T1.template_type_code  =  \"BK\""},{"data":"Question: Show all template type codes and the number of documents using each type.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"},{"data":"Question: What are the different template type codes, and how many documents use each type?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_type_code ,  count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code"},{"data":"Question: Which template type code is used by most number of documents?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the code of the template type that is most commonly used in documents.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show all template type codes that are not used by any document.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"},{"data":"Question: What are the codes of template types that are not used for any document?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Templates EXCEPT SELECT template_type_code FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id  =  T2.template_id"},{"data":"Question: Show all template type codes and descriptions.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code ,  template_type_description FROM Ref_template_types"},{"data":"Question: What are the type codes and descriptions for all template types?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code ,  template_type_description FROM Ref_template_types"},{"data":"Question: What is the template type descriptions for template type code \"AD\".\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""},{"data":"Question: Return the template type description of the template type with the code AD.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_description FROM Ref_template_types WHERE template_type_code  =  \"AD\""},{"data":"Question: What is the template type code for template type description \"Book\".\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""},{"data":"Question: Return the type code of the template type with the description \"Book\".\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT template_type_code FROM Ref_template_types WHERE template_type_description  =  \"Book\""},{"data":"Question: What are the distinct template type descriptions for the templates ever used by any document?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"},{"data":"Question: Return the different descriptions for templates that have been used in a document.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT DISTINCT T1.template_type_description FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code JOIN Documents AS T3 ON T2.Template_ID  =  T3.template_ID"},{"data":"Question: What are the template ids with template type description \"Presentation\".\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""},{"data":"Question: Return the ids corresponding to templates with the description 'Presentation'.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T2.template_id FROM Ref_template_types AS T1 JOIN Templates AS T2 ON T1.template_type_code  = T2.template_type_code WHERE T1.template_type_description  =  \"Presentation\""},{"data":"Question: How many paragraphs in total?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Paragraphs"},{"data":"Question: Count the number of paragraphs.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Paragraphs"},{"data":"Question: How many paragraphs for the document with name 'Summer Show'?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"},{"data":"Question: Count the number of paragraphs in the document named 'Summer Show'.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_ID  =  T2.document_ID WHERE T2.document_name  =  'Summer Show'"},{"data":"Question: Show paragraph details for paragraph with text 'Korea ' .\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: select other_details from paragraphs where paragraph_text like 'korea'"},{"data":"Question: What are the details for the paragraph that includes the text 'Korea ' ?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: select other_details from paragraphs where paragraph_text like 'korea'"},{"data":"Question: Show all paragraph ids and texts for the document with name 'Welcome to NY'.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"},{"data":"Question: What are the ids and texts of paragraphs in the document titled 'Welcome to NY'?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.paragraph_id ,   T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.Document_Name  =  'Welcome to NY'"},{"data":"Question: Show all paragraph texts for the document \"Customer reviews\".\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""},{"data":"Question: What are the paragraph texts for the document with the name 'Customer reviews'?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.paragraph_text FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Customer reviews\""},{"data":"Question: Show all document ids and the number of paragraphs in each document. Order by document id.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"},{"data":"Question: Return the different document ids along with the number of paragraphs corresponding to each, ordered by id.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id ,  count(*) FROM Paragraphs GROUP BY document_id ORDER BY document_id"},{"data":"Question: Show all document ids, names and the number of paragraphs in each document.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"},{"data":"Question: What are the ids and names of each document, as well as the number of paragraphs in each?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.document_id ,  T2.document_name ,  count(*) FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id"},{"data":"Question: List all document ids with at least two paragraphs.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"},{"data":"Question: What are the ids of documents that have 2 or more paragraphs?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*)  >=  2"},{"data":"Question: What is the document id and name with greatest number of paragraphs?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the id and name of the document with the most paragraphs.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT T1.document_id ,  T2.document_name FROM Paragraphs AS T1 JOIN Documents AS T2 ON T1.document_id  =  T2.document_id GROUP BY T1.document_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the document id with least number of paragraphs?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"},{"data":"Question: Return the id of the document with the fewest paragraphs.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs GROUP BY document_id ORDER BY count(*) ASC LIMIT 1"},{"data":"Question: What is the document id with 1 to 2 paragraphs?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"},{"data":"Question: Give the ids of documents that have between one and two paragraphs.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs GROUP BY document_id HAVING count(*) BETWEEN 1 AND 2"},{"data":"Question: Show the document id with paragraph text 'Brazil' and 'Ireland'.\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"},{"data":"Question: What are the ids of documents that contain the paragraph text 'Brazil' and 'Ireland'?\nSchema: 'Ref_Template_Types' [ Primary Key: 'Template_Type_Code' text, 'Template_Type_Description' text];\n'Templates' [ Primary Key: 'Template_ID' int, 'Version_Number' int, 'Template_Type_Code' text, 'Date_Effective_From' time, 'Date_Effective_To' time, 'Template_Details' text, Foreign Key: 'Template_Type_Code' text from 'Templates' 'Template_Type_Code'];\n'Documents' [ Primary Key: 'Document_ID' int, 'Template_ID' int, 'Document_Name' text, 'Document_Description' text, 'Other_Details' text, Foreign Key: 'Template_ID' int from 'Documents' 'Template_ID'];\n'Paragraphs' [ Primary Key: 'Paragraph_ID' int, 'Document_ID' int, 'Paragraph_Text' text, 'Other_Details' text, Foreign Key: 'Document_ID' int from 'Paragraphs' 'Document_ID'];\n\nAnswer: SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Brazil' INTERSECT SELECT document_id FROM Paragraphs WHERE paragraph_text  =  'Ireland'"},{"data":"Question: How many teachers are there?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT count(*) FROM teacher"},{"data":"Question: What is the total count of teachers?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT count(*) FROM teacher"},{"data":"Question: List the names of teachers in ascending order of age.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Name FROM teacher ORDER BY Age ASC"},{"data":"Question: What are the names of the teachers ordered by ascending age?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Name FROM teacher ORDER BY Age ASC"},{"data":"Question: What are the age and hometown of teachers?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Age ,  Hometown FROM teacher"},{"data":"Question: What is the age and hometown of every teacher?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Age ,  Hometown FROM teacher"},{"data":"Question: List the name of teachers whose hometown is not `` Little Lever Urban District '' .\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: select name from teacher where hometown != \"little lever urban district\""},{"data":"Question: What are the names of the teachers whose hometown is not `` Little Lever Urban District '' ?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: select name from teacher where hometown != \"little lever urban district\""},{"data":"Question: Show the name of teachers aged either 32 or 33?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"},{"data":"Question: What are the names of the teachers who are aged either 32 or 33?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Name FROM teacher WHERE Age  =  32 OR Age  =  33"},{"data":"Question: What is the hometown of the youngest teacher?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"},{"data":"Question: Where is the youngest teacher from?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown FROM teacher ORDER BY Age ASC LIMIT 1"},{"data":"Question: Show different hometown of teachers and the number of teachers from each hometown.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"},{"data":"Question: For each hometown, how many teachers are there?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown ,  COUNT(*) FROM teacher GROUP BY Hometown"},{"data":"Question: List the most common hometown of teachers.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: What is the most commmon hometowns for teachers?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown FROM teacher GROUP BY Hometown ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: Show the hometowns shared by at least two teachers.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"},{"data":"Question: What are the towns from which at least two teachers come from?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Hometown FROM teacher GROUP BY Hometown HAVING COUNT(*)  >=  2"},{"data":"Question: Show names of teachers and the courses they are arranged to teach.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"},{"data":"Question: What is the name of each teacher and what course they teach?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID"},{"data":"Question: Show names of teachers and the courses they are arranged to teach in ascending alphabetical order of the teacher's name.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"},{"data":"Question: What are the names of the teachers and the courses they teach in ascending alphabetical order by the name of the teacher?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T3.Name ,  T2.Course FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID ORDER BY T3.Name"},{"data":"Question: Show the name of the teacher for the math course.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""},{"data":"Question: What are the names of the people who teach math courses?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T3.Name FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID  =  T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID  =  T3.Teacher_ID WHERE T2.Course  =  \"Math\""},{"data":"Question: Show names of teachers and the number of courses they teach.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"},{"data":"Question: What are the names of the teachers and how many courses do they teach?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T2.Name ,  COUNT(*) FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name"},{"data":"Question: Show names of teachers that teach at least two courses.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"},{"data":"Question: What are the names of the teachers who teach at least two courses?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT T2.Name FROM course_arrange AS T1 JOIN teacher AS T2 ON T1.Teacher_ID  =  T2.Teacher_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2"},{"data":"Question: List the names of teachers who have not been arranged to teach courses.\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"},{"data":"Question: What are the names of the teachers whose courses have not been arranged?\nSchema: 'course' [ Primary Key: 'Course_ID' int, 'Staring_Date' text, 'Course' text];\n'teacher' [ Primary Key: 'Teacher_ID' int, 'Name' text, 'Age' text, 'Hometown' text];\n'course_arrange' [ Primary Key: 'Course_ID' int, 'Teacher_ID' int, 'Grade' int, Foreign Key: 'Course_ID' int from 'course_arrange' 'Course_ID', Foreign Key: 'Teacher_ID' int from 'course_arrange' 'Teacher_ID'];\n\nAnswer: SELECT Name FROM teacher WHERE Teacher_id NOT IN (SELECT Teacher_id FROM course_arrange)"},{"data":"Question: How many visitors below age 30 are there?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT count(*) FROM visitor WHERE age  <  30"},{"data":"Question: Find the names of the visitors whose membership level is higher than 4, and order the results by the level from high to low.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT name FROM visitor WHERE Level_of_membership  >  4 ORDER BY Level_of_membership DESC"},{"data":"Question: What is the average age of the visitors whose membership level is not higher than 4?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT avg(age) FROM visitor WHERE Level_of_membership  <=  4"},{"data":"Question: Find the name and membership level of the visitors whose membership level is higher than 4, and sort by their age from old to young.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT name ,  Level_of_membership FROM visitor WHERE Level_of_membership  >  4 ORDER BY age DESC"},{"data":"Question: Find the id and name of the museum that has the most staff members?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT museum_id ,  name FROM museum ORDER BY num_of_staff DESC LIMIT 1"},{"data":"Question: Find the average number of staff working for the museums that were open before 2009.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT avg(num_of_staff) FROM museum WHERE open_year  <  2009"},{"data":"Question: What are the opening year and staff number of the museum named Plaza Museum?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT Num_of_Staff ,  Open_Year FROM museum WHERE name  =  'Plaza Museum'"},{"data":"Question: find the names of museums which have more staff than the minimum staff number of all museums opened after 2010.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT name FROM museum WHERE num_of_staff  >  (SELECT min(num_of_staff) FROM museum WHERE open_year  >  2010)"},{"data":"Question: find the id, name and age for visitors who visited some museums more than once.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT t1.id ,  t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t1.id HAVING count(*)  >  1"},{"data":"Question: What are the id, name and membership level of visitors who have spent the largest amount of money in total in all museum tickets?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT t2.visitor_id ,  t1.name ,  t1.Level_of_membership FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id GROUP BY t2.visitor_id ORDER BY sum(t2.Total_spent) DESC LIMIT 1"},{"data":"Question: What are the id and name of the museum visited most times?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT t2.Museum_ID ,  t1.name FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID GROUP BY t2.Museum_ID ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the name of the museum that had no visitor yet?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT name FROM museum WHERE Museum_ID NOT IN (SELECT museum_id FROM visit)"},{"data":"Question: Find the name and age of the visitor who bought the most tickets at once.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT t1.name ,  t1.age FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id ORDER BY t2.num_of_ticket DESC LIMIT 1"},{"data":"Question: What are the average and maximum number of tickets bought in all visits?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT avg(num_of_ticket) ,  max(num_of_ticket) FROM visit"},{"data":"Question: What is the total ticket expense of the visitors whose membership level is 1?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT sum(t2.Total_spent) FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id WHERE t1.Level_of_membership  =  1"},{"data":"Question: What is the name of the visitor who visited both a museum opened before 2009 and a museum opened after 2011?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  <  2009 INTERSECT SELECT t1.name FROM visitor AS t1 JOIN visit AS t2 ON t1.id  =  t2.visitor_id JOIN museum AS t3 ON t3.Museum_ID  =  t2.Museum_ID WHERE t3.open_year  >  2011"},{"data":"Question: Find the number of visitors who did not visit any museum opened after 2010.\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT count(*) FROM visitor WHERE id NOT IN (SELECT t2.visitor_id FROM museum AS t1 JOIN visit AS t2 ON t1.Museum_ID  =  t2.Museum_ID WHERE t1.open_year  >  2010)"},{"data":"Question: How many museums were opened after 2013 or before 2008?\nSchema: 'museum' [ Primary Key: 'Museum_ID' int, 'Name' text, 'Num_of_Staff' int, 'Open_Year' text];\n'visitor' [ Primary Key: 'ID' int, 'Name' text, 'Level_of_membership' int, 'Age' int];\n'visit' [ Primary Key: 'Museum_ID' int, 'visitor_ID' text, 'Num_of_Ticket' int, 'Total_spent' int, Foreign Key: 'Museum_ID' int from 'visit' 'Museum_ID', Foreign Key: 'visitor_ID' text from 'visit' 'visitor_ID'];\n\nAnswer: SELECT count(*) FROM museum WHERE open_year  >  2013 OR open_year  <  2008"},{"data":"Question: Find the total number of players.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) FROM players"},{"data":"Question: How many players are there?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) FROM players"},{"data":"Question: Find the total number of matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) FROM matches"},{"data":"Question: Count the number of matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) FROM matches"},{"data":"Question: List the first name and birth date of all players from the country with code USA.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"},{"data":"Question: What are the first names and birth dates of players from the USA?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  birth_date FROM players WHERE country_code  =  'USA'"},{"data":"Question: Find the average age of losers and winners of all matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT avg(loser_age) ,  avg(winner_age) FROM matches"},{"data":"Question: What are the average ages of losers and winners across matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT avg(loser_age) ,  avg(winner_age) FROM matches"},{"data":"Question: Find the average rank of winners in all matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT avg(winner_rank) FROM matches"},{"data":"Question: What is the average rank for winners in all matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT avg(winner_rank) FROM matches"},{"data":"Question: Find the highest rank of losers in all matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT min(loser_rank) FROM matches"},{"data":"Question: What is the best rank of losers across all matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT min(loser_rank) FROM matches"},{"data":"Question: find the number of distinct country codes of all players.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(DISTINCT country_code) FROM players"},{"data":"Question: How many distinct countries do players come from?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(DISTINCT country_code) FROM players"},{"data":"Question: Find the number of distinct name of losers.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(DISTINCT loser_name) FROM matches"},{"data":"Question: How many different loser names are there?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(DISTINCT loser_name) FROM matches"},{"data":"Question: Find the name of tourney that has more than 10 matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"},{"data":"Question: What are the names of tournaments that have more than 10 matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT tourney_name FROM matches GROUP BY tourney_name HAVING count(*)  >  10"},{"data":"Question: List the names of all winners who played in both 2013 and 2016.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"},{"data":"Question: What are the names of players who won in both 2013 and 2016?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name FROM matches WHERE YEAR  =  2013 INTERSECT SELECT winner_name FROM matches WHERE YEAR  =  2016"},{"data":"Question: List the number of all matches who played in years of 2013 or 2016.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"},{"data":"Question: How many matches were played in 2013 or 2016?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) FROM matches WHERE YEAR  =  2013 OR YEAR  =  2016"},{"data":"Question: What are the country code and first name of the players who won in both tourney WTA Championships and Australian Open?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"},{"data":"Question: What are the first names and country codes for players who won both the WTA Championships and the Australian Open?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'WTA Championships' INTERSECT SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id WHERE T2.tourney_name  =  'Australian Open'"},{"data":"Question: Find the first name and country code of the oldest player.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"},{"data":"Question: What is the first name and country code of the oldest player?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  country_code FROM players ORDER BY birth_date LIMIT 1"},{"data":"Question: List the first and last name of all players in the order of birth date.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  last_name FROM players ORDER BY birth_date"},{"data":"Question: What are the full names of all players, sorted by birth date?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  last_name FROM players ORDER BY birth_date"},{"data":"Question: List the first and last name of all players who are left \/ L hand in the order of birth date.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"},{"data":"Question: What are the full names of all left handed players, in order of birth date?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT first_name ,  last_name FROM players WHERE hand  =  'L' ORDER BY birth_date"},{"data":"Question: Find the first name and country code of the player who did the most number of tours.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"},{"data":"Question: What is the first name and country code of the player with the most tours?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT T1.country_code ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id ORDER BY T2.tours DESC LIMIT 1"},{"data":"Question: Find the year that has the most number of matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which year had the most matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT YEAR FROM matches GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the name and rank points of the winner who won the most times.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the name of the winner who has won the most matches, and how many rank points does this player have?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name ,  winner_rank_points FROM matches GROUP BY winner_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the name of the winner who has the highest rank points and participated in the Australian Open tourney.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"},{"data":"Question: What is the name of the winner with the most rank points who participated in the Australian Open tournament?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name FROM matches WHERE tourney_name  =  'Australian Open' ORDER BY winner_rank_points DESC LIMIT 1"},{"data":"Question: find the names of loser and winner who played in the match with greatest number of minutes.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"},{"data":"Question: What are the names of the winner and loser who played in the longest match?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT winner_name ,  loser_name FROM matches ORDER BY minutes DESC LIMIT 1"},{"data":"Question: Find the average ranking for each player and their first name.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"},{"data":"Question: What are the first names of all players, and their average rankings?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT avg(ranking) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"},{"data":"Question: Find the total ranking points for each player and their first name.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"},{"data":"Question: What are the first names of all players, and their total ranking points?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT sum(ranking_points) ,  T1.first_name FROM players AS T1 JOIN rankings AS T2 ON T1.player_id  =  T2.player_id GROUP BY T1.first_name"},{"data":"Question: find the number of players for each country.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) ,  country_code FROM players GROUP BY country_code"},{"data":"Question: How many players are from each country?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) ,  country_code FROM players GROUP BY country_code"},{"data":"Question: find the code of the country where has the greatest number of players.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the code of the country with the most players?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT country_code FROM players GROUP BY country_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the codes of countries that have more than 50 players.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"},{"data":"Question: What are the codes of countries with more than 50 players?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT country_code FROM players GROUP BY country_code HAVING count(*)  >  50"},{"data":"Question: Find the total number of tours for each ranking date.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"},{"data":"Question: How many total tours were there for each ranking date?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT sum(tours) ,  ranking_date FROM rankings GROUP BY ranking_date"},{"data":"Question: Find the number of matches happened in each year.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"},{"data":"Question: How many matches were played in each year?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) ,  YEAR FROM matches GROUP BY YEAR"},{"data":"Question: Find the name and rank of the 3 youngest winners across all matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"},{"data":"Question: What are the names and ranks of the three youngest winners across all matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT DISTINCT winner_name ,  winner_rank FROM matches ORDER BY winner_age LIMIT 3"},{"data":"Question: How many different winners both participated in the WTA Championships and were left handed?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"},{"data":"Question: Find the number of left handed winners who participated in the WTA Championships.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(DISTINCT winner_name) FROM matches WHERE tourney_name  =  'WTA Championships' AND winner_hand  =  'L'"},{"data":"Question: Find the first name, country code and birth date of the winner who has the highest rank points in all matches.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"},{"data":"Question: What is the first name, country code, and birth date of the player with the most winner rank points across all matches?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT T1.first_name ,  T1.country_code ,  T1.birth_date FROM players AS T1 JOIN matches AS T2 ON T1.player_id  =  T2.winner_id ORDER BY T2.winner_rank_points DESC LIMIT 1"},{"data":"Question: Find the number of players for each hand type.\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) ,  hand FROM players GROUP BY hand"},{"data":"Question: How many players are there for each hand type?\nSchema: 'players' [ Primary Key: 'player_id' int, 'first_name' text, 'last_name' text, 'hand' text, 'birth_date' time, 'country_code' text];\n'matches' [ 'best_of' int, 'draw_size' int, 'loser_age' int, 'loser_entry' text, 'loser_hand' text, 'loser_ht' int, 'loser_id' int, 'loser_ioc' text, 'loser_name' text, 'loser_rank' int, 'loser_rank_points' int, 'loser_seed' int, 'match_num' int, 'minutes' int, 'round' text, 'score' text, 'surface' text, 'tourney_date' time, 'tourney_id' text, 'tourney_level' text, 'tourney_name' text, 'winner_age' int, 'winner_entry' text, 'winner_hand' text, 'winner_ht' int, 'winner_id' int, 'winner_ioc' text, 'winner_name' text, 'winner_rank' int, 'winner_rank_points' int, 'winner_seed' int, 'year' int, Foreign Key: 'loser_id' int from 'matches' 'loser_id', Foreign Key: 'winner_id' int from 'matches' 'winner_id'];\n'rankings' [ 'ranking_date' time, 'ranking' int, 'player_id' int, 'ranking_points' int, 'tours' int, Foreign Key: 'player_id' int from 'rankings' 'player_id'];\n\nAnswer: SELECT count(*) ,  hand FROM players GROUP BY hand"},{"data":"Question: How many ships ended up being 'Captured'?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT count(*) FROM ship WHERE disposition_of_ship  =  'Captured'"},{"data":"Question: List the name and tonnage ordered by in descending alphaetical order for the names.\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT name ,  tonnage FROM ship ORDER BY name DESC"},{"data":"Question: List the name, date and result of each battle.\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT name ,  date FROM battle"},{"data":"Question: What is maximum and minimum death toll caused each time?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT max(killed) ,  min(killed) FROM death"},{"data":"Question: What is the average number of injuries caused each time?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT avg(injured) FROM death"},{"data":"Question: What are the death and injury situations caused by the ship with tonnage 't'?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT T1.killed ,  T1.injured FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id WHERE T2.tonnage  =  't'"},{"data":"Question: What are the name and results of the battles when the bulgarian commander is not 'Boril'\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT name ,  RESULT FROM battle WHERE bulgarian_commander != 'Boril'"},{"data":"Question: What are the different ids and names of the battles that lost any 'Brig' type shipes?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT DISTINCT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.ship_type  =  'Brig'"},{"data":"Question: What are the ids and names of the battles that led to more than 10 people killed in total.\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT T1.id ,  T1.name FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle JOIN death AS T3 ON T2.id  =  T3.caused_by_ship_id GROUP BY T1.id HAVING sum(T3.killed)  >  10"},{"data":"Question: What is the ship id and name that caused most total injuries?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT T2.id ,  T2.name FROM death AS T1 JOIN ship AS t2 ON T1.caused_by_ship_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What are the distinct battle names which are between bulgarian commander 'Kaloyan' and latin commander 'Baldwin I'?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT name FROM battle WHERE bulgarian_commander  =  'Kaloyan' AND latin_commander  =  'Baldwin I'"},{"data":"Question: How many different results are there for the battles?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT count(DISTINCT RESULT) FROM battle"},{"data":"Question: How many battles did not lose any ship with tonnage '225'?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT count(*) FROM battle WHERE id NOT IN ( SELECT lost_in_battle FROM ship WHERE tonnage  =  '225' );"},{"data":"Question: List the name and date the battle that has lost the ship named 'Lettice' and the ship named 'HMS Atalanta'\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'Lettice' INTERSECT SELECT T1.name ,  T1.date FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.name  =  'HMS Atalanta'"},{"data":"Question: Show names, results and bulgarian commanders of the battles with no ships lost in the 'English Channel'.\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT name ,  RESULT ,  bulgarian_commander FROM battle EXCEPT SELECT T1.name ,  T1.result ,  T1.bulgarian_commander FROM battle AS T1 JOIN ship AS T2 ON T1.id  =  T2.lost_in_battle WHERE T2.location  =  'English Channel'"},{"data":"Question: What are the notes of the death events which has substring 'East'?\nSchema: 'battle' [ Primary Key: 'id' int, 'name' text, 'date' text, 'bulgarian_commander' text, 'latin_commander' text, 'result' text];\n'ship' [ 'lost_in_battle' int, Primary Key: 'id' int, 'name' text, 'tonnage' text, 'ship_type' text, 'location' text, 'disposition_of_ship' text, Foreign Key: 'lost_in_battle' int from 'ship' 'lost_in_battle'];\n'death' [ 'caused_by_ship_id' int, Primary Key: 'id' int, 'note' text, 'killed' int, 'injured' int, Foreign Key: 'caused_by_ship_id' int from 'death' 'caused_by_ship_id'];\n\nAnswer: SELECT note FROM death WHERE note LIKE '%East%'"},{"data":"Question: what are all the addresses including line 1 and line 2?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT line_1 ,  line_2 FROM addresses"},{"data":"Question: What is the first and second line for all addresses?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT line_1 ,  line_2 FROM addresses"},{"data":"Question: How many courses in total are listed?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) FROM Courses"},{"data":"Question: How many courses are there?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) FROM Courses"},{"data":"Question: How is the math course described?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT course_description FROM Courses WHERE course_name  =  'math'"},{"data":"Question: What are the descriptions for all the math courses?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT course_description FROM Courses WHERE course_name  =  'math'"},{"data":"Question: What is the zip code of the address in the city Port Chelsea?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"},{"data":"Question: What is the zip code for Port Chelsea?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT zip_postcode FROM Addresses WHERE city  =  'Port Chelsea'"},{"data":"Question: Which department offers the most number of degrees? List department name and id.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T2.department_name ,  T1.department_id FROM Degree_Programs AS T1 JOIN Departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T1.department_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the name and id of the department with the most number of degrees ?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: select t2.department_name ,  t1.department_id from degree_programs as t1 join departments as t2 on t1.department_id  =  t2.department_id group by t1.department_id order by count(*) desc limit 1"},{"data":"Question: How many departments offer any degree?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(DISTINCT department_id) FROM Degree_Programs"},{"data":"Question: How many different departments offer degrees?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(DISTINCT department_id) FROM Degree_Programs"},{"data":"Question: How many different degree names are offered?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"},{"data":"Question: How many different degrees are offered?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(DISTINCT degree_summary_name) FROM Degree_Programs"},{"data":"Question: How many degrees does the engineering department offer?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"},{"data":"Question: How many degrees does the engineering department have?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) FROM Departments AS T1 JOIN Degree_Programs AS T2 ON T1.department_id  =  T2.department_id WHERE T1.department_name  =  'engineer'"},{"data":"Question: What are the names and descriptions of all the sections?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT section_name ,  section_description FROM Sections"},{"data":"Question: What are the names and descriptions for all the sections?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT section_name ,  section_description FROM Sections"},{"data":"Question: What are the names and id of courses having at most 2 sections?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"},{"data":"Question: What are the names and ids of every course with less than 2 sections?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.course_name ,  T1.course_id FROM Courses AS T1 JOIN Sections AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_id HAVING count(*)  <=  2"},{"data":"Question: List the section_name in reversed lexicographical order.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT section_name FROM Sections ORDER BY section_name DESC"},{"data":"Question: What are the names of the sections in reverse alphabetical order?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT section_name FROM Sections ORDER BY section_name DESC"},{"data":"Question: What is the semester which most student registered in? Show both the name and the id.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: For each semester, what is the name and id of the one with the most students registered?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.semester_name ,  T1.semester_id FROM Semesters AS T1 JOIN Student_Enrolment AS T2 ON T1.semester_id  =  T2.semester_id GROUP BY T1.semester_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the description of the department whose name has the substring the computer?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"},{"data":"Question: What is the department description for the one whose name has the word computer?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT department_description FROM Departments WHERE department_name LIKE '%computer%'"},{"data":"Question: Who are enrolled in 2 degree programs in one semester? List the first name, middle name and last name and the id.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"},{"data":"Question: What are the first, middle, and last names, along with the ids, of all students who enrolled in 2 degree programs in one semester?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.first_name ,  T1.middle_name ,  T1.last_name ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING count(*)  =  2"},{"data":"Question: Who is enrolled in a Bachelor degree program? List the first name, middle name, last name.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"},{"data":"Question: What are the first, middle, and last names for everybody enrolled in a Bachelors program?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT DISTINCT T1.first_name ,  T1.middle_name ,  T1.last_name FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id JOIN Degree_Programs AS T3 ON T2.degree_program_id  =  T3.degree_program_id WHERE T3.degree_summary_name  =  'Bachelor'"},{"data":"Question: Find the kind of program which most number of students are enrolled in?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the degree summary name that has the most number of students enrolled?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_summary_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the program which most number of students are enrolled in. List both the id and the summary.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the program id and the summary of the degree that has the most students enrolled?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.degree_program_id ,  T1.degree_summary_name FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id GROUP BY T1.degree_program_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which student has enrolled for the most times in any program? List the id, first name, middle name, last name, the number of enrollments and student id.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the first, middle, and last name, along with the id and number of enrollments, for the student who enrolled the most in any program?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.student_id ,  T1.first_name ,  T1.middle_name ,  T1.last_name ,  count(*) ,  T1.student_id FROM Students AS T1 JOIN Student_Enrolment AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which semesters do not have any student enrolled? List the semester name.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"},{"data":"Question: What is the name of the semester with no students enrolled?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT semester_name FROM Semesters WHERE semester_id NOT IN( SELECT semester_id FROM Student_Enrolment )"},{"data":"Question: What are all the course names of the courses which ever have students enrolled in?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"},{"data":"Question: What are the names of all courses that have some students enrolled?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT DISTINCT T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id"},{"data":"Question: What's the name of the course with most number of enrollments?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the name of the course with the most students enrolled?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT  T1.course_name FROM Courses AS T1 JOIN Student_Enrolment_Courses AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Find the last name of the students who currently live in the state of North Carolina but have not registered in any degree program.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"},{"data":"Question: What are the last name of the students who live in North Carolina but have not registered in any degree programs?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.last_name FROM Students AS T1 JOIN Addresses AS T2 ON T1.current_address_id  =  T2.address_id WHERE T2.state_province_county  =  'NorthCarolina' EXCEPT SELECT DISTINCT T3.last_name FROM Students AS T3 JOIN Student_Enrolment AS T4 ON T3.student_id  =  T4.student_id"},{"data":"Question: Show the date and id of the transcript with at least 2 course results.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"},{"data":"Question: What is the date and id of the transcript with at least 2 courses listed?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id HAVING count(*)  >=  2"},{"data":"Question: What is the phone number of the man with the first name Timmothy and the last name Ward?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT cell_mobile_number FROM Students WHERE first_name  =  'Timmothy' AND last_name  =  'Ward'"},{"data":"Question: What is the mobile phone number of the student named Timmothy Ward ?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: select cell_mobile_number from students where first_name  =  'timmothy' and last_name  =  'ward'"},{"data":"Question: Who is the first student to register? List the first name, middle name and last name.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"},{"data":"Question: What is the first, middle, and last name of the first student to register?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_first_registered ASC LIMIT 1"},{"data":"Question: Who is the earliest graduate of the school? List the first name, middle name and last name.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"},{"data":"Question: What is the first, middle, and last name of the earliest school graduate?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT first_name ,  middle_name ,  last_name FROM Students ORDER BY date_left ASC LIMIT 1"},{"data":"Question: Whose permanent address is different from his or her current address? List his or her first name.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"},{"data":"Question: What is the first name of the student whose permanent address is different from his or her current one?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT first_name FROM Students WHERE current_address_id != permanent_address_id"},{"data":"Question: Which address holds the most number of students currently? List the address id and all lines.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the id, line 1, and line 2 of the address with the most students?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T1.address_id ,  T1.line_1 ,  T1.line_2 FROM Addresses AS T1 JOIN Students AS T2 ON T1.address_id  =  T2.current_address_id GROUP BY T1.address_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: On average, when were the transcripts printed?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT avg(transcript_date) FROM Transcripts"},{"data":"Question: What is the average transcript date?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT avg(transcript_date) FROM Transcripts"},{"data":"Question: When is the first transcript released? List the date and details.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"},{"data":"Question: What is the earliest date of a transcript release, and what details can you tell me?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT transcript_date ,  other_details FROM Transcripts ORDER BY transcript_date ASC LIMIT 1"},{"data":"Question: How many transcripts are released?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) FROM Transcripts"},{"data":"Question: How many transcripts are listed?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) FROM Transcripts"},{"data":"Question: What is the last transcript release date?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"},{"data":"Question: When was the last transcript released?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT transcript_date FROM Transcripts ORDER BY transcript_date DESC LIMIT 1"},{"data":"Question: How many times at most can a course enrollment result show in different transcripts? Also show the course enrollment id.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the maximum number of times that a course shows up in different transcripts and what is that course's enrollment id?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(*) ,  student_course_id FROM Transcript_Contents GROUP BY student_course_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show the date of the transcript which shows the least number of results, also list the id.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"},{"data":"Question: What is the date and id of the transcript with the least number of results?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT T2.transcript_date ,  T1.transcript_id FROM Transcript_Contents AS T1 JOIN Transcripts AS T2 ON T1.transcript_id  =  T2.transcript_id GROUP BY T1.transcript_id ORDER BY count(*) ASC LIMIT 1"},{"data":"Question: Find the semester when both Master students and Bachelor students got enrolled in.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"},{"data":"Question: What is the id of the semester that had both Masters and Bachelors students enrolled?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Master' INTERSECT SELECT DISTINCT T2.semester_id FROM Degree_Programs AS T1 JOIN Student_Enrolment AS T2 ON T1.degree_program_id  =  T2.degree_program_id WHERE degree_summary_name  =  'Bachelor'"},{"data":"Question: How many different addresses do the students currently live?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(DISTINCT current_address_id) FROM Students"},{"data":"Question: What are the different addresses that have students living there?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT count(DISTINCT current_address_id) FROM Students"},{"data":"Question: List all the student details in reversed lexicographical order.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT other_student_details FROM Students ORDER BY other_student_details DESC"},{"data":"Question: What other details can you tell me about students in reverse alphabetical order?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT other_student_details FROM Students ORDER BY other_student_details DESC"},{"data":"Question: Describe the section h.\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT section_description FROM Sections WHERE section_name  =  'h'"},{"data":"Question: What is the description for the section named h?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: SELECT section_description FROM Sections WHERE section_name  =  'h'"},{"data":"Question: Find the first name of the students who permanently live in the country Haiti or have the cell phone number 09700166582 .\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"},{"data":"Question: What are the first names of the students who live in Haiti permanently or have the cell phone number 09700166582 ?\nSchema: 'Addresses' [ Primary Key: 'address_id' int, 'line_1' text, 'line_2' text, 'line_3' text, 'city' text, 'zip_postcode' text, 'state_province_county' text, 'country' text, 'other_address_details' text];\n'Courses' [ Primary Key: 'course_id' int, 'course_name' text, 'course_description' text, 'other_details' text];\n'Departments' [ Primary Key: 'department_id' int, 'department_name' text, 'department_description' text, 'other_details' text];\n'Degree_Programs' [ Primary Key: 'degree_program_id' int, 'department_id' int, 'degree_summary_name' text, 'degree_summary_description' text, 'other_details' text, Foreign Key: 'department_id' int from 'Degree_Programs' 'department_id'];\n'Sections' [ Primary Key: 'section_id' int, 'course_id' int, 'section_name' text, 'section_description' text, 'other_details' text, Foreign Key: 'course_id' int from 'Sections' 'course_id'];\n'Semesters' [ Primary Key: 'semester_id' int, 'semester_name' text, 'semester_description' text, 'other_details' text];\n'Students' [ Primary Key: 'student_id' int, 'current_address_id' int, 'permanent_address_id' int, 'first_name' text, 'middle_name' text, 'last_name' text, 'cell_mobile_number' text, 'email_address' text, 'ssn' text, 'date_first_registered' time, 'date_left' time, 'other_student_details' text, Foreign Key: 'current_address_id' int from 'Students' 'current_address_id', Foreign Key: 'permanent_address_id' int from 'Students' 'permanent_address_id'];\n'Student_Enrolment' [ Primary Key: 'student_enrolment_id' int, 'degree_program_id' int, 'semester_id' int, 'student_id' int, 'other_details' text, Foreign Key: 'degree_program_id' int from 'Student_Enrolment' 'degree_program_id', Foreign Key: 'semester_id' int from 'Student_Enrolment' 'semester_id', Foreign Key: 'student_id' int from 'Student_Enrolment' 'student_id'];\n'Student_Enrolment_Courses' [ Primary Key: 'student_course_id' int, 'course_id' int, 'student_enrolment_id' int, Foreign Key: 'course_id' int from 'Student_Enrolment_Courses' 'course_id', Foreign Key: 'student_enrolment_id' int from 'Student_Enrolment_Courses' 'student_enrolment_id'];\n'Transcripts' [ Primary Key: 'transcript_id' int, 'transcript_date' time, 'other_details' text];\n'Transcript_Contents' [ 'student_course_id' int, 'transcript_id' int, Foreign Key: 'student_course_id' int from 'Transcript_Contents' 'student_course_id', Foreign Key: 'transcript_id' int from 'Transcript_Contents' 'transcript_id'];\n\nAnswer: select t1.first_name from students as t1 join addresses as t2 on t1.permanent_address_id  =  t2.address_id where t2.country  =  'haiti' or t1.cell_mobile_number  =  '09700166582'"},{"data":"Question: List the title of all cartoons in alphabetical order.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Title FROM Cartoon ORDER BY title"},{"data":"Question: What are the titles of the cartoons sorted alphabetically?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Title FROM Cartoon ORDER BY title"},{"data":"Question: List all cartoon directed by \"Ben Jones\".\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"},{"data":"Question: What are the names of all cartoons directed by Ben Jones?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\";"},{"data":"Question: How many cartoons were written by \"Joseph Kuhr\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"},{"data":"Question: What is the number of cartoones written by Joseph Kuhr?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(*) FROM Cartoon WHERE Written_by = \"Joseph Kuhr\";"},{"data":"Question: list all cartoon titles and their directors ordered by their air date\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"},{"data":"Question: What is the name and directors of all the cartoons that are ordered by air date?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT title ,  Directed_by FROM Cartoon ORDER BY Original_air_date"},{"data":"Question: List the title of all cartoon directed by \"Ben Jones\" or \"Brandon Vietti\".\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"},{"data":"Question: What are the titles of all cartoons directed by Ben Jones or Brandon Vietti?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Title FROM Cartoon WHERE Directed_by = \"Ben Jones\" OR Directed_by = \"Brandon Vietti\";"},{"data":"Question: Which country has the most of TV Channels? List the country and number of TV Channels it has.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"},{"data":"Question: What is the country with the most number of TV Channels and how many does it have?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Country ,  count(*) FROM TV_Channel GROUP BY Country ORDER BY count(*) DESC LIMIT 1;"},{"data":"Question: List the number of different series names and contents in the TV Channel table.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"},{"data":"Question: How many different series and contents are listed in the TV Channel table?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(DISTINCT series_name) ,  count(DISTINCT content) FROM TV_Channel;"},{"data":"Question: What is the content of TV Channel with serial name \"Sky Radio\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"},{"data":"Question: What is the content of the series Sky Radio?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Content FROM TV_Channel WHERE series_name = \"Sky Radio\";"},{"data":"Question: What is the Package Option of TV Channel with serial name \"Sky Radio\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"},{"data":"Question: What are the Package Options of the TV Channels whose series names are Sky Radio?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Package_Option FROM TV_Channel WHERE series_name = \"Sky Radio\";"},{"data":"Question: How many TV Channel using language English?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"},{"data":"Question: How many TV Channels use the English language?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(*) FROM TV_Channel WHERE LANGUAGE = \"English\";"},{"data":"Question: List the language used least number of TV Channel. List language and number of TV Channel.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"},{"data":"Question: What are the languages used by the least number of TV Channels and how many channels use it?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC LIMIT 1;"},{"data":"Question: List each language and the number of TV Channels using it.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"},{"data":"Question: For each language, list the number of TV Channels that use it.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT LANGUAGE ,  count(*) FROM TV_Channel GROUP BY LANGUAGE"},{"data":"Question: What is the TV Channel that shows the cartoon \"The Rise of the Blue Beetle!\"? List the TV Channel's series name.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"},{"data":"Question: What is the series name of the TV Channel that shows the cartoon \"The Rise of the Blue Beetle\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.series_name FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T2.Title = \"The Rise of the Blue Beetle!\";"},{"data":"Question: List the title of all  Cartoons showed on TV Channel with series name \"Sky Radio\".\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"},{"data":"Question: What is the title of all the cartools that are on the TV Channel with the series name \"Sky Radio\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T2.Title FROM TV_Channel AS T1 JOIN Cartoon AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"},{"data":"Question: List the Episode of all TV series sorted by rating.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Episode FROM TV_series ORDER BY rating"},{"data":"Question: What are all of the episodes ordered by ratings?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Episode FROM TV_series ORDER BY rating"},{"data":"Question: List top 3 highest Rating  TV series. List the TV series's Episode and Rating.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"},{"data":"Question: What are 3 most highly rated episodes in the TV series table and what were those ratings?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Episode ,  Rating FROM TV_series ORDER BY Rating DESC LIMIT 3;"},{"data":"Question: What is minimum and maximum share of TV series?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT max(SHARE) , min(SHARE) FROM TV_series;"},{"data":"Question: What is the maximum and minimum share for the TV series?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT max(SHARE) , min(SHARE) FROM TV_series;"},{"data":"Question: What is the air date of TV series with Episode \"A Love of a Lifetime\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"},{"data":"Question: When did the episode \"A Love of a Lifetime\" air?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Air_Date FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"},{"data":"Question: What is Weekly Rank of TV series with Episode \"A Love of a Lifetime\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"},{"data":"Question: What is the weekly rank for the episode \"A Love of a Lifetime\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Weekly_Rank FROM TV_series WHERE Episode = \"A Love of a Lifetime\";"},{"data":"Question: What is the TV Channel of TV series with Episode \"A Love of a Lifetime\"? List the TV Channel's series name.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"},{"data":"Question: What is the name of the series that has the episode \"A Love of a Lifetime\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.series_name FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T2.Episode = \"A Love of a Lifetime\";"},{"data":"Question: List the Episode of all  TV series showed on TV Channel with series name \"Sky Radio\".\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"},{"data":"Question: What is the episode for the TV series named \"Sky Radio\"?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T2.Episode FROM TV_Channel AS T1 JOIN TV_series AS T2 ON T1.id = T2.Channel WHERE T1.series_name = \"Sky Radio\";"},{"data":"Question: Find the number of cartoons directed by each of the listed directors.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"},{"data":"Question: How many cartoons did each director create?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT count(*) ,  Directed_by FROM cartoon GROUP BY Directed_by"},{"data":"Question: Find the production code and channel of the most recently aired cartoon .\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: select production_code ,  channel from cartoon order by original_air_date desc limit 1"},{"data":"Question: What is the produdction code and channel of the most recent cartoon ?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: select production_code ,  channel from cartoon order by original_air_date desc limit 1"},{"data":"Question: Find the package choice and series name of the TV channel that has high definition TV.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""},{"data":"Question: What are the package options and the name of the series for the TV Channel that supports high definition TV?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT package_option ,  series_name FROM TV_Channel WHERE hight_definition_TV  =  \"yes\""},{"data":"Question: which countries' tv channels are playing some cartoon written by Todd Casey?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"},{"data":"Question: What are the countries that have cartoons on TV that were written by Todd Casey?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"},{"data":"Question: which countries' tv channels are not playing any cartoon written by Todd Casey?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"},{"data":"Question: What are the countries that are not playing cartoons written by Todd Casey?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT country FROM TV_Channel EXCEPT SELECT T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.written_by  =  'Todd Casey'"},{"data":"Question: Find the series name and country of the tv channel that is playing some cartoons directed by Ben Jones and Michael Chang?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"},{"data":"Question: What is the series name and country of all TV channels that are playing cartoons directed by Ben Jones and cartoons directed by Michael Chang?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Michael Chang' INTERSECT SELECT T1.series_name ,  T1.country FROM TV_Channel AS T1 JOIN cartoon AS T2 ON T1.id = T2.Channel WHERE T2.directed_by  =  'Ben Jones'"},{"data":"Question: find the pixel aspect ratio and nation of the tv channels that do not use English.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"},{"data":"Question: What is the pixel aspect ratio and country of origin for all TV channels that do not use English?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT Pixel_aspect_ratio_PAR ,  country FROM tv_channel WHERE LANGUAGE != 'English'"},{"data":"Question: find id of the tv channels that from the countries where have more than two tv channels.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"},{"data":"Question: What are the ids of all tv channels that have more than 2 TV channels?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT id FROM tv_channel GROUP BY country HAVING count(*)  >  2"},{"data":"Question: find the id of tv channels that do not play any cartoon directed by Ben Jones.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"},{"data":"Question: What are the ids of the TV channels that do not have any cartoons directed by Ben Jones?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT id FROM TV_Channel EXCEPT SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones'"},{"data":"Question: find the package option of the tv channel that do not have any cartoon directed by Ben Jones.\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"},{"data":"Question: What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones?\nSchema: 'TV_Channel' [ Primary Key: 'id' text, 'series_name' text, 'Country' text, 'Language' text, 'Content' text, 'Pixel_aspect_ratio_PAR' text, 'Hight_definition_TV' text, 'Pay_per_view_PPV' text, 'Package_Option' text];\n'TV_series' [ Primary Key: 'id' int, 'Episode' text, 'Air_Date' text, 'Rating' text, 'Share' int, '18_49_Rating_Share' text, 'Viewers_m' text, 'Weekly_Rank' int, 'Channel' text, Foreign Key: 'Channel' text from 'TV_series' 'Channel'];\n'Cartoon' [ Primary Key: 'id' int, 'Title' text, 'Directed_by' text, 'Written_by' text, 'Original_air_date' text, 'Production_code' int, 'Channel' text, Foreign Key: 'Channel' text from 'Cartoon' 'Channel'];\n\nAnswer: SELECT package_option FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by  =  'Ben Jones')"},{"data":"Question: How many poker players are there?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT count(*) FROM poker_player"},{"data":"Question: Count the number of poker players.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT count(*) FROM poker_player"},{"data":"Question: List the earnings of poker players in descending order.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Earnings FROM poker_player ORDER BY Earnings DESC"},{"data":"Question: What are the earnings of poker players, ordered descending by value?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Earnings FROM poker_player ORDER BY Earnings DESC"},{"data":"Question: List the final tables made and the best finishes of poker players.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Final_Table_Made ,  Best_Finish FROM poker_player"},{"data":"Question: What are the final tables made and best finishes for all poker players?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Final_Table_Made ,  Best_Finish FROM poker_player"},{"data":"Question: What is the average earnings of poker players?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT avg(Earnings) FROM poker_player"},{"data":"Question: Return the average earnings across all poker players.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT avg(Earnings) FROM poker_player"},{"data":"Question: What is the money rank of the poker player with the highest earnings?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"},{"data":"Question: Return the money rank of the player with the greatest earnings.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Money_Rank FROM poker_player ORDER BY Earnings DESC LIMIT 1"},{"data":"Question: What is the maximum number of final tables made among poker players with earnings less than 200000?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"},{"data":"Question: Return the maximum final tables made across all poker players who have earnings below 200000.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT max(Final_Table_Made) FROM poker_player WHERE Earnings  <  200000"},{"data":"Question: What are the names of poker players?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"},{"data":"Question: Return the names of all the poker players.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID"},{"data":"Question: What are the names of poker players whose earnings is higher than 300000?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"},{"data":"Question: Give the names of poker players who have earnings above 300000.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Earnings  >  300000"},{"data":"Question: List the names of poker players ordered by the final tables made in ascending order.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"},{"data":"Question: What are the names of poker players, ordered ascending by the number of final tables they have made?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Final_Table_Made"},{"data":"Question: What is the birth date of the poker player with the lowest earnings?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"},{"data":"Question: Return the birth date of the poker player with the lowest earnings.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Birth_Date FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings ASC LIMIT 1"},{"data":"Question: What is the money rank of the tallest poker player?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"},{"data":"Question: Return the money rank of the poker player with the greatest height.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T2.Money_Rank FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1"},{"data":"Question: What is the average earnings of poker players with height higher than 200?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"},{"data":"Question: Give average earnings of poker players who are taller than 200.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT avg(T2.Earnings) FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  200"},{"data":"Question: What are the names of poker players in descending order of earnings?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"},{"data":"Question: Return the names of poker players sorted by their earnings descending.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT T1.Name FROM people AS T1 JOIN poker_player AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Earnings DESC"},{"data":"Question: What are different nationalities of people and the corresponding number of people from each nation?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"},{"data":"Question: How many people are there of each nationality?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Nationality ,  COUNT(*) FROM people GROUP BY Nationality"},{"data":"Question: What is the most common nationality of people?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: Give the nationality that is most common across all people.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Nationality FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: What are the nationalities that are shared by at least two people?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"},{"data":"Question: Return the nationalities for which there are two or more people.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Nationality FROM people GROUP BY Nationality HAVING COUNT(*)  >=  2"},{"data":"Question: List the names and birth dates of people in ascending alphabetical order of name.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"},{"data":"Question: What are the names and birth dates of people, ordered by their names in alphabetical order?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Name ,  Birth_Date FROM people ORDER BY Name ASC"},{"data":"Question: Show names of people whose nationality is not \"Russia\".\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Name FROM people WHERE Nationality != \"Russia\""},{"data":"Question: What are the names of people who are not from Russia?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Name FROM people WHERE Nationality != \"Russia\""},{"data":"Question: List the names of people that are not poker players.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"},{"data":"Question: What are the names of people who do not play poker?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM poker_player)"},{"data":"Question: How many distinct nationalities are there?\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT count(DISTINCT Nationality) FROM people"},{"data":"Question: Count the number of different nationalities.\nSchema: 'poker_player' [ Primary Key: 'Poker_Player_ID' int, 'People_ID' int, 'Final_Table_Made' int, 'Best_Finish' int, 'Money_Rank' int, 'Earnings' int, Foreign Key: 'People_ID' int from 'poker_player' 'People_ID'];\n'people' [ Primary Key: 'People_ID' int, 'Nationality' text, 'Name' text, 'Birth_Date' text, 'Height' int];\n\nAnswer: SELECT count(DISTINCT Nationality) FROM people"},{"data":"Question: How many states are there?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT count(*) FROM area_code_state"},{"data":"Question: List the contestant numbers and names, ordered by contestant name descending.\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT contestant_number ,  contestant_name FROM contestants ORDER BY contestant_name DESC"},{"data":"Question: List the vote ids, phone numbers and states of all votes.\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT vote_id ,  phone_number ,  state FROM votes"},{"data":"Question: What are the maximum and minimum values of area codes?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT max(area_code) ,  min(area_code) FROM area_code_state"},{"data":"Question: What is last date created of votes from the state 'CA'?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT max(created) FROM votes WHERE state  =  'CA'"},{"data":"Question: What are the names of the contestants whose names are not 'Jessie Alloway'\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT contestant_name FROM contestants WHERE contestant_name != 'Jessie Alloway'"},{"data":"Question: What are the distinct states and create time of all votes?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT DISTINCT state ,  created FROM votes"},{"data":"Question: What are the contestant numbers and names of the contestants who had at least two votes?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number HAVING count(*)  >=  2"},{"data":"Question: Of all the contestants who got voted, what is the contestant number and name of the contestant who got least votes?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT T1.contestant_number , T1.contestant_name FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number GROUP BY T1.contestant_number ORDER BY count(*) ASC LIMIT 1"},{"data":"Question: What are the number of votes from state 'NY' or 'CA'?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT count(*) FROM votes WHERE state  =  'NY' OR state  =  'CA'"},{"data":"Question: How many contestants did not get voted?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT count(*) FROM contestants WHERE contestant_number NOT IN ( SELECT contestant_number FROM votes )"},{"data":"Question: What is the area code in which the most voters voted?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT T1.area_code FROM area_code_state AS T1 JOIN votes AS T2 ON T1.state  =  T2.state GROUP BY T1.area_code ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What are the create dates, states, and phone numbers of the votes that were for the contestant named 'Tabatha Gehling'?\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT T2.created ,  T2.state ,  T2.phone_number FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number WHERE T1.contestant_name  =  'Tabatha Gehling'"},{"data":"Question: List the area codes in which voters voted both for the contestant 'Tabatha Gehling' and the contestant 'Kelly Clauss'.\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Tabatha Gehling' INTERSECT SELECT T3.area_code FROM contestants AS T1 JOIN votes AS T2 ON T1.contestant_number  =  T2.contestant_number JOIN area_code_state AS T3 ON T2.state  =  T3.state WHERE T1.contestant_name  =  'Kelly Clauss'"},{"data":"Question: Return the names of the contestants whose names contain the substring 'Al' .\nSchema: 'AREA_CODE_STATE' [ Primary Key: 'area_code' int, 'state' text];\n'CONTESTANTS' [ Primary Key: 'contestant_number' int, 'contestant_name' text];\n'VOTES' [ Primary Key: 'vote_id' int, 'phone_number' int, 'state' text, 'contestant_number' int, 'created' time, Foreign Key: 'state' text from 'VOTES' 'state', Foreign Key: 'contestant_number' int from 'VOTES' 'contestant_number'];\n\nAnswer: select contestant_name from contestants where contestant_name like \"%al%\""},{"data":"Question: What are the names of all the countries that became independent after 1950?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE IndepYear  >  1950"},{"data":"Question: Give the names of the nations that were founded after 1950.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE IndepYear  >  1950"},{"data":"Question: How many countries have a republic as their form of government?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""},{"data":"Question: How many countries have governments that are republics?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) FROM country WHERE GovernmentForm  =  \"Republic\""},{"data":"Question: What is the total surface area of the countries in the Caribbean region?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""},{"data":"Question: How much surface area do the countires in the Carribean cover together?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(SurfaceArea) FROM country WHERE Region  =  \"Caribbean\""},{"data":"Question: Which continent is Anguilla in?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Continent FROM country WHERE Name  =  \"Anguilla\""},{"data":"Question: What is the continent name which Anguilla belongs to?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Continent FROM country WHERE Name  =  \"Anguilla\""},{"data":"Question: Which region is the city Kabul located in?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""},{"data":"Question: What region is Kabul in?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Region FROM country AS T1 JOIN city AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Name  =  \"Kabul\""},{"data":"Question: Which language is the most popular in Aruba?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"},{"data":"Question: What language is predominantly spoken in Aruba?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\" ORDER BY Percentage DESC LIMIT 1"},{"data":"Question: What are the population and life expectancies in Brazil?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""},{"data":"Question: Give me Brazil\u2019s population and life expectancies.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Population ,  LifeExpectancy FROM country WHERE Name  =  \"Brazil\""},{"data":"Question: What are the region and population of Angola?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""},{"data":"Question: What region does Angola belong to and what is its population?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Population ,  Region FROM country WHERE Name  =  \"Angola\""},{"data":"Question: What is the average expected life expectancy for countries in the region of Central Africa?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""},{"data":"Question: How long is the people\u2019s average life expectancy in Central Africa?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(LifeExpectancy) FROM country WHERE Region  =  \"Central Africa\""},{"data":"Question: What is the name of country that has the shortest life expectancy in Asia?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"},{"data":"Question: Give the name of the country in Asia with the lowest life expectancy.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE Continent  =  \"Asia\" ORDER BY LifeExpectancy LIMIT 1"},{"data":"Question: What is the total population and maximum GNP in Asia?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""},{"data":"Question: How many people live in Asia, and what is the largest GNP among them?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) ,  max(GNP) FROM country WHERE Continent  =  \"Asia\""},{"data":"Question: What is the average life expectancy in African countries that are republics?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""},{"data":"Question: Give the average life expectancy for countries in Africa which are republics?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(LifeExpectancy) FROM country WHERE Continent  =  \"Africa\" AND GovernmentForm  =  \"Republic\""},{"data":"Question: What is the total surface area of the continents Asia and Europe?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""},{"data":"Question: Give the total surface area covered by countries in Asia or Europe.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(SurfaceArea) FROM country WHERE Continent  =  \"Asia\" OR Continent  =  \"Europe\""},{"data":"Question: How many people live in Gelderland district?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""},{"data":"Question: What is the total population of Gelderland district?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) FROM city WHERE District  =  \"Gelderland\""},{"data":"Question: What is the average GNP and total population in all nations whose government is US territory?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""},{"data":"Question: Give the mean GNP and total population of nations which are considered US territory.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(GNP) ,  sum(population) FROM country WHERE GovernmentForm  =  \"US Territory\""},{"data":"Question: How many unique languages are spoken in the world?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"},{"data":"Question: What is the number of distinct languages used around the world?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(DISTINCT LANGUAGE) FROM countrylanguage"},{"data":"Question: How many type of governments are in Africa?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""},{"data":"Question: How many different forms of governments are there in Africa?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(DISTINCT GovernmentForm) FROM country WHERE Continent  =  \"Africa\""},{"data":"Question: What is the total number of languages used in Aruba?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""},{"data":"Question: How many languages are spoken in Aruba?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Aruba\""},{"data":"Question: How many official languages does Afghanistan have?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""},{"data":"Question: How many official languages are spoken in Afghanistan?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(*) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Name  =  \"Afghanistan\" AND IsOfficial  =  \"T\""},{"data":"Question: What is name of the country that speaks the largest number of languages?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: Give the name of the nation that uses the greatest amount of languages.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: Which continent has the most diverse languages?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: Which continent speaks the most languages?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Continent FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Continent ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: How many countries speak both English and Dutch?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"},{"data":"Question: What is the number of nations that use English and Dutch?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(*) FROM (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\")"},{"data":"Question: What are the names of nations speak both English and French?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""},{"data":"Question: Give the names of nations that speak both English and French.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\""},{"data":"Question: What are the names of nations where both English and French are official languages?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""},{"data":"Question: Give the names of countries with English and French as official languages.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\" INTERSECT SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"French\" AND T2.IsOfficial  =  \"T\""},{"data":"Question: What is the number of distinct continents where Chinese is spoken?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""},{"data":"Question: How many continents speak Chinese?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT( DISTINCT Continent) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Chinese\""},{"data":"Question: What are the regions that use English or Dutch?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""},{"data":"Question: Which regions speak Dutch or English?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT T1.Region FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" OR T2.Language  =  \"Dutch\""},{"data":"Question: What are the countries where either English or Dutch is the official language ?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"english\" and isofficial  =  \"t\" union select t1.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode where t2.language  =  \"dutch\" and isofficial  =  \"t\""},{"data":"Question: Which countries have either English or Dutch as an official language?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND IsOfficial  =  \"T\" UNION SELECT * FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"Dutch\" AND IsOfficial  =  \"T\""},{"data":"Question: Which language is the most popular on the Asian continent?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"},{"data":"Question: What is the language that is used by the largest number of Asian nations?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.Continent  =  \"Asia\" GROUP BY T2.Language ORDER BY COUNT (*) DESC LIMIT 1"},{"data":"Question: Which languages are spoken by only one country in republic governments?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"},{"data":"Question: What languages are only used by a single country with a republic government?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.GovernmentForm  =  \"Republic\" GROUP BY T2.Language HAVING COUNT(*)  =  1"},{"data":"Question: Find the city with the largest population that uses English.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"},{"data":"Question: What is the most populace city that speaks English?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T1.Name ,  T1.Population FROM city AS T1 JOIN countrylanguage AS T2 ON T1.CountryCode  =  T2.CountryCode WHERE T2.Language  =  \"English\" ORDER BY T1.Population DESC LIMIT 1"},{"data":"Question: Find the name, population and expected life length of asian country with the largest area?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"},{"data":"Question: What are the name, population, and life expectancy of the largest Asian country by land?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  Population ,  LifeExpectancy FROM country WHERE Continent  =  \"Asia\" ORDER BY SurfaceArea DESC LIMIT 1"},{"data":"Question: What is average life expectancy in the countries where English is not the official language?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"},{"data":"Question: Give the mean life expectancy of countries in which English is not the official language.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT avg(LifeExpectancy) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\" AND T2.IsOfficial  =  \"T\")"},{"data":"Question: What is the total number of people living in the nations that do not use English?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"},{"data":"Question: How many people live in countries that do not speak English?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) FROM country WHERE Name NOT IN (SELECT T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T2.Language  =  \"English\")"},{"data":"Question: What is the official language spoken in the country whose head of state is Beatrix?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""},{"data":"Question: What is the official language used in the country the name of whose head of state is Beatrix.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT T2.Language FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE T1.HeadOfState  =  \"Beatrix\" AND T2.IsOfficial  =  \"T\""},{"data":"Question: What is the total number of unique official languages spoken in the countries that are founded before 1930?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""},{"data":"Question: For the countries founded before 1930, what is the total number of distinct official languages?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(DISTINCT T2.Language) FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode WHERE  IndepYear  <  1930 AND T2.IsOfficial  =  \"T\""},{"data":"Question: What are the countries that have greater surface area than any country in Europe?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"},{"data":"Question: Which countries have greater area than that of any country in Europe?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE SurfaceArea  >  (SELECT min(SurfaceArea) FROM country WHERE Continent  =  \"Europe\")"},{"data":"Question: What are the African countries that have a  population less than any country in Asia?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT max(population) FROM country WHERE Continent  =  \"Asia\")"},{"data":"Question: Which African countries have a smaller population than that of any country in Asia?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE Continent  =  \"Africa\"  AND population  <  (SELECT min(population) FROM country WHERE Continent  =  \"Asia\")"},{"data":"Question: Which Asian countries have a population that is larger than any country in Africa?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT max(population) FROM country WHERE Continent  =  \"Africa\")"},{"data":"Question: What are the Asian countries which have a population larger than that of any country in Africa?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE Continent  =  \"Asia\"  AND population  >  (SELECT min(population) FROM country WHERE Continent  =  \"Africa\")"},{"data":"Question: What are the country codes for countries that do not speak English?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""},{"data":"Question: Return the country codes for countries that do not speak English.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT CountryCode FROM countrylanguage EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""},{"data":"Question: What are the country codes of countries where people use languages other than English?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""},{"data":"Question: Give the country codes for countries in which people speak langauges that are not English.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT CountryCode FROM countrylanguage WHERE LANGUAGE != \"English\""},{"data":"Question: What are the codes of the countries that do not speak English and whose government forms are not Republic?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""},{"data":"Question: Return the codes of countries that do not speak English and do not have Republics for governments.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Code FROM country WHERE GovernmentForm != \"Republic\" EXCEPT SELECT CountryCode FROM countrylanguage WHERE LANGUAGE  =  \"English\""},{"data":"Question: Which cities are in European countries where English is not the official language?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"},{"data":"Question: What are the names of cities in Europe for which English is not the official language?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT T2.Name FROM country AS T1 JOIN city AS T2 ON T2.CountryCode  =  T1.Code WHERE T1.Continent  =  'Europe' AND T1.Name NOT IN (SELECT T3.Name FROM country AS T3 JOIN countrylanguage AS T4 ON T3.Code  =  T4.CountryCode WHERE T4.IsOfficial  =  'T' AND T4.Language  =  'English')"},{"data":"Question: Which unique cities are in Asian countries where Chinese is the official language ?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: select distinct t3.name from country as t1 join countrylanguage as t2 on t1.code  =  t2.countrycode join city as t3 on t1.code  =  t3.countrycode where t2.isofficial  =  't' and t2.language  =  'chinese' and t1.continent  =  \"asia\""},{"data":"Question: Return the different names of cities that are in Asia and for which Chinese is the official language.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT DISTINCT T3.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode JOIN city AS T3 ON T1.Code  =  T3.CountryCode WHERE T2.IsOfficial  =  'T' AND T2.Language  =  'Chinese' AND T1.Continent  =  \"Asia\""},{"data":"Question: What are the name, independence year, and surface area of the country with the smallest population?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"},{"data":"Question: Give the name, year of independence, and surface area of the country that has the lowest population.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  SurfaceArea ,  IndepYear FROM country ORDER BY Population LIMIT 1"},{"data":"Question: What are the population, name and leader of the country with the largest area?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"},{"data":"Question: Give the name, population, and head of state for the country that has the largest area.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  population ,  HeadOfState FROM country ORDER BY SurfaceArea DESC LIMIT 1"},{"data":"Question: Return the country name and the numbers of languages spoken for each country that speaks at least 3 languages.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"},{"data":"Question: What are the names of countries that speak more than 2 languages, as well as how many languages they speak?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT COUNT(T2.Language) ,  T1.Name FROM country AS T1 JOIN countrylanguage AS T2 ON T1.Code  =  T2.CountryCode GROUP BY T1.Name HAVING COUNT(*)  >  2"},{"data":"Question: Find the number of cities in each district whose population is greater than the average population of cities?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"},{"data":"Question: How many cities in each district have a population that is above the average population across all cities?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) ,  District FROM city WHERE Population  >  (SELECT avg(Population) FROM city) GROUP BY District"},{"data":"Question: Find the government form name and total population for each government form whose average life expectancy is longer than 72.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"},{"data":"Question: What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) ,  GovernmentForm FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy)  >  72"},{"data":"Question: Find the average life expectancy and total population for each continent where the average life expectancy is shorter than 72?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"},{"data":"Question: What are the different continents and the total popuation and average life expectancy corresponding to each, for continents that have an average life expectancy less than 72?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT sum(Population) ,  avg(LifeExpectancy) ,  Continent FROM country GROUP BY Continent HAVING avg(LifeExpectancy)  <  72"},{"data":"Question: What are the names and areas of countries with the top 5 largest area?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"},{"data":"Question: Return the names and surface areas of the 5 largest countries.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name ,  SurfaceArea FROM country ORDER BY SurfaceArea DESC LIMIT 5"},{"data":"Question: What are names of countries with the top 3 largest population?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country ORDER BY Population DESC LIMIT 3"},{"data":"Question: Return the names of the 3 most populated countries.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country ORDER BY Population DESC LIMIT 3"},{"data":"Question: What are the names of the nations with the 3 lowest populations?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country ORDER BY Population ASC LIMIT 3"},{"data":"Question: Return the names of the 3 countries with the fewest people.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country ORDER BY Population ASC LIMIT 3"},{"data":"Question: how many countries are in Asia?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) FROM country WHERE continent  =  \"Asia\""},{"data":"Question: Count the number of countries in Asia.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) FROM country WHERE continent  =  \"Asia\""},{"data":"Question: What are the names of the countries that are in the continent of Europe and have a population of 80000?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""},{"data":"Question: Give the names of countries that are in Europe and have a population equal to 80000.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT Name FROM country WHERE continent  =  \"Europe\" AND Population  =  \"80000\""},{"data":"Question: What is the total population and average area of countries in the continent of North America whose area is bigger than 3000 ?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"},{"data":"Question: Give the total population and average surface area corresponding to countries in North America that have a surface area greater than 3000 .\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: select sum(population) ,  avg(surfacearea) from country where continent  =  \"north america\" and surfacearea  >  3000"},{"data":"Question: What are the cities whose population is between 160000 and 900000?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT name FROM city WHERE Population BETWEEN 160000 AND 900000"},{"data":"Question: Return the names of cities that have a population between 160000 and 900000 .\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: select name from city where population between 160000 and 900000"},{"data":"Question: Which language is spoken by the largest number of countries?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Give the language that is spoken in the most countries.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT LANGUAGE FROM countrylanguage GROUP BY LANGUAGE ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the language spoken by the largest percentage of people in each country?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"},{"data":"Question: What are the country codes of the different countries, and what are the languages spoken by the greatest percentage of people for each?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT LANGUAGE ,  CountryCode ,  max(Percentage) FROM countrylanguage GROUP BY CountryCode"},{"data":"Question: What is the total number of countries where Spanish is spoken by the largest percentage of people?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"},{"data":"Question: Count the number of countries for which Spanish is the predominantly spoken language.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT count(*) ,   max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"},{"data":"Question: What are the codes of countries where Spanish is spoken by the largest percentage of people?\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"},{"data":"Question: Return the codes of countries for which Spanish is the predominantly spoken language.\nSchema: 'city' [ Primary Key: 'ID' int, 'Name' text, 'CountryCode' text, 'District' text, 'Population' int, Foreign Key: 'CountryCode' text from 'city' 'CountryCode'];\n'sqlite_sequence' [ 'name' text, 'seq' text];\n'country' [ Primary Key: 'Code' text, 'Name' text, 'Continent' text, 'Region' text, 'SurfaceArea' int, 'IndepYear' int, 'Population' int, 'LifeExpectancy' int, 'GNP' int, 'GNPOld' int, 'LocalName' text, 'GovernmentForm' text, 'HeadOfState' text, 'Capital' int, 'Code2' text];\n'countrylanguage' [ Primary Key: 'CountryCode' text, 'Language' text, 'IsOfficial' text, 'Percentage' int, Foreign Key: 'CountryCode' text from 'countrylanguage' 'CountryCode'];\n\nAnswer: SELECT CountryCode ,  max(Percentage) FROM countrylanguage WHERE LANGUAGE  =  \"Spanish\" GROUP BY CountryCode"},{"data":"Question: How many conductors are there?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT count(*) FROM conductor"},{"data":"Question: Count the number of conductors.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT count(*) FROM conductor"},{"data":"Question: List the names of conductors in ascending order of age.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor ORDER BY Age ASC"},{"data":"Question: What are the names of conductors, ordered by age?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor ORDER BY Age ASC"},{"data":"Question: What are the names of conductors whose nationalities are not \"USA\"?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor WHERE Nationality != 'USA'"},{"data":"Question: Return the names of conductors that do not have the nationality \"USA\".\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor WHERE Nationality != 'USA'"},{"data":"Question: What are the record companies of orchestras in descending order of years in which they were founded?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"},{"data":"Question: Return the record companies of orchestras, sorted descending by the years in which they were founded.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company FROM orchestra ORDER BY Year_of_Founded DESC"},{"data":"Question: What is the average attendance of shows?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT avg(Attendance) FROM SHOW"},{"data":"Question: Return the average attendance across all shows.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT avg(Attendance) FROM SHOW"},{"data":"Question: What are the maximum and minimum share of performances whose type is not \"Live final\".\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""},{"data":"Question: Return the maximum and minimum shares for performances that do not have the type \"Live final\".\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT max(SHARE) ,  min(SHARE) FROM performance WHERE TYPE != \"Live final\""},{"data":"Question: How many different nationalities do conductors have?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT count(DISTINCT Nationality) FROM conductor"},{"data":"Question: Count the number of different nationalities of conductors.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT count(DISTINCT Nationality) FROM conductor"},{"data":"Question: List names of conductors in descending order of years of work.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor ORDER BY Year_of_Work DESC"},{"data":"Question: What are the names of conductors, sorted descending by the number of years they have worked?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor ORDER BY Year_of_Work DESC"},{"data":"Question: List the name of the conductor with the most years of work.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"},{"data":"Question: What is the name of the conductor who has worked the greatest number of years?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Name FROM conductor ORDER BY Year_of_Work DESC LIMIT 1"},{"data":"Question: Show the names of conductors and the orchestras they have conducted.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"},{"data":"Question: What are the names of conductors as well as the corresonding orchestras that they have conducted?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name ,  T2.Orchestra FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID"},{"data":"Question: Show the names of conductors that have conducted more than one orchestras.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"},{"data":"Question: What are the names of conductors who have conducted at more than one orchestra?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID HAVING COUNT(*)  >  1"},{"data":"Question: Show the name of the conductor that has conducted the most number of orchestras.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: What is the name of the conductor who has conducted the most orchestras?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID GROUP BY T2.Conductor_ID ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: Please show the name of the conductor that has conducted orchestras founded after 2008.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"},{"data":"Question: What are the names of conductors who have conducted orchestras founded after the year 2008?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT T1.Name FROM conductor AS T1 JOIN orchestra AS T2 ON T1.Conductor_ID  =  T2.Conductor_ID WHERE Year_of_Founded  >  2008"},{"data":"Question: Please show the different record companies and the corresponding number of orchestras.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"},{"data":"Question: How many orchestras does each record company manage?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company ,  COUNT(*) FROM orchestra GROUP BY Record_Company"},{"data":"Question: Please show the record formats of orchestras in ascending order of count.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"},{"data":"Question: What are the major record formats of orchestras, sorted by their frequency?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Major_Record_Format FROM orchestra GROUP BY Major_Record_Format ORDER BY COUNT(*) ASC"},{"data":"Question: List the record company shared by the most number of orchestras.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: What is the record company used by the greatest number of orchestras?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: List the names of orchestras that have no performance.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"},{"data":"Question: What are the orchestras that do not have any performances?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Orchestra FROM orchestra WHERE Orchestra_ID NOT IN (SELECT Orchestra_ID FROM performance)"},{"data":"Question: Show the record companies shared by orchestras founded before 2003 and after 2003.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"},{"data":"Question: What are the record companies that are used by both orchestras founded before 2003 and those founded after 2003?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Record_Company FROM orchestra WHERE Year_of_Founded  <  2003 INTERSECT SELECT Record_Company FROM orchestra WHERE Year_of_Founded  >  2003"},{"data":"Question: Find the number of orchestras whose record format is \"CD\" or \"DVD\".\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""},{"data":"Question: Count the number of orchestras that have CD or DVD as their record format.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT COUNT(*) FROM orchestra WHERE Major_Record_Format  =  \"CD\" OR Major_Record_Format  =  \"DVD\""},{"data":"Question: Show the years in which orchestras that have given more than one performance are founded.\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"},{"data":"Question: What are years of founding for orchestras that have had more than a single performance?\nSchema: 'conductor' [ Primary Key: 'Conductor_ID' int, 'Name' text, 'Age' int, 'Nationality' text, 'Year_of_Work' int];\n'orchestra' [ Primary Key: 'Orchestra_ID' int, 'Orchestra' text, 'Conductor_ID' int, 'Record_Company' text, 'Year_of_Founded' int, 'Major_Record_Format' text, Foreign Key: 'Conductor_ID' int from 'orchestra' 'Conductor_ID'];\n'performance' [ Primary Key: 'Performance_ID' int, 'Orchestra_ID' int, 'Type' text, 'Date' text, 'Official_ratings_(millions)' int, 'Weekly_rank' text, 'Share' text, Foreign Key: 'Orchestra_ID' int from 'performance' 'Orchestra_ID'];\n'show' [ 'Show_ID' int, 'Performance_ID' int, 'If_first_show' others, 'Result' text, 'Attendance' int, Foreign Key: 'Performance_ID' int from 'show' 'Performance_ID'];\n\nAnswer: SELECT Year_of_Founded FROM orchestra AS T1 JOIN performance AS T2 ON T1.Orchestra_ID  =  T2.Orchestra_ID GROUP BY T2.Orchestra_ID HAVING COUNT(*)  >  1"},{"data":"Question: How many high schoolers are there?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Highschooler"},{"data":"Question: Count the number of high schoolers.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Highschooler"},{"data":"Question: Show the names and grades of each high schooler.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT name ,  grade FROM Highschooler"},{"data":"Question: What are the names and grades for each high schooler?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT name ,  grade FROM Highschooler"},{"data":"Question: Show all the grades of the high schoolers.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler"},{"data":"Question: What is the grade of each high schooler?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler"},{"data":"Question: What grade is Kyle in?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""},{"data":"Question: Return the grade for the high schooler named Kyle.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler WHERE name  =  \"Kyle\""},{"data":"Question: Show the names of all high schoolers in grade 10.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT name FROM Highschooler WHERE grade  =  10"},{"data":"Question: What are the names of all high schoolers in grade 10?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT name FROM Highschooler WHERE grade  =  10"},{"data":"Question: Show the ID of the high schooler named Kyle.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""},{"data":"Question: What is Kyle's id?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT ID FROM Highschooler WHERE name  =  \"Kyle\""},{"data":"Question: How many high schoolers are there in grade 9 or 10?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"},{"data":"Question: Count the number of high schoolers in grades 9 or 10.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Highschooler WHERE grade  =  9 OR grade  =  10"},{"data":"Question: Show the number of high schoolers for each grade.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"},{"data":"Question: How many high schoolers are in each grade?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade ,  count(*) FROM Highschooler GROUP BY grade"},{"data":"Question: Which grade has the most high schoolers?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the grade that has the greatest number of high schoolers.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler GROUP BY grade ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show me all grades that have at least 4 students.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"},{"data":"Question: Which grades have 4 or more high schoolers?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT grade FROM Highschooler GROUP BY grade HAVING count(*)  >=  4"},{"data":"Question: Show the student IDs and numbers of friends corresponding to each.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"},{"data":"Question: How many friends does each student have?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT student_id ,  count(*) FROM Friend GROUP BY student_id"},{"data":"Question: Show the names of high school students and their corresponding number of friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"},{"data":"Question: What are the names of the high schoolers and how many friends does each have?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name ,  count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"},{"data":"Question: What is the name of the high schooler who has the greatest number of friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the name of the high school student with the most friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show the names of high schoolers who have at least 3 friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"},{"data":"Question: What are the names of high schoolers who have 3 or more friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  3"},{"data":"Question: Show the names of all of the high schooler Kyle's friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""},{"data":"Question: Return the names of friends of the high school student Kyle.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T3.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id JOIN Highschooler AS T3 ON T1.friend_id  =  T3.id WHERE T2.name  =  \"Kyle\""},{"data":"Question: How many friends does the high school student Kyle have?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""},{"data":"Question: Count the number of friends Kyle has.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""},{"data":"Question: Show ids of all students who do not have any friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"},{"data":"Question: What are the ids of high school students who do not have friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT id FROM Highschooler EXCEPT SELECT student_id FROM Friend"},{"data":"Question: Show names of all high school students who do not have any friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"},{"data":"Question: What are the names of students who have no friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT name FROM Highschooler EXCEPT SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id"},{"data":"Question: Show the ids of high schoolers who have friends and are also liked by someone else.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"},{"data":"Question: What are the ids of students who both have friends and are liked?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT student_id FROM Friend INTERSECT SELECT liked_id FROM Likes"},{"data":"Question: Show name of all students who have some friends and also are liked by someone else.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"},{"data":"Question: What are the names of high schoolers who both have friends and are liked?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id INTERSECT SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.liked_id  =  T2.id"},{"data":"Question: Count the number of likes for each student id.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"},{"data":"Question: How many likes correspond to each student id?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT student_id ,  count(*) FROM Likes GROUP BY student_id"},{"data":"Question: Show the names of high schoolers who have likes, and numbers of likes for each.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"},{"data":"Question: What are the names of high schoolers who have likes, and how many likes does each have?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name ,  count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id"},{"data":"Question: What is the name of the high schooler who has the greatest number of likes?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Give the name of the student with the most likes.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Show the names of students who have at least 2 likes.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"},{"data":"Question: What are the names of students who have 2 or more likes?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id GROUP BY T1.student_id HAVING count(*)  >=  2"},{"data":"Question: Show the names of students who have a grade higher than 5 and have at least 2 friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"},{"data":"Question: What are the names of high schoolers who have a grade of over 5 and have 2 or more friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT T2.name FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.grade  >  5 GROUP BY T1.student_id HAVING count(*)  >=  2"},{"data":"Question: How many likes does Kyle have?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""},{"data":"Question: Return the number of likes that the high schooler named Kyle has.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT count(*) FROM Likes AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id WHERE T2.name  =  \"Kyle\""},{"data":"Question: Find the average grade of all students who have some friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"},{"data":"Question: What is the average grade of students who have friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT avg(grade) FROM Highschooler WHERE id IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"},{"data":"Question: Find the minimum grade of students who have no friends.\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"},{"data":"Question: What is the lowest grade of students who do not have any friends?\nSchema: 'Highschooler' [ Primary Key: 'ID' int, 'name' text, 'grade' int];\n'Friend' [ Primary Key: 'student_id' int, 'friend_id' int, Foreign Key: 'student_id' int from 'Friend' 'student_id', Foreign Key: 'friend_id' int from 'Friend' 'friend_id'];\n'Likes' [ Primary Key: 'student_id' int, 'liked_id' int, Foreign Key: 'student_id' int from 'Likes' 'student_id', Foreign Key: 'liked_id' int from 'Likes' 'liked_id'];\n\nAnswer: SELECT min(grade) FROM Highschooler WHERE id NOT IN (SELECT T1.student_id FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id  =  T2.id)"},{"data":"Question: Which states have both owners and professionals living there?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"},{"data":"Question: Find the states where both owners and professionals live.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT state FROM Owners INTERSECT SELECT state FROM Professionals"},{"data":"Question: What is the average age of the dogs who have gone through any treatments?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"},{"data":"Question: Find the average age of the dogs who went through treatments.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT avg(age) FROM Dogs WHERE dog_id IN ( SELECT dog_id FROM Treatments )"},{"data":"Question: Which professionals live in the state of Indiana or have done treatment on more than 2 treatments? List his or her id, last name and cell phone.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"},{"data":"Question: Find the id, last name and cell phone of the professionals who live in the state of Indiana or have performed more than two treatments.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT professional_id ,  last_name ,  cell_number FROM Professionals WHERE state  =  'Indiana' UNION SELECT T1.professional_id ,  T1.last_name ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >  2"},{"data":"Question: Which dogs have not cost their owner more than 1000 for treatment ? List the dog names .\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"},{"data":"Question: What are the names of the dogs for which the owner has not spend more than 1000 for treatment ?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: select name from dogs where dog_id not in ( select dog_id from treatments group by dog_id having sum(cost_of_treatment)  >  1000 )"},{"data":"Question: Which first names are used for professionals or owners but are not used as dog names?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"},{"data":"Question: Find the first names that are used for professionals or owners but are not used as dog names.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT first_name FROM Professionals UNION SELECT first_name FROM Owners EXCEPT SELECT name FROM Dogs"},{"data":"Question: Which professional did not operate any treatment on dogs? List the professional's id, role and email.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"},{"data":"Question: Give me the id, role and email of the professionals who did not perform any treatment on dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT professional_id ,  role_code ,  email_address FROM Professionals EXCEPT SELECT T1.professional_id ,  T1.role_code ,  T1.email_address FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id"},{"data":"Question: Which owner owns the most dogs? List the owner id, first name and last name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Return the owner id, first name and last name of the owner who has the most dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.owner_id ,  T2.first_name ,  T2.last_name FROM Dogs AS T1 JOIN Owners AS T2 ON T1.owner_id  =  T2.owner_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which professionals have done at least two treatments? List the professional's id, role, and first name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"},{"data":"Question: What are the id, role, and first name of the professionals who have performed two or more treatments?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.professional_id ,  T1.role_code ,  T1.first_name FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"},{"data":"Question: What is the name of the breed with the most dogs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which breed do the most dogs have? Give me the breed name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.breed_name FROM Breeds AS T1 JOIN Dogs AS T2 ON T1.breed_code  =  T2.breed_code GROUP BY T1.breed_name ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Which owner has paid for the most treatments on his or her dogs? List the owner id and last name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: Tell me the owner id and last name of the owner who spent the most on treatments of his or her dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.owner_id ,  T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY count(*) DESC LIMIT 1"},{"data":"Question: What is the description of the treatment type that costs the least money in total?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"},{"data":"Question: Give me the description of the treatment type whose total cost is the lowest.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.treatment_type_description FROM Treatment_types AS T1 JOIN Treatments AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code GROUP BY T1.treatment_type_code ORDER BY sum(cost_of_treatment) ASC LIMIT 1"},{"data":"Question: Which owner has paid the largest amount of money in total for their dogs? Show the owner id and zip code.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"},{"data":"Question: Find the owner id and zip code of the owner who spent the most money in total for his or her dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.owner_id ,  T1.zip_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id JOIN Treatments AS T3 ON T2.dog_id  =  T3.dog_id GROUP BY T1.owner_id ORDER BY sum(T3.cost_of_treatment) DESC LIMIT 1"},{"data":"Question: Which professionals have done at least two types of treatments? List the professional id and cell phone.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"},{"data":"Question: Find the id and cell phone of the professionals who operate two or more types of treatments.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.professional_id ,  T1.cell_number FROM Professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id GROUP BY T1.professional_id HAVING count(*)  >=  2"},{"data":"Question: What are the first name and last name of the professionals who have done treatment with cost below average?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"},{"data":"Question: Which professionals have operated a treatment that costs less than the average? Give me theor first names and last names.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT T1.first_name ,  T1.last_name FROM Professionals AS T1 JOIN Treatments AS T2 WHERE cost_of_treatment  <  ( SELECT avg(cost_of_treatment) FROM Treatments )"},{"data":"Question: List the date of each treatment, together with the first name of the professional who operated it.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"},{"data":"Question: What are the date and the operating professional's first name of each treatment?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.date_of_treatment ,  T2.first_name FROM Treatments AS T1 JOIN Professionals AS T2 ON T1.professional_id  =  T2.professional_id"},{"data":"Question: List the cost of each treatment and the corresponding treatment type description.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"},{"data":"Question: What are the cost and treatment type description of each treatment?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.cost_of_treatment ,  T2.treatment_type_description FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code  =  T2.treatment_type_code"},{"data":"Question: List each owner's first name, last name, and the size of his for her dog.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"},{"data":"Question: What are each owner's first name, last name, and the size of their dog?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.first_name ,  T1.last_name ,  T2.size_code FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"},{"data":"Question: List pairs of the owner's first name and the dogs's name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"},{"data":"Question: What are each owner's first name and their dogs's name?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id"},{"data":"Question: List the names of the dogs of the rarest breed and the treatment dates of them.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"},{"data":"Question: Which dogs are of the rarest breed? Show their names and treatment dates.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.name ,  T2.date_of_treatment FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id WHERE T1.breed_code  =  ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"},{"data":"Question: Which dogs are owned by someone who lives in Virginia? List the owner's first name and the dog's name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"},{"data":"Question: Find the first names of owners living in Virginia and the names of dogs they own.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.first_name ,  T2.name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T1.state  =  'Virginia'"},{"data":"Question: What are the arriving date and the departing date of the dogs who have gone through a treatment?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"},{"data":"Question: Find the arriving date and the departing date of the dogs that received a treatment.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT T1.date_arrived ,  T1.date_departed FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id  =  T2.dog_id"},{"data":"Question: List the last name of the owner owning the youngest dog.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"},{"data":"Question: Who owns the youngest dog? Give me his or her last name.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT T1.last_name FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id  =  T2.owner_id WHERE T2.age  =  ( SELECT max(age) FROM Dogs )"},{"data":"Question: List the emails of the professionals who live in the state of Hawaii or the state of Wisconsin.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"},{"data":"Question: What are the emails of the professionals living in either the state of Hawaii or the state of Wisconsin?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT email_address FROM Professionals WHERE state  =  'Hawaii' OR state  =  'Wisconsin'"},{"data":"Question: What are the arriving date and the departing date of all the dogs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT date_arrived ,  date_departed FROM Dogs"},{"data":"Question: List the arrival date and the departure date for all the dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT date_arrived ,  date_departed FROM Dogs"},{"data":"Question: How many dogs went through any treatments?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(DISTINCT dog_id) FROM Treatments"},{"data":"Question: Count the number of dogs that went through a treatment.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(DISTINCT dog_id) FROM Treatments"},{"data":"Question: How many professionals have performed any treatment to dogs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(DISTINCT professional_id) FROM Treatments"},{"data":"Question: Find the number of professionals who have ever treated dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(DISTINCT professional_id) FROM Treatments"},{"data":"Question: Which professionals live in a city containing the substring 'West'? List his or her role, street, city and state.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"},{"data":"Question: Find the role, street, city and state of the professionals living in a city that contains the substring 'West'.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT role_code ,  street ,  city ,  state FROM professionals WHERE city LIKE '%West%'"},{"data":"Question: Which owners live in the state whose name contains the substring 'North'? List his first name, last name and email.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"},{"data":"Question: Return the first name, last name and email of the owners living in a state whose name contains the substring 'North'.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT first_name ,  last_name ,  email_address FROM Owners WHERE state LIKE '%North%'"},{"data":"Question: How many dogs have an age below the average?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"},{"data":"Question: Count the number of dogs of an age below the average.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Dogs WHERE age  <  ( SELECT avg(age) FROM Dogs )"},{"data":"Question: How much does the most recent treatment cost?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"},{"data":"Question: Show me the cost of the most recently performed treatment.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT cost_of_treatment FROM Treatments ORDER BY date_of_treatment DESC LIMIT 1"},{"data":"Question: How many dogs have not gone through any treatment?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Dogs WHERE dog_id NOT IN ( SELECT dog_id FROM Treatments )"},{"data":"Question: Tell me the number of dogs that have not received any treatment .\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: select count(*) from dogs where dog_id not in ( select dog_id from treatments )"},{"data":"Question: How many owners temporarily do not have any dogs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"},{"data":"Question: Find the number of owners who do not own any dogs at this moment.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Owners WHERE owner_id NOT IN ( SELECT owner_id FROM Dogs )"},{"data":"Question: How many professionals did not operate any treatment on dogs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"},{"data":"Question: Find the number of professionals who have not treated any dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT count(*) FROM Professionals WHERE professional_id NOT IN ( SELECT professional_id FROM Treatments )"},{"data":"Question: List the dog name, age and weight of the dogs who have been abandoned? 1 stands for yes, and 0 stands for no.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"},{"data":"Question: What are the dog name, age and weight of the dogs that were abandoned? Note that 1 stands for yes, and 0 stands for no in the tables.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT name ,  age ,  weight FROM Dogs WHERE abandoned_yn  =  1"},{"data":"Question: What is the average age of all the dogs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT avg(age) FROM Dogs"},{"data":"Question: Compute the average age of all the dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT avg(age) FROM Dogs"},{"data":"Question: What is the age of the oldest dog?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT max(age) FROM Dogs"},{"data":"Question: Tell me the age of the oldest dog.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT max(age) FROM Dogs"},{"data":"Question: How much does each charge type costs? List both charge type and amount.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT charge_type ,  charge_amount FROM Charges"},{"data":"Question: List each charge type and its amount.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT charge_type ,  charge_amount FROM Charges"},{"data":"Question: How much does the most expensive charge type costs?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT max(charge_amount) FROM Charges"},{"data":"Question: What is the charge amount of the most expensive charge type?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT max(charge_amount) FROM Charges"},{"data":"Question: List the email, cell phone and home phone of all the professionals.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT email_address ,  cell_number ,  home_phone FROM professionals"},{"data":"Question: What are the email, cell phone and home phone of each professional?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT email_address ,  cell_number ,  home_phone FROM professionals"},{"data":"Question: What are all the possible breed type and size type combinations?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT breed_code ,  size_code FROM dogs"},{"data":"Question: Find the distinct breed type and size type combinations for dogs.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT breed_code ,  size_code FROM dogs"},{"data":"Question: List the first name of all the professionals along with the description of the treatment they have done.\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"},{"data":"Question: What are each professional's first name and description of the treatment they have performed?\nSchema: 'Breeds' [ Primary Key: 'breed_code' text, 'breed_name' text];\n'Charges' [ Primary Key: 'charge_id' int, 'charge_type' text, 'charge_amount' int];\n'Sizes' [ Primary Key: 'size_code' text, 'size_description' text];\n'Treatment_Types' [ Primary Key: 'treatment_type_code' text, 'treatment_type_description' text];\n'Owners' [ Primary Key: 'owner_id' int, 'first_name' text, 'last_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Dogs' [ Primary Key: 'dog_id' int, 'owner_id' int, 'abandoned_yn' text, 'breed_code' text, 'size_code' text, 'name' text, 'age' text, 'date_of_birth' time, 'gender' text, 'weight' text, 'date_arrived' time, 'date_adopted' time, 'date_departed' time, Foreign Key: 'owner_id' int from 'Dogs' 'owner_id', Foreign Key: 'breed_code' text from 'Dogs' 'breed_code', Foreign Key: 'size_code' text from 'Dogs' 'size_code'];\n'Professionals' [ Primary Key: 'professional_id' int, 'role_code' text, 'first_name' text, 'street' text, 'city' text, 'state' text, 'zip_code' text, 'last_name' text, 'email_address' text, 'home_phone' text, 'cell_number' text];\n'Treatments' [ Primary Key: 'treatment_id' int, 'dog_id' int, 'professional_id' int, 'treatment_type_code' text, 'date_of_treatment' time, 'cost_of_treatment' int, Foreign Key: 'dog_id' int from 'Treatments' 'dog_id', Foreign Key: 'professional_id' int from 'Treatments' 'professional_id', Foreign Key: 'treatment_type_code' text from 'Treatments' 'treatment_type_code'];\n\nAnswer: SELECT DISTINCT T1.first_name ,  T3.treatment_type_description FROM professionals AS T1 JOIN Treatments AS T2 ON T1.professional_id  =  T2.professional_id JOIN Treatment_types AS T3 ON T2.treatment_type_code  =  T3.treatment_type_code"},{"data":"Question: How many singers are there?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT count(*) FROM singer"},{"data":"Question: What is the count of singers?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT count(*) FROM singer"},{"data":"Question: List the name of singers in ascending order of net worth.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"},{"data":"Question: What are the names of singers ordered by ascending net worth?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer ORDER BY Net_Worth_Millions ASC"},{"data":"Question: What are the birth year and citizenship of singers?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Birth_Year ,  Citizenship FROM singer"},{"data":"Question: What are the birth years and citizenships of the singers?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Birth_Year ,  Citizenship FROM singer"},{"data":"Question: List the name of singers whose citizenship is not \"France\".\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer WHERE Citizenship != \"France\""},{"data":"Question: What are the names of the singers who are not French citizens?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer WHERE Citizenship != \"France\""},{"data":"Question: Show the name of singers whose birth year is either 1948 or 1949?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"},{"data":"Question: What are the names of the singers whose birth years are either 1948 or 1949?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer WHERE Birth_Year  =  1948 OR Birth_Year  =  1949"},{"data":"Question: What is the name of the singer with the largest net worth?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"},{"data":"Question: What is the name of the singer who is worth the most?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer ORDER BY Net_Worth_Millions DESC LIMIT 1"},{"data":"Question: Show different citizenship of singers and the number of singers of each citizenship.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"},{"data":"Question: For each citizenship, how many singers are from that country?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship ,  COUNT(*) FROM singer GROUP BY Citizenship"},{"data":"Question: Please show the most common citizenship of singers.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship FROM singer GROUP BY Citizenship ORDER BY COUNT(*) DESC LIMIT 1"},{"data":"Question: What is the most common singer citizenship ?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: select citizenship from singer group by citizenship order by count(*) desc limit 1"},{"data":"Question: Show different citizenships and the maximum net worth of singers of each citizenship.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"},{"data":"Question: For each citizenship, what is the maximum net worth?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship ,  max(Net_Worth_Millions) FROM singer GROUP BY Citizenship"},{"data":"Question: Show titles of songs and names of singers.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"},{"data":"Question: What are the song titles and singer names?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT T2.Title ,  T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID"},{"data":"Question: Show distinct names of singers that have songs with sales more than 300000.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"},{"data":"Question: what are the different names of the singers that have sales more than 300000?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT DISTINCT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID WHERE T2.Sales  >  300000"},{"data":"Question: Show the names of singers that have more than one song.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"},{"data":"Question: What are the names of the singers that have more than one songs?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT T1.Name FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name HAVING COUNT(*)  >  1"},{"data":"Question: Show the names of singers and the total sales of their songs.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"},{"data":"Question: For each singer name, what is the total sales for their songs?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT T1.Name ,  sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID  =  T2.Singer_ID GROUP BY T1.Name"},{"data":"Question: List the name of singers that do not have any song.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"},{"data":"Question: What is the sname of every sing that does not have any song?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Name FROM singer WHERE Singer_ID NOT IN (SELECT Singer_ID FROM song)"},{"data":"Question: Show the citizenship shared by singers with birth year before 1945 and after 1955.\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"},{"data":"Question: What are the citizenships that are shared by singers with a birth year before 1945 and after 1955?\nSchema: 'singer' [ Primary Key: 'Singer_ID' int, 'Name' text, 'Birth_Year' int, 'Net_Worth_Millions' int, 'Citizenship' text];\n'song' [ Primary Key: 'Song_ID' int, 'Title' text, 'Singer_ID' int, 'Sales' int, 'Highest_Position' int, Foreign Key: 'Singer_ID' int from 'song' 'Singer_ID'];\n\nAnswer: SELECT Citizenship FROM singer WHERE Birth_Year  <  1945 INTERSECT SELECT Citizenship FROM singer WHERE Birth_Year  >  1955"},{"data":"Question: How many available features are there in total?\nSchema: 'Ref_Feature_Types' [ Primary Key: 'feature_type_code' text, 'feature_type_name' text];\n'Ref_Property_Types' [ Primary Key: 'property_type_code' text, 'property_type_description' text];\n'Other_Available_Features' [ Primary Key: 'feature_id' int, 'feature_type_code' text, 'feature_name' text, 'feature_description' text, Foreign Key: 'feature_type_code' text from 'Other_Available_Features' 'feature_type_code'];\n'Properties' [ Primary Key: 'property_id' int, 'property_type_code' text, 'date_on_market' time, 'date_sold' time, 'property_name' text, 'property_address' text, 'room_count' int, 'vendor_requested_price' int, 'buyer_offered_price' int, 'agreed_selling_price' int, 'apt_feature_1' text, 'apt_feature_2' text, 'apt_feature_3' text, 'fld_feature_1' text, 'fld_feature_2' text, 'fld_feature_3' text, 'hse_feature_1' text, 'hse_feature_2' text, 'hse_feature_3' text, 'oth_feature_1' text, 'oth_feature_2' text, 'oth_feature_3' text, 'shp_feature_1' text, 'shp_feature_2' text, 'shp_feature_3' text, 'other_property_details' text, Foreign Key: 'property_type_code' text from 'Properties' 'property_type_code'];\n'Other_Property_Features' [ 'property_id' int, 'feature_id' int, 'property_feature_description' text, Foreign Key: 'property_id' int from 'Other_Property_Features' 'property_id', Foreign Key: 'feature_id' int from 'Other_Property_Features' 'feature_id'];\n\nAnswer: SELECT count(*) FROM Other_Available_Features"},{"data":"Question: What is the feature type name of feature AirCon?\nSchema: 'Ref_Feature_Types' [ Primary Key: 'feature_type_code' text, 'feature_type_name' text];\n'Ref_Property_Types' [ Primary Key: 'property_type_code' text, 'property_type_description' text];\n'Other_Available_Features' [ Primary Key: 'feature_id' int, 'feature_type_code' text, 'feature_name' text, 'feature_description' text, Foreign Key: 'feature_type_code' text from 'Other_Available_Features' 'feature_type_code'];\n'Properties' [ Primary Key: 'property_id' int, 'property_type_code' text, 'date_on_market' time, 'date_sold' time, 'property_name' text, 'property_address' text, 'room_count' int, 'vendor_requested_price' int, 'buyer_offered_price' int, 'agreed_selling_price' int, 'apt_feature_1' text, 'apt_feature_2' text, 'apt_feature_3' text, 'fld_feature_1' text, 'fld_feature_2' text, 'fld_feature_3' text, 'hse_feature_1' text, 'hse_feature_2' text, 'hse_feature_3' text, 'oth_feature_1' text, 'oth_feature_2' text, 'oth_feature_3' text, 'shp_feature_1' text, 'shp_feature_2' text, 'shp_feature_3' text, 'other_property_details' text, Foreign Key: 'property_type_code' text from 'Properties' 'property_type_code'];\n'Other_Property_Features' [ 'property_id' int, 'feature_id' int, 'property_feature_description' text, Foreign Key: 'property_id' int from 'Other_Property_Features' 'property_id', Foreign Key: 'feature_id' int from 'Other_Property_Features' 'feature_id'];\n\nAnswer: SELECT T2.feature_type_name FROM Other_Available_Features AS T1 JOIN Ref_Feature_Types AS T2 ON T1.feature_type_code  =  T2.feature_type_code WHERE T1.feature_name  =  \"AirCon\""},{"data":"Question: Show the property type descriptions of properties belonging to that code.\nSchema: 'Ref_Feature_Types' [ Primary Key: 'feature_type_code' text, 'feature_type_name' text];\n'Ref_Property_Types' [ Primary Key: 'property_type_code' text, 'property_type_description' text];\n'Other_Available_Features' [ Primary Key: 'feature_id' int, 'feature_type_code' text, 'feature_name' text, 'feature_description' text, Foreign Key: 'feature_type_code' text from 'Other_Available_Features' 'feature_type_code'];\n'Properties' [ Primary Key: 'property_id' int, 'property_type_code' text, 'date_on_market' time, 'date_sold' time, 'property_name' text, 'property_address' text, 'room_count' int, 'vendor_requested_price' int, 'buyer_offered_price' int, 'agreed_selling_price' int, 'apt_feature_1' text, 'apt_feature_2' text, 'apt_feature_3' text, 'fld_feature_1' text, 'fld_feature_2' text, 'fld_feature_3' text, 'hse_feature_1' text, 'hse_feature_2' text, 'hse_feature_3' text, 'oth_feature_1' text, 'oth_feature_2' text, 'oth_feature_3' text, 'shp_feature_1' text, 'shp_feature_2' text, 'shp_feature_3' text, 'other_property_details' text, Foreign Key: 'property_type_code' text from 'Properties' 'property_type_code'];\n'Other_Property_Features' [ 'property_id' int, 'feature_id' int, 'property_feature_description' text, Foreign Key: 'property_id' int from 'Other_Property_Features' 'property_id', Foreign Key: 'feature_id' int from 'Other_Property_Features' 'feature_id'];\n\nAnswer: SELECT T2.property_type_description FROM Properties AS T1 JOIN Ref_Property_Types AS T2 ON T1.property_type_code  =  T2.property_type_code GROUP BY T1.property_type_code"},{"data":"Question: What are the names of properties that are either houses or apartments with more than 1 room?\nSchema: 'Ref_Feature_Types' [ Primary Key: 'feature_type_code' text, 'feature_type_name' text];\n'Ref_Property_Types' [ Primary Key: 'property_type_code' text, 'property_type_description' text];\n'Other_Available_Features' [ Primary Key: 'feature_id' int, 'feature_type_code' text, 'feature_name' text, 'feature_description' text, Foreign Key: 'feature_type_code' text from 'Other_Available_Features' 'feature_type_code'];\n'Properties' [ Primary Key: 'property_id' int, 'property_type_code' text, 'date_on_market' time, 'date_sold' time, 'property_name' text, 'property_address' text, 'room_count' int, 'vendor_requested_price' int, 'buyer_offered_price' int, 'agreed_selling_price' int, 'apt_feature_1' text, 'apt_feature_2' text, 'apt_feature_3' text, 'fld_feature_1' text, 'fld_feature_2' text, 'fld_feature_3' text, 'hse_feature_1' text, 'hse_feature_2' text, 'hse_feature_3' text, 'oth_feature_1' text, 'oth_feature_2' text, 'oth_feature_3' text, 'shp_feature_1' text, 'shp_feature_2' text, 'shp_feature_3' text, 'other_property_details' text, Foreign Key: 'property_type_code' text from 'Properties' 'property_type_code'];\n'Other_Property_Features' [ 'property_id' int, 'feature_id' int, 'property_feature_description' text, Foreign Key: 'property_id' int from 'Other_Property_Features' 'property_id', Foreign Key: 'feature_id' int from 'Other_Property_Features' 'feature_id'];\n\nAnswer: SELECT property_name FROM Properties WHERE property_type_code  =  \"House\" UNION SELECT property_name FROM Properties WHERE property_type_code  =  \"Apartment\" AND room_count  >  1"}]